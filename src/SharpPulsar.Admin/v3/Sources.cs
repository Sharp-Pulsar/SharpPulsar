//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace SharpPulsar.Admin.v3.Sources
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial interface IPulsarSourceRESTAPIClient
    {
        /// <summary>
        /// Fetches the list of built-in Pulsar IO sources
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectorDefinition>> GetSourceListAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetches the list of built-in Pulsar IO sources
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectorDefinition>> GetSourceListAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetches information about config fields associated with the specified builtin source
        /// </summary>
        /// <param name="name">The name of the builtin source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConfigFieldDefinition>> GetSourceConfigDefinitionAsync(string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetches information about config fields associated with the specified builtin source
        /// </summary>
        /// <param name="name">The name of the builtin source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConfigFieldDefinition>> GetSourceConfigDefinitionAsync(string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reload the built-in connectors, including Sources and Sinks
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>ReloadSourcesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reload the built-in connectors, including Sources and Sinks
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>ReloadSourcesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all Pulsar Sources currently deployed in a given namespace
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ListSourcesAsync(string tenant, string @namespace);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all Pulsar Sources currently deployed in a given namespace
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ListSourcesAsync(string tenant, string @namespace, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>The function was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>DeregisterSourceAsync(string tenant, string @namespace, string sourceName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>The function was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>DeregisterSourceAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetches information about a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SourceConfig> GetSourceInfoAsync(string tenant, string @namespace, string sourceName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetches information about a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SourceConfig> GetSourceInfoAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Pulsar Source in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="body">You can submit a source (in any languages that you are familiar with) to a Pulsar cluster. Follow the steps below.
        /// <br/>1. Create a JSON object using some of the following parameters.
        /// <br/>A JSON value presenting configuration payload of a Pulsar Source. An example of the expected functions can be found here.
        /// <br/>- **classname**
        /// <br/>  The class name of a Pulsar Source if archive is file-url-path (file://).
        /// <br/>- **topicName**
        /// <br/>  The Pulsar topic to which data is sent.
        /// <br/>- **serdeClassName**
        /// <br/>  The SerDe classname for the Pulsar Source.
        /// <br/>- **schemaType**
        /// <br/>  The schema type (either a builtin schema like 'avro', 'json', etc.. or    custom Schema class name to be used to encode messages emitted from the Pulsar Source
        /// <br/>- **configs**
        /// <br/>  Source config key/values
        /// <br/>- **secrets**
        /// <br/>  This is a map of secretName(that is how the secret is going to be accessed in the function via context) to an object that  encapsulates how the secret is fetched by the underlying secrets provider. The type of an value here can be found by the  SecretProviderConfigurator.getSecretObjectType() method. 
        /// <br/>- **parallelism**
        /// <br/>  The parallelism factor of a Pulsar Source (i.e. the number of a Pulsar Source instances to run).
        /// <br/>- **processingGuarantees**
        /// <br/>  The processing guarantees (aka delivery semantics) applied to the Pulsar Source.    Possible Values: [ATLEAST_ONCE, ATMOST_ONCE, EFFECTIVELY_ONCE]
        /// <br/>- **resources**
        /// <br/>  The size of the system resources allowed by the Pulsar Source runtime. The resources include: cpu, ram, disk.
        /// <br/>- **archive**
        /// <br/>  The path to the NAR archive for the Pulsar Source. It also supports url-path   [http/https/file (file protocol assumes that file already exists on worker host)]   from which worker can download the package.
        /// <br/>- **runtimeFlags**
        /// <br/>  Any flags that you want to pass to the runtime.
        /// <br/>2. Encapsulate the JSON object to a multipart object.</param>
        /// <returns>Pulsar Function successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>RegisterSourceAsync(string tenant, string @namespace, string sourceName, System.IO.Stream body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Pulsar Source in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="body">You can submit a source (in any languages that you are familiar with) to a Pulsar cluster. Follow the steps below.
        /// <br/>1. Create a JSON object using some of the following parameters.
        /// <br/>A JSON value presenting configuration payload of a Pulsar Source. An example of the expected functions can be found here.
        /// <br/>- **classname**
        /// <br/>  The class name of a Pulsar Source if archive is file-url-path (file://).
        /// <br/>- **topicName**
        /// <br/>  The Pulsar topic to which data is sent.
        /// <br/>- **serdeClassName**
        /// <br/>  The SerDe classname for the Pulsar Source.
        /// <br/>- **schemaType**
        /// <br/>  The schema type (either a builtin schema like 'avro', 'json', etc.. or    custom Schema class name to be used to encode messages emitted from the Pulsar Source
        /// <br/>- **configs**
        /// <br/>  Source config key/values
        /// <br/>- **secrets**
        /// <br/>  This is a map of secretName(that is how the secret is going to be accessed in the function via context) to an object that  encapsulates how the secret is fetched by the underlying secrets provider. The type of an value here can be found by the  SecretProviderConfigurator.getSecretObjectType() method. 
        /// <br/>- **parallelism**
        /// <br/>  The parallelism factor of a Pulsar Source (i.e. the number of a Pulsar Source instances to run).
        /// <br/>- **processingGuarantees**
        /// <br/>  The processing guarantees (aka delivery semantics) applied to the Pulsar Source.    Possible Values: [ATLEAST_ONCE, ATMOST_ONCE, EFFECTIVELY_ONCE]
        /// <br/>- **resources**
        /// <br/>  The size of the system resources allowed by the Pulsar Source runtime. The resources include: cpu, ram, disk.
        /// <br/>- **archive**
        /// <br/>  The path to the NAR archive for the Pulsar Source. It also supports url-path   [http/https/file (file protocol assumes that file already exists on worker host)]   from which worker can download the package.
        /// <br/>- **runtimeFlags**
        /// <br/>  Any flags that you want to pass to the runtime.
        /// <br/>2. Encapsulate the JSON object to a multipart object.</param>
        /// <returns>Pulsar Function successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>RegisterSourceAsync(string tenant, string @namespace, string sourceName, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="bodyBody">A JSON value presenting configuration payload of a Pulsar Source. An example of the expected functions can be found here.
        /// <br/>- **classname**
        /// <br/>  The class name of a Pulsar Source if archive is file-url-path (file://).
        /// <br/>- **topicName**
        /// <br/>  The Pulsar topic to which data is sent.
        /// <br/>- **serdeClassName**
        /// <br/>  The SerDe classname for the Pulsar Source.
        /// <br/>- **schemaType**
        /// <br/>  The schema type (either a builtin schema like 'avro', 'json', etc.. or    custom Schema class name to be used to encode messages emitted from the Pulsar Source
        /// <br/>- **configs**
        /// <br/>  Pulsar Source config key/values
        /// <br/>- **secrets**
        /// <br/>  This is a map of secretName(that is how the secret is going to be accessed in the function via context) to an object that  encapsulates how the secret is fetched by the underlying secrets provider. The type of an value here can be found by the  SecretProviderConfigurator.getSecretObjectType() method.
        /// <br/>- **parallelism**
        /// <br/>  The parallelism factor of a Pulsar Source (i.e. the number of a Pulsar Source instances to run).
        /// <br/>- **processingGuarantees**
        /// <br/>  The processing guarantees (aka delivery semantics) applied to the Pulsar Source.    Possible Values: [ATLEAST_ONCE, ATMOST_ONCE, EFFECTIVELY_ONCE]
        /// <br/>- **resources**
        /// <br/>  The size of the system resources allowed by the Pulsar Source runtime. The resources include: cpu, ram, disk.
        /// <br/>- **archive**
        /// <br/>  The path to the NAR archive for the Pulsar Source. It also supports url-path   [http/https/file (file protocol assumes that file already exists on worker host)]   from which worker can download the package.
        /// <br/>- **runtimeFlags**
        /// <br/>  Any flags that you want to pass to the runtime.</param>
        /// <returns>Pulsar Function successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>UpdateSourceAsync(string tenant, string @namespace, string sourceName, System.IO.Stream bodyBody);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="bodyBody">A JSON value presenting configuration payload of a Pulsar Source. An example of the expected functions can be found here.
        /// <br/>- **classname**
        /// <br/>  The class name of a Pulsar Source if archive is file-url-path (file://).
        /// <br/>- **topicName**
        /// <br/>  The Pulsar topic to which data is sent.
        /// <br/>- **serdeClassName**
        /// <br/>  The SerDe classname for the Pulsar Source.
        /// <br/>- **schemaType**
        /// <br/>  The schema type (either a builtin schema like 'avro', 'json', etc.. or    custom Schema class name to be used to encode messages emitted from the Pulsar Source
        /// <br/>- **configs**
        /// <br/>  Pulsar Source config key/values
        /// <br/>- **secrets**
        /// <br/>  This is a map of secretName(that is how the secret is going to be accessed in the function via context) to an object that  encapsulates how the secret is fetched by the underlying secrets provider. The type of an value here can be found by the  SecretProviderConfigurator.getSecretObjectType() method.
        /// <br/>- **parallelism**
        /// <br/>  The parallelism factor of a Pulsar Source (i.e. the number of a Pulsar Source instances to run).
        /// <br/>- **processingGuarantees**
        /// <br/>  The processing guarantees (aka delivery semantics) applied to the Pulsar Source.    Possible Values: [ATLEAST_ONCE, ATMOST_ONCE, EFFECTIVELY_ONCE]
        /// <br/>- **resources**
        /// <br/>  The size of the system resources allowed by the Pulsar Source runtime. The resources include: cpu, ram, disk.
        /// <br/>- **archive**
        /// <br/>  The path to the NAR archive for the Pulsar Source. It also supports url-path   [http/https/file (file protocol assumes that file already exists on worker host)]   from which worker can download the package.
        /// <br/>- **runtimeFlags**
        /// <br/>  Any flags that you want to pass to the runtime.</param>
        /// <returns>Pulsar Function successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>UpdateSourceAsync(string tenant, string @namespace, string sourceName, System.IO.Stream bodyBody, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Restart all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>RestartSourceAsync(string tenant, string @namespace, string sourceName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restart all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>RestartSourceAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>StartSourceAsync(string tenant, string @namespace, string sourceName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>StartSourceAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Displays the status of a Pulsar Source running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SourceStatus> GetSourceStatusAsync(string tenant, string @namespace, string sourceName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Displays the status of a Pulsar Source running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SourceStatus> GetSourceStatusAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stop all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>StopSourceAsync(string tenant, string @namespace, string sourceName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>StopSourceAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Restart an instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>RestartSource2Async(string tenant, string @namespace, string sourceName, string instanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restart an instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>RestartSource2Async(string tenant, string @namespace, string sourceName, string instanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start an instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>StartSource2Async(string tenant, string @namespace, string sourceName, string instanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start an instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>StartSource2Async(string tenant, string @namespace, string sourceName, string instanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Displays the status of a Pulsar Source instance
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SourceInstanceStatusData> GetSourceInstanceStatusAsync(string tenant, string @namespace, string sourceName, string instanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Displays the status of a Pulsar Source instance
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SourceInstanceStatusData> GetSourceInstanceStatusAsync(string tenant, string @namespace, string sourceName, string instanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Stop instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>StopSource2Async(string tenant, string @namespace, string sourceName, string instanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object>StopSource2Async(string tenant, string @namespace, string sourceName, string instanceId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PulsarSourceRESTAPIClient : IPulsarSourceRESTAPIClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PulsarSourceRESTAPIClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Fetches the list of built-in Pulsar IO sources
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectorDefinition>> GetSourceListAsync()
        {
            return GetSourceListAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetches the list of built-in Pulsar IO sources
        /// </summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConnectorDefinition>> GetSourceListAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/builtinsources");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConnectorDefinition>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 408)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Request timeout", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetches information about config fields associated with the specified builtin source
        /// </summary>
        /// <param name="name">The name of the builtin source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConfigFieldDefinition>> GetSourceConfigDefinitionAsync(string name)
        {
            return GetSourceConfigDefinitionAsync(name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetches information about config fields associated with the specified builtin source
        /// </summary>
        /// <param name="name">The name of the builtin source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConfigFieldDefinition>> GetSourceConfigDefinitionAsync(string name, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/builtinsources/{name}/configdefinition");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConfigFieldDefinition>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("builtin source does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reload the built-in connectors, including Sources and Sinks
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>ReloadSourcesAsync()
        {
            return ReloadSourcesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reload the built-in connectors, including Sources and Sinks
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>ReloadSourcesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/reloadBuiltInSources");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("This operation requires super-user access", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Lists all Pulsar Sources currently deployed in a given namespace
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ListSourcesAsync(string tenant, string @namespace)
        {
            return ListSourcesAsync(tenant, @namespace, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all Pulsar Sources currently deployed in a given namespace
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ListSourcesAsync(string tenant, string @namespace, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>The function was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>DeregisterSourceAsync(string tenant, string @namespace, string sourceName)
        {
            return DeregisterSourceAsync(tenant, @namespace, sourceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>The function was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>DeregisterSourceAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 408)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Request timeout", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetches information about a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SourceConfig> GetSourceInfoAsync(string tenant, string @namespace, string sourceName)
        {
            return GetSourceInfoAsync(tenant, @namespace, sourceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetches information about a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SourceConfig> GetSourceInfoAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SourceConfig>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a new Pulsar Source in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="body">You can submit a source (in any languages that you are familiar with) to a Pulsar cluster. Follow the steps below.
        /// <br/>1. Create a JSON object using some of the following parameters.
        /// <br/>A JSON value presenting configuration payload of a Pulsar Source. An example of the expected functions can be found here.
        /// <br/>- **classname**
        /// <br/>  The class name of a Pulsar Source if archive is file-url-path (file://).
        /// <br/>- **topicName**
        /// <br/>  The Pulsar topic to which data is sent.
        /// <br/>- **serdeClassName**
        /// <br/>  The SerDe classname for the Pulsar Source.
        /// <br/>- **schemaType**
        /// <br/>  The schema type (either a builtin schema like 'avro', 'json', etc.. or    custom Schema class name to be used to encode messages emitted from the Pulsar Source
        /// <br/>- **configs**
        /// <br/>  Source config key/values
        /// <br/>- **secrets**
        /// <br/>  This is a map of secretName(that is how the secret is going to be accessed in the function via context) to an object that  encapsulates how the secret is fetched by the underlying secrets provider. The type of an value here can be found by the  SecretProviderConfigurator.getSecretObjectType() method. 
        /// <br/>- **parallelism**
        /// <br/>  The parallelism factor of a Pulsar Source (i.e. the number of a Pulsar Source instances to run).
        /// <br/>- **processingGuarantees**
        /// <br/>  The processing guarantees (aka delivery semantics) applied to the Pulsar Source.    Possible Values: [ATLEAST_ONCE, ATMOST_ONCE, EFFECTIVELY_ONCE]
        /// <br/>- **resources**
        /// <br/>  The size of the system resources allowed by the Pulsar Source runtime. The resources include: cpu, ram, disk.
        /// <br/>- **archive**
        /// <br/>  The path to the NAR archive for the Pulsar Source. It also supports url-path   [http/https/file (file protocol assumes that file already exists on worker host)]   from which worker can download the package.
        /// <br/>- **runtimeFlags**
        /// <br/>  Any flags that you want to pass to the runtime.
        /// <br/>2. Encapsulate the JSON object to a multipart object.</param>
        /// <returns>Pulsar Function successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>RegisterSourceAsync(string tenant, string @namespace, string sourceName, System.IO.Stream body)
        {
            return RegisterSourceAsync(tenant, @namespace, sourceName, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Pulsar Source in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="body">You can submit a source (in any languages that you are familiar with) to a Pulsar cluster. Follow the steps below.
        /// <br/>1. Create a JSON object using some of the following parameters.
        /// <br/>A JSON value presenting configuration payload of a Pulsar Source. An example of the expected functions can be found here.
        /// <br/>- **classname**
        /// <br/>  The class name of a Pulsar Source if archive is file-url-path (file://).
        /// <br/>- **topicName**
        /// <br/>  The Pulsar topic to which data is sent.
        /// <br/>- **serdeClassName**
        /// <br/>  The SerDe classname for the Pulsar Source.
        /// <br/>- **schemaType**
        /// <br/>  The schema type (either a builtin schema like 'avro', 'json', etc.. or    custom Schema class name to be used to encode messages emitted from the Pulsar Source
        /// <br/>- **configs**
        /// <br/>  Source config key/values
        /// <br/>- **secrets**
        /// <br/>  This is a map of secretName(that is how the secret is going to be accessed in the function via context) to an object that  encapsulates how the secret is fetched by the underlying secrets provider. The type of an value here can be found by the  SecretProviderConfigurator.getSecretObjectType() method. 
        /// <br/>- **parallelism**
        /// <br/>  The parallelism factor of a Pulsar Source (i.e. the number of a Pulsar Source instances to run).
        /// <br/>- **processingGuarantees**
        /// <br/>  The processing guarantees (aka delivery semantics) applied to the Pulsar Source.    Possible Values: [ATLEAST_ONCE, ATMOST_ONCE, EFFECTIVELY_ONCE]
        /// <br/>- **resources**
        /// <br/>  The size of the system resources allowed by the Pulsar Source runtime. The resources include: cpu, ram, disk.
        /// <br/>- **archive**
        /// <br/>  The path to the NAR archive for the Pulsar Source. It also supports url-path   [http/https/file (file protocol assumes that file already exists on worker host)]   from which worker can download the package.
        /// <br/>- **runtimeFlags**
        /// <br/>  Any flags that you want to pass to the runtime.
        /// <br/>2. Encapsulate the JSON object to a multipart object.</param>
        /// <returns>Pulsar Function successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>RegisterSourceAsync(string tenant, string @namespace, string sourceName, System.IO.Stream body, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("multipart/form-data");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request (Function already exists or Tenant, Namespace or Name is not provided, etc.)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="bodyBody">A JSON value presenting configuration payload of a Pulsar Source. An example of the expected functions can be found here.
        /// <br/>- **classname**
        /// <br/>  The class name of a Pulsar Source if archive is file-url-path (file://).
        /// <br/>- **topicName**
        /// <br/>  The Pulsar topic to which data is sent.
        /// <br/>- **serdeClassName**
        /// <br/>  The SerDe classname for the Pulsar Source.
        /// <br/>- **schemaType**
        /// <br/>  The schema type (either a builtin schema like 'avro', 'json', etc.. or    custom Schema class name to be used to encode messages emitted from the Pulsar Source
        /// <br/>- **configs**
        /// <br/>  Pulsar Source config key/values
        /// <br/>- **secrets**
        /// <br/>  This is a map of secretName(that is how the secret is going to be accessed in the function via context) to an object that  encapsulates how the secret is fetched by the underlying secrets provider. The type of an value here can be found by the  SecretProviderConfigurator.getSecretObjectType() method.
        /// <br/>- **parallelism**
        /// <br/>  The parallelism factor of a Pulsar Source (i.e. the number of a Pulsar Source instances to run).
        /// <br/>- **processingGuarantees**
        /// <br/>  The processing guarantees (aka delivery semantics) applied to the Pulsar Source.    Possible Values: [ATLEAST_ONCE, ATMOST_ONCE, EFFECTIVELY_ONCE]
        /// <br/>- **resources**
        /// <br/>  The size of the system resources allowed by the Pulsar Source runtime. The resources include: cpu, ram, disk.
        /// <br/>- **archive**
        /// <br/>  The path to the NAR archive for the Pulsar Source. It also supports url-path   [http/https/file (file protocol assumes that file already exists on worker host)]   from which worker can download the package.
        /// <br/>- **runtimeFlags**
        /// <br/>  Any flags that you want to pass to the runtime.</param>
        /// <returns>Pulsar Function successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>UpdateSourceAsync(string tenant, string @namespace, string sourceName, System.IO.Stream bodyBody)
        {
            return UpdateSourceAsync(tenant, @namespace, sourceName, bodyBody, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a Pulsar Source currently running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="bodyBody">A JSON value presenting configuration payload of a Pulsar Source. An example of the expected functions can be found here.
        /// <br/>- **classname**
        /// <br/>  The class name of a Pulsar Source if archive is file-url-path (file://).
        /// <br/>- **topicName**
        /// <br/>  The Pulsar topic to which data is sent.
        /// <br/>- **serdeClassName**
        /// <br/>  The SerDe classname for the Pulsar Source.
        /// <br/>- **schemaType**
        /// <br/>  The schema type (either a builtin schema like 'avro', 'json', etc.. or    custom Schema class name to be used to encode messages emitted from the Pulsar Source
        /// <br/>- **configs**
        /// <br/>  Pulsar Source config key/values
        /// <br/>- **secrets**
        /// <br/>  This is a map of secretName(that is how the secret is going to be accessed in the function via context) to an object that  encapsulates how the secret is fetched by the underlying secrets provider. The type of an value here can be found by the  SecretProviderConfigurator.getSecretObjectType() method.
        /// <br/>- **parallelism**
        /// <br/>  The parallelism factor of a Pulsar Source (i.e. the number of a Pulsar Source instances to run).
        /// <br/>- **processingGuarantees**
        /// <br/>  The processing guarantees (aka delivery semantics) applied to the Pulsar Source.    Possible Values: [ATLEAST_ONCE, ATMOST_ONCE, EFFECTIVELY_ONCE]
        /// <br/>- **resources**
        /// <br/>  The size of the system resources allowed by the Pulsar Source runtime. The resources include: cpu, ram, disk.
        /// <br/>- **archive**
        /// <br/>  The path to the NAR archive for the Pulsar Source. It also supports url-path   [http/https/file (file protocol assumes that file already exists on worker host)]   from which worker can download the package.
        /// <br/>- **runtimeFlags**
        /// <br/>  Any flags that you want to pass to the runtime.</param>
        /// <returns>Pulsar Function successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>UpdateSourceAsync(string tenant, string @namespace, string sourceName, System.IO.Stream bodyBody, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(bodyBody);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("multipart/form-data");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request (Function already exists or Tenant, Namespace or Name is not provided, etc.)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Restart all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>RestartSourceAsync(string tenant, string @namespace, string sourceName)
        {
            return RestartSourceAsync(tenant, @namespace, sourceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restart all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>RestartSourceAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}/restart");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>StartSourceAsync(string tenant, string @namespace, string sourceName)
        {
            return StartSourceAsync(tenant, @namespace, sourceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>StartSourceAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}/start");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Displays the status of a Pulsar Source running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SourceStatus> GetSourceStatusAsync(string tenant, string @namespace, string sourceName)
        {
            return GetSourceStatusAsync(tenant, @namespace, sourceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Displays the status of a Pulsar Source running in cluster mode
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SourceStatus> GetSourceStatusAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}/status");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SourceStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 307)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Current broker doesn\'t serve the namespace of this source", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stop all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>StopSourceAsync(string tenant, string @namespace, string sourceName)
        {
            return StopSourceAsync(tenant, @namespace, sourceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop all instances of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>StopSourceAsync(string tenant, string @namespace, string sourceName, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}/stop");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Restart an instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>RestartSource2Async(string tenant, string @namespace, string sourceName, string instanceId)
        {
            return RestartSource2Async(tenant, @namespace, sourceName, instanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restart an instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>RestartSource2Async(string tenant, string @namespace, string sourceName, string instanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}/{instanceId}/restart");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 307)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Current broker doesn\'t serve the namespace of this source", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start an instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>StartSource2Async(string tenant, string @namespace, string sourceName, string instanceId)
        {
            return StartSource2Async(tenant, @namespace, sourceName, instanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start an instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>StartSource2Async(string tenant, string @namespace, string sourceName, string instanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}/{instanceId}/start");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Displays the status of a Pulsar Source instance
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SourceInstanceStatusData> GetSourceInstanceStatusAsync(string tenant, string @namespace, string sourceName, string instanceId)
        {
            return GetSourceInstanceStatusAsync(tenant, @namespace, sourceName, instanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Displays the status of a Pulsar Source instance
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SourceInstanceStatusData> GetSourceInstanceStatusAsync(string tenant, string @namespace, string sourceName, string instanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}/{instanceId}/status");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SourceInstanceStatusData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 307)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Current broker doesn\'t serve the namespace of this source", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal Server Error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Stop instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object>StopSource2Async(string tenant, string @namespace, string sourceName, string instanceId)
        {
            return StopSource2Async(tenant, @namespace, sourceName, instanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Stop instance of a Pulsar Source
        /// </summary>
        /// <param name="tenant">The tenant of a Pulsar Source</param>
        /// <param name="namespace">The namespace of a Pulsar Source</param>
        /// <param name="sourceName">The name of a Pulsar Source</param>
        /// <param name="instanceId">The instanceId of a Pulsar Source (if instance-id is not provided, the stats of all instances is returned).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object>StopSource2Async(string tenant, string @namespace, string sourceName, string instanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (sourceName == null)
                throw new System.ArgumentNullException("sourceName");

            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("sources/{tenant}/{namespace}/{sourceName}/{instanceId}/stop");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceName}", System.Uri.EscapeDataString(ConvertToString(sourceName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Client is not authorized to perform operation", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found(The Pulsar Source doesn\'t exist)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Function worker service is now initializing. Please try again later.", status_, responseText_, headers_, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {

                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false); if (objectResponse_.Object == null){throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);} return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Annotation
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class AnnotationIntrospector
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ArrayBuilders
    {
        [Newtonsoft.Json.JsonProperty("booleanBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BooleanBuilder BooleanBuilder { get; set; }

        [Newtonsoft.Json.JsonProperty("byteBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteBuilder ByteBuilder { get; set; }

        [Newtonsoft.Json.JsonProperty("doubleBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DoubleBuilder DoubleBuilder { get; set; }

        [Newtonsoft.Json.JsonProperty("floatBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FloatBuilder FloatBuilder { get; set; }

        [Newtonsoft.Json.JsonProperty("intBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IntBuilder IntBuilder { get; set; }

        [Newtonsoft.Json.JsonProperty("longBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LongBuilder LongBuilder { get; set; }

        [Newtonsoft.Json.JsonProperty("shortBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShortBuilder ShortBuilder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class AuthenticationDataSource
    {
        [Newtonsoft.Json.JsonProperty("commandData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommandData { get; set; }

        [Newtonsoft.Json.JsonProperty("httpAuthType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HttpAuthType { get; set; }

        [Newtonsoft.Json.JsonProperty("peerAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SocketAddress PeerAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("subscription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subscription { get; set; }

        [Newtonsoft.Json.JsonProperty("tlsCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Certificate> TlsCertificates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Base64Variant
    {
        [Newtonsoft.Json.JsonProperty("maxLineLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLineLength { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("paddingByte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] PaddingByte { get; set; }

        [Newtonsoft.Json.JsonProperty("paddingChar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaddingChar { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class BatchSourceConfig
    {
        [Newtonsoft.Json.JsonProperty("discoveryTriggererClassName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiscoveryTriggererClassName { get; set; }

        [Newtonsoft.Json.JsonProperty("discoveryTriggererConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> DiscoveryTriggererConfig { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class BooleanBuilder
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ByteBuilder
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Certificate
    {
        [Newtonsoft.Json.JsonProperty("encoded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<byte[]> Encoded { get; set; }

        [Newtonsoft.Json.JsonProperty("publicKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicKey PublicKey { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CharacterEscapes
    {
        [Newtonsoft.Json.JsonProperty("escapeCodesForAscii", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> EscapeCodesForAscii { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ClassIntrospector
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ClassLoader
    {
        [Newtonsoft.Json.JsonProperty("definedPackages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Package> DefinedPackages { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassLoader Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("registeredAsParallelCapable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RegisteredAsParallelCapable { get; set; }

        [Newtonsoft.Json.JsonProperty("unnamedModule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Module UnnamedModule { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CompletableFuture
    {
        [Newtonsoft.Json.JsonProperty("cancelled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cancelled { get; set; }

        [Newtonsoft.Json.JsonProperty("completedExceptionally", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompletedExceptionally { get; set; }

        [Newtonsoft.Json.JsonProperty("done", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Done { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfDependents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfDependents { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CompletableFutureClusterData
    {
        [Newtonsoft.Json.JsonProperty("cancelled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cancelled { get; set; }

        [Newtonsoft.Json.JsonProperty("completedExceptionally", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompletedExceptionally { get; set; }

        [Newtonsoft.Json.JsonProperty("done", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Done { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfDependents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfDependents { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CompletableFutureVoid
    {
        [Newtonsoft.Json.JsonProperty("cancelled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cancelled { get; set; }

        [Newtonsoft.Json.JsonProperty("completedExceptionally", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CompletedExceptionally { get; set; }

        [Newtonsoft.Json.JsonProperty("done", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Done { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfDependents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfDependents { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ConfigFieldDefinition
    {
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        [Newtonsoft.Json.JsonProperty("typeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ConnectorDefinition
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("sinkClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SinkClass { get; set; }

        [Newtonsoft.Json.JsonProperty("sinkConfigClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SinkConfigClass { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceClass { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceConfigClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceConfigClass { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ContextAttributes
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CryptoConfig
    {
        [Newtonsoft.Json.JsonProperty("consumerCryptoFailureAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CryptoConfigConsumerCryptoFailureAction? ConsumerCryptoFailureAction { get; set; }

        [Newtonsoft.Json.JsonProperty("cryptoKeyReaderClassName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CryptoKeyReaderClassName { get; set; }

        [Newtonsoft.Json.JsonProperty("cryptoKeyReaderConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> CryptoKeyReaderConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("encryptionKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EncryptionKeys { get; set; }

        [Newtonsoft.Json.JsonProperty("producerCryptoFailureAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CryptoConfigProducerCryptoFailureAction? ProducerCryptoFailureAction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Currency
    {
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultFractionDigits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultFractionDigits { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("numericCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumericCode { get; set; }

        [Newtonsoft.Json.JsonProperty("numericCodeAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumericCodeAsString { get; set; }

        [Newtonsoft.Json.JsonProperty("symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class DateFormat
    {
        [Newtonsoft.Json.JsonProperty("calendar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Calendar { get; set; }

        [Newtonsoft.Json.JsonProperty("lenient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Lenient { get; set; }

        [Newtonsoft.Json.JsonProperty("numberFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumberFormat NumberFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone TimeZone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class DeserializationConfig
    {
        [Newtonsoft.Json.JsonProperty("annotationIntrospector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnotationIntrospector AnnotationIntrospector { get; set; }

        [Newtonsoft.Json.JsonProperty("annotationProcessingEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AnnotationProcessingEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContextAttributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("base64Variant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base64Variant Base64Variant { get; set; }

        [Newtonsoft.Json.JsonProperty("classIntrospector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassIntrospector ClassIntrospector { get; set; }

        [Newtonsoft.Json.JsonProperty("dateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateFormat DateFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultPropertyInclusion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Value DefaultPropertyInclusion { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultVisibilityChecker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisibilityCheckerObject DefaultVisibilityChecker { get; set; }

        [Newtonsoft.Json.JsonProperty("deserializationFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeserializationFeatures { get; set; }

        [Newtonsoft.Json.JsonProperty("fullRootName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PropertyName FullRootName { get; set; }

        [Newtonsoft.Json.JsonProperty("handlerInstantiator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HandlerInstantiator HandlerInstantiator { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Locale Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("nodeFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNodeFactory NodeFactory { get; set; }

        [Newtonsoft.Json.JsonProperty("problemHandlers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LinkedNodeDeserializationProblemHandler ProblemHandlers { get; set; }

        [Newtonsoft.Json.JsonProperty("propertyNamingStrategy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PropertyNamingStrategy PropertyNamingStrategy { get; set; }

        [Newtonsoft.Json.JsonProperty("rootName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootName { get; set; }

        [Newtonsoft.Json.JsonProperty("subtypeResolver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubtypeResolver SubtypeResolver { get; set; }

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone TimeZone { get; set; }

        [Newtonsoft.Json.JsonProperty("typeFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeFactory TypeFactory { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class DeserializationContext
    {
        [Newtonsoft.Json.JsonProperty("annotationIntrospector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnotationIntrospector AnnotationIntrospector { get; set; }

        [Newtonsoft.Json.JsonProperty("arrayBuilders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArrayBuilders ArrayBuilders { get; set; }

        [Newtonsoft.Json.JsonProperty("base64Variant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base64Variant Base64Variant { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeserializationConfig Config { get; set; }

        [Newtonsoft.Json.JsonProperty("contextualType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JavaType ContextualType { get; set; }

        [Newtonsoft.Json.JsonProperty("deserializationFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeserializationFeatures { get; set; }

        [Newtonsoft.Json.JsonProperty("factory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeserializerFactory Factory { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Locale Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("nodeFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNodeFactory NodeFactory { get; set; }

        [Newtonsoft.Json.JsonProperty("parser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonParser Parser { get; set; }

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone TimeZone { get; set; }

        [Newtonsoft.Json.JsonProperty("typeFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeFactory TypeFactory { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class DeserializerFactory
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class DoubleBuilder
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ExceptionInformation
    {
        [Newtonsoft.Json.JsonProperty("exceptionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionString { get; set; }

        [Newtonsoft.Json.JsonProperty("timestampMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TimestampMs { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class FilterProvider
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class FloatBuilder
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class FormatSchema
    {
        [Newtonsoft.Json.JsonProperty("schemaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class HandlerInstantiator
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class InjectableValues
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class InputDecorator
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class IntBuilder
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JavaType
    {
        [Newtonsoft.Json.JsonProperty("abstract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Abstract { get; set; }

        [Newtonsoft.Json.JsonProperty("arrayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ArrayType { get; set; }

        [Newtonsoft.Json.JsonProperty("bindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeBindings Bindings { get; set; }

        [Newtonsoft.Json.JsonProperty("collectionLikeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CollectionLikeType { get; set; }

        [Newtonsoft.Json.JsonProperty("concrete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Concrete { get; set; }

        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContainerType { get; set; }

        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JavaType ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("contentTypeHandler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ContentTypeHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("contentValueHandler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ContentValueHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("enumType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnumType { get; set; }

        [Newtonsoft.Json.JsonProperty("erasedSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErasedSignature { get; set; }

        [Newtonsoft.Json.JsonProperty("final", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Final { get; set; }

        [Newtonsoft.Json.JsonProperty("genericSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GenericSignature { get; set; }

        [Newtonsoft.Json.JsonProperty("interface", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Interface { get; set; }

        [Newtonsoft.Json.JsonProperty("interfaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JavaType> Interfaces { get; set; }

        [Newtonsoft.Json.JsonProperty("javaLangObject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JavaLangObject { get; set; }

        [Newtonsoft.Json.JsonProperty("keyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JavaType KeyType { get; set; }

        [Newtonsoft.Json.JsonProperty("mapLikeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MapLikeType { get; set; }

        [Newtonsoft.Json.JsonProperty("primitive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primitive { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReferenceType { get; set; }

        [Newtonsoft.Json.JsonProperty("referencedType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JavaType ReferencedType { get; set; }

        [Newtonsoft.Json.JsonProperty("superClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JavaType SuperClass { get; set; }

        [Newtonsoft.Json.JsonProperty("throwable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Throwable { get; set; }

        [Newtonsoft.Json.JsonProperty("typeHandler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TypeHandler { get; set; }

        [Newtonsoft.Json.JsonProperty("typeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("valueHandler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ValueHandler { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JsonFactory
    {
        [Newtonsoft.Json.JsonProperty("characterEscapes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterEscapes CharacterEscapes { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObjectCodec Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("formatName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatName { get; set; }

        [Newtonsoft.Json.JsonProperty("inputDecorator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InputDecorator InputDecorator { get; set; }

        [Newtonsoft.Json.JsonProperty("outputDecorator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputDecorator OutputDecorator { get; set; }

        [Newtonsoft.Json.JsonProperty("rootValueSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootValueSeparator { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JsonGenerator
    {
        [Newtonsoft.Json.JsonProperty("characterEscapes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterEscapes CharacterEscapes { get; set; }

        [Newtonsoft.Json.JsonProperty("closed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Closed { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObjectCodec Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("currentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CurrentValue { get; set; }

        [Newtonsoft.Json.JsonProperty("featureMask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeatureMask { get; set; }

        [Newtonsoft.Json.JsonProperty("formatFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FormatFeatures { get; set; }

        [Newtonsoft.Json.JsonProperty("highestEscapedChar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HighestEscapedChar { get; set; }

        [Newtonsoft.Json.JsonProperty("outputBuffered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutputBuffered { get; set; }

        [Newtonsoft.Json.JsonProperty("outputContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonStreamContext OutputContext { get; set; }

        [Newtonsoft.Json.JsonProperty("outputTarget", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object OutputTarget { get; set; }

        [Newtonsoft.Json.JsonProperty("prettyPrinter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrettyPrinter PrettyPrinter { get; set; }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormatSchema Schema { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JsonLocation
    {
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ByteOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("charOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("columnNr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ColumnNr { get; set; }

        [Newtonsoft.Json.JsonProperty("lineNr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LineNr { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object SourceRef { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JsonNodeFactory
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JsonParser
    {
        [Newtonsoft.Json.JsonProperty("bigIntegerValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BigIntegerValue { get; set; }

        [Newtonsoft.Json.JsonProperty("binaryValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<byte[]> BinaryValue { get; set; }

        [Newtonsoft.Json.JsonProperty("booleanValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BooleanValue { get; set; }

        [Newtonsoft.Json.JsonProperty("byteValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] ByteValue { get; set; }

        [Newtonsoft.Json.JsonProperty("closed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Closed { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObjectCodec Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("currentLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLocation CurrentLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("currentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentName { get; set; }

        [Newtonsoft.Json.JsonProperty("currentToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonParserCurrentToken? CurrentToken { get; set; }

        [Newtonsoft.Json.JsonProperty("currentTokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentTokenId { get; set; }

        [Newtonsoft.Json.JsonProperty("currentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CurrentValue { get; set; }

        [Newtonsoft.Json.JsonProperty("decimalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DecimalValue { get; set; }

        [Newtonsoft.Json.JsonProperty("doubleValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DoubleValue { get; set; }

        [Newtonsoft.Json.JsonProperty("embeddedObject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object EmbeddedObject { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedStartArrayToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpectedStartArrayToken { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedStartObjectToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpectedStartObjectToken { get; set; }

        [Newtonsoft.Json.JsonProperty("featureMask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeatureMask { get; set; }

        [Newtonsoft.Json.JsonProperty("floatValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FloatValue { get; set; }

        [Newtonsoft.Json.JsonProperty("formatFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FormatFeatures { get; set; }

        [Newtonsoft.Json.JsonProperty("inputSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InputSource { get; set; }

        [Newtonsoft.Json.JsonProperty("intValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntValue { get; set; }

        [Newtonsoft.Json.JsonProperty("lastClearedToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonParserLastClearedToken? LastClearedToken { get; set; }

        [Newtonsoft.Json.JsonProperty("longValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LongValue { get; set; }

        [Newtonsoft.Json.JsonProperty("numberType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonParserNumberType? NumberType { get; set; }

        [Newtonsoft.Json.JsonProperty("numberValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Number NumberValue { get; set; }

        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ObjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("parsingContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonStreamContext ParsingContext { get; set; }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormatSchema Schema { get; set; }

        [Newtonsoft.Json.JsonProperty("shortValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ShortValue { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("textCharacters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TextCharacters { get; set; }

        [Newtonsoft.Json.JsonProperty("textLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TextLength { get; set; }

        [Newtonsoft.Json.JsonProperty("textOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TextOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("tokenLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonLocation TokenLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsBoolean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValueAsBoolean { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsDouble", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueAsDouble { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsInt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ValueAsInt { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsLong", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ValueAsLong { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueAsString { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JsonSerializer
    {
        [Newtonsoft.Json.JsonProperty("unwrappingSerializer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnwrappingSerializer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JsonSerializerObject
    {
        [Newtonsoft.Json.JsonProperty("delegatee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonSerializerObject Delegatee { get; set; }

        [Newtonsoft.Json.JsonProperty("unwrappingSerializer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnwrappingSerializer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class JsonStreamContext
    {
        [Newtonsoft.Json.JsonProperty("currentIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("currentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentName { get; set; }

        [Newtonsoft.Json.JsonProperty("currentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CurrentValue { get; set; }

        [Newtonsoft.Json.JsonProperty("entryCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EntryCount { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonStreamContext Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("typeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeDesc { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class LinkedNode
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class LinkedNodeDeserializationProblemHandler
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Locale
    {
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("displayCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayCountry { get; set; }

        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("displayScript", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayScript { get; set; }

        [Newtonsoft.Json.JsonProperty("displayVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayVariant { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExtensionKeys { get; set; }

        [Newtonsoft.Json.JsonProperty("iso3Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iso3Country { get; set; }

        [Newtonsoft.Json.JsonProperty("iso3Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Iso3Language { get; set; }

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("script", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Script { get; set; }

        [Newtonsoft.Json.JsonProperty("unicodeLocaleAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UnicodeLocaleAttributes { get; set; }

        [Newtonsoft.Json.JsonProperty("unicodeLocaleKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UnicodeLocaleKeys { get; set; }

        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Variant { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class LongBuilder
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Module
    {
        [Newtonsoft.Json.JsonProperty("annotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Annotation> Annotations { get; set; }

        [Newtonsoft.Json.JsonProperty("classLoader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassLoader ClassLoader { get; set; }

        [Newtonsoft.Json.JsonProperty("declaredAnnotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Annotation> DeclaredAnnotations { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleDescriptor Descriptor { get; set; }

        [Newtonsoft.Json.JsonProperty("layer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModuleLayer Layer { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("named", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Named { get; set; }

        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Packages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ModuleDescriptor
    {
        [Newtonsoft.Json.JsonProperty("automatic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Automatic { get; set; }

        [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Open { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ModuleLayer
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Number
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class NumberFormat
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("groupingUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupingUsed { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumFractionDigits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumFractionDigits { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumIntegerDigits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumIntegerDigits { get; set; }

        [Newtonsoft.Json.JsonProperty("minimumFractionDigits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumFractionDigits { get; set; }

        [Newtonsoft.Json.JsonProperty("minimumIntegerDigits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumIntegerDigits { get; set; }

        [Newtonsoft.Json.JsonProperty("parseIntegerOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ParseIntegerOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("roundingMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NumberFormatRoundingMode? RoundingMode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ObjectCodec
    {
        [Newtonsoft.Json.JsonProperty("factory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonFactory Factory { get; set; }

        [Newtonsoft.Json.JsonProperty("jsonFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonFactory JsonFactory { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ObjectMapper
    {
        [Newtonsoft.Json.JsonProperty("dateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateFormat DateFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("deserializationConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeserializationConfig DeserializationConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("deserializationContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeserializationContext DeserializationContext { get; set; }

        [Newtonsoft.Json.JsonProperty("factory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonFactory Factory { get; set; }

        [Newtonsoft.Json.JsonProperty("injectableValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InjectableValues InjectableValues { get; set; }

        [Newtonsoft.Json.JsonProperty("jsonFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonFactory JsonFactory { get; set; }

        [Newtonsoft.Json.JsonProperty("nodeFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonNodeFactory NodeFactory { get; set; }

        [Newtonsoft.Json.JsonProperty("propertyNamingStrategy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PropertyNamingStrategy PropertyNamingStrategy { get; set; }

        [Newtonsoft.Json.JsonProperty("serializationConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerializationConfig SerializationConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("serializerFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerializerFactory SerializerFactory { get; set; }

        [Newtonsoft.Json.JsonProperty("serializerProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerializerProvider SerializerProvider { get; set; }

        [Newtonsoft.Json.JsonProperty("serializerProviderInstance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerializerProvider SerializerProviderInstance { get; set; }

        [Newtonsoft.Json.JsonProperty("subtypeResolver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubtypeResolver SubtypeResolver { get; set; }

        [Newtonsoft.Json.JsonProperty("typeFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeFactory TypeFactory { get; set; }

        [Newtonsoft.Json.JsonProperty("visibilityChecker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisibilityCheckerObject VisibilityChecker { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class OutputDecorator
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Package
    {
        [Newtonsoft.Json.JsonProperty("annotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Annotation> Annotations { get; set; }

        [Newtonsoft.Json.JsonProperty("declaredAnnotations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Annotation> DeclaredAnnotations { get; set; }

        [Newtonsoft.Json.JsonProperty("implementationTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImplementationTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("implementationVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImplementationVendor { get; set; }

        [Newtonsoft.Json.JsonProperty("implementationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImplementationVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("sealed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sealed { get; set; }

        [Newtonsoft.Json.JsonProperty("specificationTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecificationTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("specificationVendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecificationVendor { get; set; }

        [Newtonsoft.Json.JsonProperty("specificationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecificationVersion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PrettyPrinter
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ProducerConfig
    {
        [Newtonsoft.Json.JsonProperty("batchBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchBuilder { get; set; }

        [Newtonsoft.Json.JsonProperty("cryptoConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CryptoConfig CryptoConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("maxPendingMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxPendingMessages { get; set; }

        [Newtonsoft.Json.JsonProperty("maxPendingMessagesAcrossPartitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxPendingMessagesAcrossPartitions { get; set; }

        [Newtonsoft.Json.JsonProperty("useThreadLocalProducers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseThreadLocalProducers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PropertyName
    {
        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Empty { get; set; }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("simpleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimpleName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PropertyNamingStrategy
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PublicKey
    {
        [Newtonsoft.Json.JsonProperty("algorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Algorithm { get; set; }

        [Newtonsoft.Json.JsonProperty("encoded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<byte[]> Encoded { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Resources
    {
        [Newtonsoft.Json.JsonProperty("cpu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Cpu { get; set; }

        [Newtonsoft.Json.JsonProperty("disk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Disk { get; set; }

        [Newtonsoft.Json.JsonProperty("ram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Ram { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SerializationConfig
    {
        [Newtonsoft.Json.JsonProperty("annotationIntrospector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnotationIntrospector AnnotationIntrospector { get; set; }

        [Newtonsoft.Json.JsonProperty("annotationProcessingEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AnnotationProcessingEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContextAttributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("base64Variant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base64Variant Base64Variant { get; set; }

        [Newtonsoft.Json.JsonProperty("classIntrospector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassIntrospector ClassIntrospector { get; set; }

        [Newtonsoft.Json.JsonProperty("dateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateFormat DateFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultPrettyPrinter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrettyPrinter DefaultPrettyPrinter { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultPropertyInclusion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Value DefaultPropertyInclusion { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultVisibilityChecker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisibilityCheckerObject DefaultVisibilityChecker { get; set; }

        [Newtonsoft.Json.JsonProperty("filterProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterProvider FilterProvider { get; set; }

        [Newtonsoft.Json.JsonProperty("fullRootName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PropertyName FullRootName { get; set; }

        [Newtonsoft.Json.JsonProperty("handlerInstantiator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HandlerInstantiator HandlerInstantiator { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Locale Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("propertyNamingStrategy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PropertyNamingStrategy PropertyNamingStrategy { get; set; }

        [Newtonsoft.Json.JsonProperty("rootName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootName { get; set; }

        [Newtonsoft.Json.JsonProperty("serializationFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializationFeatures { get; set; }

        [Newtonsoft.Json.JsonProperty("serializationInclusion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SerializationConfigSerializationInclusion? SerializationInclusion { get; set; }

        [Newtonsoft.Json.JsonProperty("subtypeResolver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubtypeResolver SubtypeResolver { get; set; }

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone TimeZone { get; set; }

        [Newtonsoft.Json.JsonProperty("typeFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeFactory TypeFactory { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SerializerFactory
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SerializerProvider
    {
        [Newtonsoft.Json.JsonProperty("annotationIntrospector", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnotationIntrospector AnnotationIntrospector { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerializationConfig Config { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultNullKeySerializer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonSerializerObject DefaultNullKeySerializer { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultNullValueSerializer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonSerializerObject DefaultNullValueSerializer { get; set; }

        [Newtonsoft.Json.JsonProperty("filterProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterProvider FilterProvider { get; set; }

        [Newtonsoft.Json.JsonProperty("generator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonGenerator Generator { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Locale Locale { get; set; }

        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeZone TimeZone { get; set; }

        [Newtonsoft.Json.JsonProperty("typeFactory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TypeFactory TypeFactory { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ShortBuilder
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SocketAddress
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SourceConfig
    {
        [Newtonsoft.Json.JsonProperty("archive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Archive { get; set; }

        [Newtonsoft.Json.JsonProperty("batchBuilder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchBuilder { get; set; }

        [Newtonsoft.Json.JsonProperty("batchSourceConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BatchSourceConfig BatchSourceConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("className", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassName { get; set; }

        [Newtonsoft.Json.JsonProperty("configs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configs { get; set; }

        [Newtonsoft.Json.JsonProperty("customRuntimeOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomRuntimeOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("parallelism", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Parallelism { get; set; }

        [Newtonsoft.Json.JsonProperty("processingGuarantees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SourceConfigProcessingGuarantees? ProcessingGuarantees { get; set; }

        [Newtonsoft.Json.JsonProperty("producerConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProducerConfig ProducerConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Resources Resources { get; set; }

        [Newtonsoft.Json.JsonProperty("runtimeFlags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuntimeFlags { get; set; }

        [Newtonsoft.Json.JsonProperty("schemaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaType { get; set; }

        [Newtonsoft.Json.JsonProperty("secrets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Secrets { get; set; }

        [Newtonsoft.Json.JsonProperty("serdeClassName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerdeClassName { get; set; }

        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant { get; set; }

        [Newtonsoft.Json.JsonProperty("topicName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TopicName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SourceInstanceStatus
    {
        [Newtonsoft.Json.JsonProperty("instanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceInstanceStatusData Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SourceInstanceStatusData
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        [Newtonsoft.Json.JsonProperty("lastReceivedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LastReceivedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("latestSourceExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExceptionInformation> LatestSourceExceptions { get; set; }

        [Newtonsoft.Json.JsonProperty("latestSystemExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExceptionInformation> LatestSystemExceptions { get; set; }

        [Newtonsoft.Json.JsonProperty("numReceivedFromSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumReceivedFromSource { get; set; }

        [Newtonsoft.Json.JsonProperty("numRestarts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumRestarts { get; set; }

        [Newtonsoft.Json.JsonProperty("numSourceExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumSourceExceptions { get; set; }

        [Newtonsoft.Json.JsonProperty("numSystemExceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumSystemExceptions { get; set; }

        [Newtonsoft.Json.JsonProperty("numWritten", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NumWritten { get; set; }

        [Newtonsoft.Json.JsonProperty("running", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Running { get; set; }

        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SourceStatus
    {
        [Newtonsoft.Json.JsonProperty("instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SourceInstanceStatus> Instances { get; set; }

        [Newtonsoft.Json.JsonProperty("numInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumInstances { get; set; }

        [Newtonsoft.Json.JsonProperty("numRunning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRunning { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class SubtypeResolver
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class TimeZone
    {
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("dstsavings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Dstsavings { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("rawOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RawOffset { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class TypeBindings
    {
        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Empty { get; set; }

        [Newtonsoft.Json.JsonProperty("typeParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JavaType> TypeParameters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class TypeFactory
    {
        [Newtonsoft.Json.JsonProperty("classLoader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClassLoader ClassLoader { get; set; }

    }

    /// <summary>
    /// Options while updating the sink
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class UpdateOptions
    {
        /// <summary>
        /// Whether or not to update the auth data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("update-auth-data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateAuthData { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Value
    {
        [Newtonsoft.Json.JsonProperty("contentInclusion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ValueContentInclusion? ContentInclusion { get; set; }

        [Newtonsoft.Json.JsonProperty("valueInclusion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ValueInclusion? ValueInclusion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class VisibilityChecker
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class VisibilityCheckerObject
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum CryptoConfigConsumerCryptoFailureAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISCARD")]
        DISCARD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSUME")]
        CONSUME = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum CryptoConfigProducerCryptoFailureAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAIL")]
        FAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SEND")]
        SEND = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum JsonParserCurrentToken
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_AVAILABLE")]
        NOT_AVAILABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"START_OBJECT")]
        START_OBJECT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"END_OBJECT")]
        END_OBJECT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"START_ARRAY")]
        START_ARRAY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"END_ARRAY")]
        END_ARRAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELD_NAME")]
        FIELD_NAME = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_EMBEDDED_OBJECT")]
        VALUE_EMBEDDED_OBJECT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_STRING")]
        VALUE_STRING = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_NUMBER_INT")]
        VALUE_NUMBER_INT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_NUMBER_FLOAT")]
        VALUE_NUMBER_FLOAT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_TRUE")]
        VALUE_TRUE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_FALSE")]
        VALUE_FALSE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_NULL")]
        VALUE_NULL = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum JsonParserLastClearedToken
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_AVAILABLE")]
        NOT_AVAILABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"START_OBJECT")]
        START_OBJECT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"END_OBJECT")]
        END_OBJECT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"START_ARRAY")]
        START_ARRAY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"END_ARRAY")]
        END_ARRAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FIELD_NAME")]
        FIELD_NAME = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_EMBEDDED_OBJECT")]
        VALUE_EMBEDDED_OBJECT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_STRING")]
        VALUE_STRING = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_NUMBER_INT")]
        VALUE_NUMBER_INT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_NUMBER_FLOAT")]
        VALUE_NUMBER_FLOAT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_TRUE")]
        VALUE_TRUE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_FALSE")]
        VALUE_FALSE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE_NULL")]
        VALUE_NULL = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum JsonParserNumberType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INT")]
        INT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LONG")]
        LONG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_INTEGER")]
        BIG_INTEGER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT")]
        FLOAT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_DECIMAL")]
        BIG_DECIMAL = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum NumberFormatRoundingMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UP")]
        UP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DOWN")]
        DOWN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CEILING")]
        CEILING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOOR")]
        FLOOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HALF_UP")]
        HALF_UP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HALF_DOWN")]
        HALF_DOWN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HALF_EVEN")]
        HALF_EVEN = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"UNNECESSARY")]
        UNNECESSARY = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum SerializationConfigSerializationInclusion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_NULL")]
        NON_NULL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_ABSENT")]
        NON_ABSENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_EMPTY")]
        NON_EMPTY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_DEFAULT")]
        NON_DEFAULT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"USE_DEFAULTS")]
        USE_DEFAULTS = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum SourceConfigProcessingGuarantees
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ATLEAST_ONCE")]
        ATLEAST_ONCE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ATMOST_ONCE")]
        ATMOST_ONCE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EFFECTIVELY_ONCE")]
        EFFECTIVELY_ONCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum ValueContentInclusion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_NULL")]
        NON_NULL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_ABSENT")]
        NON_ABSENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_EMPTY")]
        NON_EMPTY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_DEFAULT")]
        NON_DEFAULT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"USE_DEFAULTS")]
        USE_DEFAULTS = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public enum ValueInclusion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALWAYS")]
        ALWAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_NULL")]
        NON_NULL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_ABSENT")]
        NON_ABSENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_EMPTY")]
        NON_EMPTY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_DEFAULT")]
        NON_DEFAULT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"USE_DEFAULTS")]
        USE_DEFAULTS = 5,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603