using SharpPulsar.Util.Protobuf;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.IO;
using Google.Protobuf;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/PulsarApi.proto

namespace SharpPulsar.Common.Proto.Api
{
	public sealed class PulsarApi
	{
	  private PulsarApi()
	  {
	  }
	  public static void RegisterAllExtensions(ExtensionRegistry registry)
	  {
	  }
	  public sealed class CompressionType
	  {
		public static readonly CompressionType NONE = new CompressionType("NONE", InnerEnum.NONE, 0, 0);
		public static readonly CompressionType LZ4 = new CompressionType("LZ4", InnerEnum.LZ4, 1, 1);
		public static readonly CompressionType ZLIB = new CompressionType("ZLIB", InnerEnum.ZLIB, 2, 2);
		public static readonly CompressionType ZSTD = new CompressionType("ZSTD", InnerEnum.ZSTD, 3, 3);
		public static readonly CompressionType SNAPPY = new CompressionType("SNAPPY", InnerEnum.SNAPPY, 4, 4);

		private static readonly IList<CompressionType> valueList = new List<CompressionType>();

		static CompressionType()
		{
			valueList.Add(NONE);
			valueList.Add(LZ4);
			valueList.Add(ZLIB);
			valueList.Add(ZSTD);
			valueList.Add(SNAPPY);
		}

		public enum InnerEnum
		{
			NONE,
			LZ4,
			ZLIB,
			ZSTD,
			SNAPPY
		}

		public readonly InnerEnum innerEnumValue;
		private readonly string nameValue;
		private readonly int ordinalValue;
		private static int nextOrdinal = 0;

		public const int NONE_VALUE = 0;
		public const int LZ4_VALUE = 1;
		public const int ZLIB_VALUE = 2;
		public const int ZSTD_VALUE = 3;
		public const int SNAPPY_VALUE = 4;


		public int Number
		{
			get
			{
				return value;
			}
		}

		public static CompressionType ValueOf(int value)
		{
		  switch (value)
		  {
			case 0:
				return NONE;
			case 1:
				return LZ4;
			case 2:
				return ZLIB;
			case 3:
				return ZSTD;
			case 4:
				return SNAPPY;
			default:
				return null;
		  }
		}

		public static IList<CompressionType> InternalGetValueMap()
		{
		  return internalValueMap;
		}
		internal static IList<CompressionType> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		internal readonly int value;

		internal CompressionType(string name, InnerEnum innerEnum, int index, int value)
		{
		  this.value = value;

			nameValue = name;
			ordinalValue = nextOrdinal++;
			innerEnumValue = innerEnum;
		}


		  public static IList<CompressionType> Values()
		  {
			  return valueList;
		  }

		  public int Ordinal()
		  {
			  return ordinalValue;
		  }

		  public override string ToString()
		  {
			  return nameValue;
		  }
	  }

	  public sealed class ServerError
	  {
		public static readonly ServerError UnknownError = new ServerError("UnknownError", InnerEnum.UnknownError, 0, 0);
		public static readonly ServerError MetadataError = new ServerError("MetadataError", InnerEnum.MetadataError, 1, 1);
		public static readonly ServerError PersistenceError = new ServerError("PersistenceError", InnerEnum.PersistenceError, 2, 2);
		public static readonly ServerError AuthenticationError = new ServerError("AuthenticationError", InnerEnum.AuthenticationError, 3, 3);
		public static readonly ServerError AuthorizationError = new ServerError("AuthorizationError", InnerEnum.AuthorizationError, 4, 4);
		public static readonly ServerError ConsumerBusy = new ServerError("ConsumerBusy", InnerEnum.ConsumerBusy, 5, 5);
		public static readonly ServerError ServiceNotReady = new ServerError("ServiceNotReady", InnerEnum.ServiceNotReady, 6, 6);
		public static readonly ServerError ProducerBlockedQuotaExceededError = new ServerError("ProducerBlockedQuotaExceededError", InnerEnum.ProducerBlockedQuotaExceededError, 7, 7);
		public static readonly ServerError ProducerBlockedQuotaExceededException = new ServerError("ProducerBlockedQuotaExceededException", InnerEnum.ProducerBlockedQuotaExceededException, 8, 8);
		public static readonly ServerError ChecksumError = new ServerError("ChecksumError", InnerEnum.ChecksumError, 9, 9);
		public static readonly ServerError UnsupportedVersionError = new ServerError("UnsupportedVersionError", InnerEnum.UnsupportedVersionError, 10, 10);
		public static readonly ServerError TopicNotFound = new ServerError("TopicNotFound", InnerEnum.TopicNotFound, 11, 11);
		public static readonly ServerError SubscriptionNotFound = new ServerError("SubscriptionNotFound", InnerEnum.SubscriptionNotFound, 12, 12);
		public static readonly ServerError ConsumerNotFound = new ServerError("ConsumerNotFound", InnerEnum.ConsumerNotFound, 13, 13);
		public static readonly ServerError TooManyRequests = new ServerError("TooManyRequests", InnerEnum.TooManyRequests, 14, 14);
		public static readonly ServerError TopicTerminatedError = new ServerError("TopicTerminatedError", InnerEnum.TopicTerminatedError, 15, 15);
		public static readonly ServerError ProducerBusy = new ServerError("ProducerBusy", InnerEnum.ProducerBusy, 16, 16);
		public static readonly ServerError InvalidTopicName = new ServerError("InvalidTopicName", InnerEnum.InvalidTopicName, 17, 17);
		public static readonly ServerError IncompatibleSchema = new ServerError("IncompatibleSchema", InnerEnum.IncompatibleSchema, 18, 18);
		public static readonly ServerError ConsumerAssignError = new ServerError("ConsumerAssignError", InnerEnum.ConsumerAssignError, 19, 19);
		public static readonly ServerError TransactionCoordinatorNotFound = new ServerError("TransactionCoordinatorNotFound", InnerEnum.TransactionCoordinatorNotFound, 20, 20);
		public static readonly ServerError InvalidTxnStatus = new ServerError("InvalidTxnStatus", InnerEnum.InvalidTxnStatus, 21, 21);

		private static readonly IList<ServerError> valueList = new List<ServerError>();

		static ServerError()
		{
			valueList.Add(UnknownError);
			valueList.Add(MetadataError);
			valueList.Add(PersistenceError);
			valueList.Add(AuthenticationError);
			valueList.Add(AuthorizationError);
			valueList.Add(ConsumerBusy);
			valueList.Add(ServiceNotReady);
			valueList.Add(ProducerBlockedQuotaExceededError);
			valueList.Add(ProducerBlockedQuotaExceededException);
			valueList.Add(ChecksumError);
			valueList.Add(UnsupportedVersionError);
			valueList.Add(TopicNotFound);
			valueList.Add(SubscriptionNotFound);
			valueList.Add(ConsumerNotFound);
			valueList.Add(TooManyRequests);
			valueList.Add(TopicTerminatedError);
			valueList.Add(ProducerBusy);
			valueList.Add(InvalidTopicName);
			valueList.Add(IncompatibleSchema);
			valueList.Add(ConsumerAssignError);
			valueList.Add(TransactionCoordinatorNotFound);
			valueList.Add(InvalidTxnStatus);
		}

		public enum InnerEnum
		{
			UnknownError,
			MetadataError,
			PersistenceError,
			AuthenticationError,
			AuthorizationError,
			ConsumerBusy,
			ServiceNotReady,
			ProducerBlockedQuotaExceededError,
			ProducerBlockedQuotaExceededException,
			ChecksumError,
			UnsupportedVersionError,
			TopicNotFound,
			SubscriptionNotFound,
			ConsumerNotFound,
			TooManyRequests,
			TopicTerminatedError,
			ProducerBusy,
			InvalidTopicName,
			IncompatibleSchema,
			ConsumerAssignError,
			TransactionCoordinatorNotFound,
			InvalidTxnStatus
		}

		public readonly InnerEnum innerEnumValue;
		private readonly string nameValue;
		private readonly int ordinalValue;
		private static int nextOrdinal = 0;

		public const int UnknownError_VALUE = 0;
		public const int MetadataError_VALUE = 1;
		public const int PersistenceError_VALUE = 2;
		public const int AuthenticationError_VALUE = 3;
		public const int AuthorizationError_VALUE = 4;
		public const int ConsumerBusy_VALUE = 5;
		public const int ServiceNotReady_VALUE = 6;
		public const int ProducerBlockedQuotaExceededError_VALUE = 7;
		public const int ProducerBlockedQuotaExceededException_VALUE = 8;
		public const int ChecksumError_VALUE = 9;
		public const int UnsupportedVersionError_VALUE = 10;
		public const int TopicNotFound_VALUE = 11;
		public const int SubscriptionNotFound_VALUE = 12;
		public const int ConsumerNotFound_VALUE = 13;
		public const int TooManyRequests_VALUE = 14;
		public const int TopicTerminatedError_VALUE = 15;
		public const int ProducerBusy_VALUE = 16;
		public const int InvalidTopicName_VALUE = 17;
		public const int IncompatibleSchema_VALUE = 18;
		public const int ConsumerAssignError_VALUE = 19;
		public const int TransactionCoordinatorNotFound_VALUE = 20;
		public const int InvalidTxnStatus_VALUE = 21;


		public int Number
		{
			get
			{
				return value;
			}
		}

		public static ServerError ValueOf(int value)
		{
		  switch (value)
		  {
			case 0:
				return UnknownError;
			case 1:
				return MetadataError;
			case 2:
				return PersistenceError;
			case 3:
				return AuthenticationError;
			case 4:
				return AuthorizationError;
			case 5:
				return ConsumerBusy;
			case 6:
				return ServiceNotReady;
			case 7:
				return ProducerBlockedQuotaExceededError;
			case 8:
				return ProducerBlockedQuotaExceededException;
			case 9:
				return ChecksumError;
			case 10:
				return UnsupportedVersionError;
			case 11:
				return TopicNotFound;
			case 12:
				return SubscriptionNotFound;
			case 13:
				return ConsumerNotFound;
			case 14:
				return TooManyRequests;
			case 15:
				return TopicTerminatedError;
			case 16:
				return ProducerBusy;
			case 17:
				return InvalidTopicName;
			case 18:
				return IncompatibleSchema;
			case 19:
				return ConsumerAssignError;
			case 20:
				return TransactionCoordinatorNotFound;
			case 21:
				return InvalidTxnStatus;
			default:
				return null;
		  }
		}

		public static IList<ServerError> InternalGetValueMap()
		{
		  return internalValueMap;
		}
		internal static IList<ServerError> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		internal readonly int value;

		internal ServerError(string name, InnerEnum innerEnum, int index, int value)
		{
		  this.value = value;

			nameValue = name;
			ordinalValue = nextOrdinal++;
			innerEnumValue = innerEnum;
		}

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		private static class EnumLiteMapAnonymousInnerClass extends IList<ServerError>
	//	{
	//		public ServerError findValueByNumber(int number)
	//		{
	//		  return ServerError.valueOf(number);
	//		}
	//	}

		// @@protoc_insertion_point(enum_scope:pulsar.proto.ServerError)

		  public static IList<ServerError> Values()
		  {
			  return valueList;
		  }

		  public int Ordinal()
		  {
			  return ordinalValue;
		  }

		  public override string ToString()
		  {
			  return nameValue;
		  }
	  }

	  public sealed class AuthMethod
	  {
		public static readonly AuthMethod AuthMethodNone = new AuthMethod("AuthMethodNone", InnerEnum.AuthMethodNone, 0, 0);
		public static readonly AuthMethod AuthMethodYcaV1 = new AuthMethod("AuthMethodYcaV1", InnerEnum.AuthMethodYcaV1, 1, 1);
		public static readonly AuthMethod AuthMethodAthens = new AuthMethod("AuthMethodAthens", InnerEnum.AuthMethodAthens, 2, 2);

		private static readonly IList<AuthMethod> valueList = new List<AuthMethod>();

		static AuthMethod()
		{
			valueList.Add(AuthMethodNone);
			valueList.Add(AuthMethodYcaV1);
			valueList.Add(AuthMethodAthens);
		}

		public enum InnerEnum
		{
			AuthMethodNone,
			AuthMethodYcaV1,
			AuthMethodAthens
		}

		public readonly InnerEnum innerEnumValue;
		private readonly string nameValue;
		private readonly int ordinalValue;
		private static int nextOrdinal = 0;

		public const int AuthMethodNone_VALUE = 0;
		public const int AuthMethodYcaV1_VALUE = 1;
		public const int AuthMethodAthens_VALUE = 2;


		public int Number
		{
			get
			{
				return value;
			}
		}

		public static AuthMethod ValueOf(int value)
		{
		  switch (value)
		  {
			case 0:
				return AuthMethodNone;
			case 1:
				return AuthMethodYcaV1;
			case 2:
				return AuthMethodAthens;
			default:
				return null;
		  }
		}

		public static IList<AuthMethod> InternalGetValueMap()
		{
		  return internalValueMap;
		}
		internal static IList<AuthMethod> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		internal readonly int value;

		internal AuthMethod(string name, InnerEnum innerEnum, int index, int value)
		{
		  this.value = value;

			nameValue = name;
			ordinalValue = nextOrdinal++;
			innerEnumValue = innerEnum;
		}

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		private static class EnumLiteMapAnonymousInnerClass extends IList<AuthMethod>
	//	{
	//		public AuthMethod findValueByNumber(int number)
	//		{
	//		  return AuthMethod.valueOf(number);
	//		}
	//	}

		// @@protoc_insertion_point(enum_scope:pulsar.proto.AuthMethod)

		  public static IList<AuthMethod> Values()
		  {
			  return valueList;
		  }

		  public int Ordinal()
		  {
			  return ordinalValue;
		  }

		  public override string ToString()
		  {
			  return nameValue;
		  }
	  }

	  public sealed class ProtocolVersion 
	  {
		public static readonly ProtocolVersion v0 = new ProtocolVersion("v0", InnerEnum.v0, 0, 0);
		public static readonly ProtocolVersion v1 = new ProtocolVersion("v1", InnerEnum.v1, 1, 1);
		public static readonly ProtocolVersion v2 = new ProtocolVersion("v2", InnerEnum.v2, 2, 2);
		public static readonly ProtocolVersion v3 = new ProtocolVersion("v3", InnerEnum.v3, 3, 3);
		public static readonly ProtocolVersion v4 = new ProtocolVersion("v4", InnerEnum.v4, 4, 4);
		public static readonly ProtocolVersion v5 = new ProtocolVersion("v5", InnerEnum.v5, 5, 5);
		public static readonly ProtocolVersion v6 = new ProtocolVersion("v6", InnerEnum.v6, 6, 6);
		public static readonly ProtocolVersion v7 = new ProtocolVersion("v7", InnerEnum.v7, 7, 7);
		public static readonly ProtocolVersion v8 = new ProtocolVersion("v8", InnerEnum.v8, 8, 8);
		public static readonly ProtocolVersion v9 = new ProtocolVersion("v9", InnerEnum.v9, 9, 9);
		public static readonly ProtocolVersion v10 = new ProtocolVersion("v10", InnerEnum.v10, 10, 10);
		public static readonly ProtocolVersion v11 = new ProtocolVersion("v11", InnerEnum.v11, 11, 11);
		public static readonly ProtocolVersion v12 = new ProtocolVersion("v12", InnerEnum.v12, 12, 12);
		public static readonly ProtocolVersion v13 = new ProtocolVersion("v13", InnerEnum.v13, 13, 13);
		public static readonly ProtocolVersion v14 = new ProtocolVersion("v14", InnerEnum.v14, 14, 14);
		public static readonly ProtocolVersion v15 = new ProtocolVersion("v15", InnerEnum.v15, 15, 15);

		private static readonly IList<ProtocolVersion> valueList = new List<ProtocolVersion>();

		static ProtocolVersion()
		{
			valueList.Add(v0);
			valueList.Add(v1);
			valueList.Add(v2);
			valueList.Add(v3);
			valueList.Add(v4);
			valueList.Add(v5);
			valueList.Add(v6);
			valueList.Add(v7);
			valueList.Add(v8);
			valueList.Add(v9);
			valueList.Add(v10);
			valueList.Add(v11);
			valueList.Add(v12);
			valueList.Add(v13);
			valueList.Add(v14);
			valueList.Add(v15);
		}

		public enum InnerEnum
		{
			v0,
			v1,
			v2,
			v3,
			v4,
			v5,
			v6,
			v7,
			v8,
			v9,
			v10,
			v11,
			v12,
			v13,
			v14,
			v15
		}

		public readonly InnerEnum innerEnumValue;
		private readonly string nameValue;
		private readonly int ordinalValue;
		private static int nextOrdinal = 0;

		public const int v0_VALUE = 0;
		public const int v1_VALUE = 1;
		public const int v2_VALUE = 2;
		public const int v3_VALUE = 3;
		public const int v4_VALUE = 4;
		public const int v5_VALUE = 5;
		public const int v6_VALUE = 6;
		public const int v7_VALUE = 7;
		public const int v8_VALUE = 8;
		public const int v9_VALUE = 9;
		public const int v10_VALUE = 10;
		public const int v11_VALUE = 11;
		public const int v12_VALUE = 12;
		public const int v13_VALUE = 13;
		public const int v14_VALUE = 14;
		public const int v15_VALUE = 15;


		public int Number
		{
			get
			{
				return value;
			}
		}

		public static ProtocolVersion ValueOf(int value)
		{
		  switch (value)
		  {
			case 0:
				return v0;
			case 1:
				return v1;
			case 2:
				return v2;
			case 3:
				return v3;
			case 4:
				return v4;
			case 5:
				return v5;
			case 6:
				return v6;
			case 7:
				return v7;
			case 8:
				return v8;
			case 9:
				return v9;
			case 10:
				return v10;
			case 11:
				return v11;
			case 12:
				return v12;
			case 13:
				return v13;
			case 14:
				return v14;
			case 15:
				return v15;
			default:
				return null;
		  }
		}

		public static IList<ProtocolVersion> InternalGetValueMap()
		{
		  return internalValueMap;
		}
		internal static IList<ProtocolVersion> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		internal readonly int value;

		internal ProtocolVersion(string name, InnerEnum innerEnum, int index, int value)
		{
		  this.value = value;

			nameValue = name;
			ordinalValue = nextOrdinal++;
			innerEnumValue = innerEnum;
		}

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		private static class EnumLiteMapAnonymousInnerClass extends IList<ProtocolVersion>
	//	{
	//		public ProtocolVersion findValueByNumber(int number)
	//		{
	//		  return ProtocolVersion.valueOf(number);
	//		}
	//	}

		// @@protoc_insertion_point(enum_scope:pulsar.proto.ProtocolVersion)

		  public static IList<ProtocolVersion> Values()
		  {
			  return valueList;
		  }

		  public int Ordinal()
		  {
			  return ordinalValue;
		  }

		  public override string ToString()
		  {
			  return nameValue;
		  }
	  }

	  public sealed class KeySharedMode
	  {
		public static readonly KeySharedMode AUTO_SPLIT = new KeySharedMode("AUTO_SPLIT", InnerEnum.AUTO_SPLIT, 0, 0);
		public static readonly KeySharedMode STICKY = new KeySharedMode("STICKY", InnerEnum.STICKY, 1, 1);

		private static readonly IList<KeySharedMode> valueList = new List<KeySharedMode>();

		static KeySharedMode()
		{
			valueList.Add(AUTO_SPLIT);
			valueList.Add(STICKY);
		}

		public enum InnerEnum
		{
			AUTO_SPLIT,
			STICKY
		}

		public readonly InnerEnum innerEnumValue;
		private readonly string nameValue;
		private readonly int ordinalValue;
		private static int nextOrdinal = 0;

		public const int AUTO_SPLIT_VALUE = 0;
		public const int STICKY_VALUE = 1;


		public int Number
		{
			get
			{
				return value;
			}
		}

		public static KeySharedMode ValueOf(int value)
		{
		  switch (value)
		  {
			case 0:
				return AUTO_SPLIT;
			case 1:
				return STICKY;
			default:
				return null;
		  }
		}

		public static IList<KeySharedMode> InternalGetValueMap()
		{
		  return internalValueMap;
		}
		internal static IList<KeySharedMode> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		internal readonly int value;

		internal KeySharedMode(string name, InnerEnum innerEnum, int index, int value)
		{
		  this.value = value;

			nameValue = name;
			ordinalValue = nextOrdinal++;
			innerEnumValue = innerEnum;
		}

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		private static class EnumLiteMapAnonymousInnerClass extends IList<KeySharedMode>
	//	{
	//		public KeySharedMode findValueByNumber(int number)
	//		{
	//		  return KeySharedMode.valueOf(number);
	//		}
	//	}

		// @@protoc_insertion_point(enum_scope:pulsar.proto.KeySharedMode)

		  public static IList<KeySharedMode> Values()
		  {
			  return valueList;
		  }

		  public int Ordinal()
		  {
			  return ordinalValue;
		  }

		  public override string ToString()
		  {
			  return nameValue;
		  }
	  }

	  public sealed class TxnAction
	  {
		public static readonly TxnAction COMMIT = new TxnAction("COMMIT", InnerEnum.COMMIT, 0, 0);
		public static readonly TxnAction ABORT = new TxnAction("ABORT", InnerEnum.ABORT, 1, 1);

		private static readonly IList<TxnAction> valueList = new List<TxnAction>();

		static TxnAction()
		{
			valueList.Add(COMMIT);
			valueList.Add(ABORT);
		}

		public enum InnerEnum
		{
			COMMIT,
			ABORT
		}

		public readonly InnerEnum innerEnumValue;
		private readonly string nameValue;
		private readonly int ordinalValue;
		private static int nextOrdinal = 0;

		public const int COMMIT_VALUE = 0;
		public const int ABORT_VALUE = 1;


		public int Number
		{
			get
			{
				return value;
			}
		}

		public static TxnAction ValueOf(int value)
		{
		  switch (value)
		  {
			case 0:
				return COMMIT;
			case 1:
				return ABORT;
			default:
				return null;
		  }
		}

		public static IList<TxnAction> InternalGetValueMap()
		{
		  return internalValueMap;
		}
		internal static IList<TxnAction> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		internal readonly int value;

		internal TxnAction(string name, InnerEnum innerEnum, int index, int value)
		{
		  this.value = value;

			nameValue = name;
			ordinalValue = nextOrdinal++;
			innerEnumValue = innerEnum;
		}

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		private static class EnumLiteMapAnonymousInnerClass extends IList<TxnAction>
	//	{
	//		public TxnAction findValueByNumber(int number)
	//		{
	//		  return TxnAction.valueOf(number);
	//		}
	//	}

		// @@protoc_insertion_point(enum_scope:pulsar.proto.TxnAction)

		  public static IList<TxnAction> Values()
		  {
			  return valueList;
		  }

		  public int Ordinal()
		  {
			  return ordinalValue;
		  }

		  public override string ToString()
		  {
			  return nameValue;
		  }
	  }

	  public interface SchemaOrBuilder
	  {

		// required string name = 1;
		bool HasName();
		string Name {get;}

		// required bytes schema_data = 3;
		bool HasSchemaData();
		ByteString SchemaData {get;}

		// required .pulsar.proto.Schema.Type type = 4;
		bool HasType();
		Schema.Type Type {get;}

		// repeated .pulsar.proto.KeyValue properties = 5;
		IList<KeyValue> PropertiesList {get;}
		KeyValue GetProperties(int index);
		int PropertiesCount {get;}
	  }
	  public sealed class Schema: SchemaOrBuilde, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use Schema.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal Schema(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<Schema> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Schema>
		 {
			 protected internal Schema newObject(Handle handle)
			 {
			   return new Schema(handle);
			 }
		 }

			public void Recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal Schema(bool noInit)
		{
		}

		internal static readonly Schema defaultInstance;
		public static Schema DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public Schema DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		public sealed class Type 
		{
		  public static readonly Type None = new Type("None", InnerEnum.None, 0, 0);
		  public static readonly Type String = new Type("String", InnerEnum.String, 1, 1);
		  public static readonly Type Json = new Type("Json", InnerEnum.Json, 2, 2);
		  public static readonly Type Protobuf = new Type("Protobuf", InnerEnum.Protobuf, 3, 3);
		  public static readonly Type Avro = new Type("Avro", InnerEnum.Avro, 4, 4);
		  public static readonly Type Bool = new Type("Bool", InnerEnum.Bool, 5, 5);
		  public static readonly Type Int8 = new Type("Int8", InnerEnum.Int8, 6, 6);
		  public static readonly Type Int16 = new Type("Int16", InnerEnum.Int16, 7, 7);
		  public static readonly Type Int32 = new Type("Int32", InnerEnum.Int32, 8, 8);
		  public static readonly Type Int64 = new Type("Int64", InnerEnum.Int64, 9, 9);
		  public static readonly Type Float = new Type("Float", InnerEnum.Float, 10, 10);
		  public static readonly Type Double = new Type("Double", InnerEnum.Double, 11, 11);
		  public static readonly Type Date = new Type("Date", InnerEnum.Date, 12, 12);
		  public static readonly Type Time = new Type("Time", InnerEnum.Time, 13, 13);
		  public static readonly Type Timestamp = new Type("Timestamp", InnerEnum.Timestamp, 14, 14);
		  public static readonly Type KeyValue = new Type("KeyValue", InnerEnum.KeyValue, 15, 15);

		  private static readonly IList<Type> valueList = new List<Type>();

		  static Type()
		  {
			  valueList.Add(None);
			  valueList.Add(String);
			  valueList.Add(Json);
			  valueList.Add(Protobuf);
			  valueList.Add(Avro);
			  valueList.Add(Bool);
			  valueList.Add(Int8);
			  valueList.Add(Int16);
			  valueList.Add(Int32);
			  valueList.Add(Int64);
			  valueList.Add(Float);
			  valueList.Add(Double);
			  valueList.Add(Date);
			  valueList.Add(Time);
			  valueList.Add(Timestamp);
			  valueList.Add(KeyValue);
		  }

		  public enum InnerEnum
		  {
			  None,
			  String,
			  Json,
			  Protobuf,
			  Avro,
			  Bool,
			  Int8,
			  Int16,
			  Int32,
			  Int64,
			  Float,
			  Double,
			  Date,
			  Time,
			  Timestamp,
			  KeyValue
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int None_VALUE = 0;
		  public const int String_VALUE = 1;
		  public const int Json_VALUE = 2;
		  public const int Protobuf_VALUE = 3;
		  public const int Avro_VALUE = 4;
		  public const int Bool_VALUE = 5;
		  public const int Int8_VALUE = 6;
		  public const int Int16_VALUE = 7;
		  public const int Int32_VALUE = 8;
		  public const int Int64_VALUE = 9;
		  public const int Float_VALUE = 10;
		  public const int Double_VALUE = 11;
		  public const int Date_VALUE = 12;
		  public const int Time_VALUE = 13;
		  public const int Timestamp_VALUE = 14;
		  public const int KeyValue_VALUE = 15;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static Type ValueOf(int value)
		  {
			switch (value)
			{
			  case 0:
				  return None;
			  case 1:
				  return String;
			  case 2:
				  return Json;
			  case 3:
				  return Protobuf;
			  case 4:
				  return Avro;
			  case 5:
				  return Bool;
			  case 6:
				  return Int8;
			  case 7:
				  return Int16;
			  case 8:
				  return Int32;
			  case 9:
				  return Int64;
			  case 10:
				  return Float;
			  case 11:
				  return Double;
			  case 12:
				  return DateTime;
			  case 13:
				  return Time;
			  case 14:
				  return Timestamp;
			  case 15:
				  return KeyValue;
			  default:
				  return null;
			}
		  }

		  public static IList<Type> InternalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<Type> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal Type(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<Type>
	//	  {
	//		  public Type findValueByNumber(int number)
	//		  {
	//			return Type.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.Schema.Type)

			public static IList<Type> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		internal int bitField0_;
		// required string name = 1;
		public const int NAME_FIELD_NUMBER = 1;
		internal object name_;
		public bool hasName()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Name
		{
			get
			{
			  object @ref = name_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (IsValidUtf8(bs))
				{
				  name_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString NameBytes
		{
			get
			{
			  object @ref = name_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				name_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required bytes schema_data = 3;
		public const int SCHEMA_DATA_FIELD_NUMBER = 3;
		internal ByteString schemaData_;
		public bool hasSchemaData()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public ByteString SchemaData
		{
			get
			{
			  return schemaData_;
			}
		}

		// required .pulsar.proto.Schema.Type type = 4;
		public const int TYPE_FIELD_NUMBER = 4;
		internal Schema.Type type_;
		public bool hasType()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public Schema.Type getType()
		{
		  return type_;
		}

		// repeated .pulsar.proto.KeyValue properties = 5;
		public const int PROPERTIES_FIELD_NUMBER = 5;
		internal IList<KeyValue> properties_;
		public IList<KeyValue> PropertiesList
		{
			get
			{
			  return properties_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends KeyValueOrBuilder> getPropertiesOrBuilderList()
		public IList<KeyValueOrBuilder> PropertiesOrBuilderList
		{
			get
			{
			  return properties_;
			}
		}
		public int PropertiesCount
		{
			get
			{
			  return properties_.Count;
			}
		}
		public KeyValue getProperties(int index)
		{
		  return properties_[index];
		}
		public KeyValueOrBuilder getPropertiesOrBuilder(int index)
		{
		  return properties_[index];
		}

		internal void initFields()
		{
		  name_ = "";
		  schemaData_ = ByteString.Empty;
		  type_ = Schema.Type.None;
		  properties_ = java.util.Collections.emptyList();
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasName())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSchemaData())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasType())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < PropertiesCount; i++)
			  {
				if (!getProperties(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

		public void writeTo(ByteBufCodedOutputStream output)
		{
		  //SerializedSize();
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, NameBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(3, schemaData_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteEnum(4, type_.Number);
		  }
		  for (int i = 0; i < properties_.Count; i++)
		  {
			output.WriteMessage(5, properties_[i]);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeBytesSize(NameBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeBytesSize(schemaData_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeEnumSize(type_.Number);
			  }
			  for (int i = 0; i < properties_.Count; i++)
			  {
				size += CodedOutputStream.ComputeMessageSize(properties_[i]);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
		protected internal object writeReplace()
		{
		  return base.writeReplace();
		}
		public static Schema parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
		public static Schema parseFrom(ByteString data, ExtensionRegistry extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
		public static Schema parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
		public static Schema parseFrom(sbyte[] data, ExtensionRegistry extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
		public static Schema parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
		public static Schema parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Schema parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static Schema parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.MergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Schema parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static Schema parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Schema parseFrom(CodedInputStream input) throws java.io.IOException
		public static Schema parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Schema parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static Schema parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(Schema prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<Schema, Builder>, SchemaOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using Schema.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass();

		  private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			name_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			schemaData_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00000002);
			type_ = Schema.Type.None;
			bitField0_ = (bitField0_ & ~0x00000004);
			properties_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public Schema DefaultInstanceForType
		  {
			  get
			  {
				return Schema.DefaultInstance;
			  }
		  }

		  public Schema build()
		  {
			Schema result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private Schema buildParsed() throws InvalidProtocolBufferException
		  internal Schema buildParsed()
		  {
			Schema result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public Schema buildPartial()
		  {
			Schema result = Schema.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.name_ = name_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.schemaData_ = schemaData_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.type_ = type_;
			if (((bitField0_ & 0x00000008) == 0x00000008))
			{
			  properties_ = java.util.Collections.unmodifiableList(properties_);
			  bitField0_ = (bitField0_ & ~0x00000008);
			}
			result.properties_ = properties_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(Schema other)
		  {
			if (other == Schema.DefaultInstance)
			{
				return this;
			}
			if (other.hasName())
			{
			  setName(other.Name);
			}
			if (other.hasSchemaData())
			{
			  SchemaData = other.SchemaData;
			}
			if (other.hasType())
			{
			  Type = other.getType();
			}
			if (other.properties_.Count > 0)
			{
			  if (properties_.Count == 0)
			  {
				properties_ = other.properties_;
				bitField0_ = (bitField0_ & ~0x00000008);
			  }
			  else
			  {
				ensurePropertiesIsMutable();
				((List<KeyValue>)properties_).AddRange(other.properties_);
			  }

			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasName())
				{
    
				  return false;
				}
				if (!hasSchemaData())
				{
    
				  return false;
				}
				if (!hasType())
				{
    
				  return false;
				}
				for (int i = 0; i < PropertiesCount; i++)
				{
				  if (!getProperties(i).Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  name_ = input.readBytes();
				  break;
				}
				case 26:
				{
				  bitField0_ |= 0x00000002;
				  schemaData_ = input.readBytes();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  Schema.Type value = Schema.Type.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000004;
					type_ = value;
				  }
				  break;
				}
				case 42:
				{
				  KeyValue.Builder subBuilder = KeyValue.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addProperties(subBuilder.buildPartial());
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string name = 1;
		  internal object name_ = "";
		  public bool hasName()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getName()
		  {
			object @ref = name_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  name_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setName(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			name_ = value;

			return this;
		  }
		  public Builder clearName()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			name_ = DefaultInstance.Name;

			return this;
		  }
		  internal void setName(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			name_ = value;

		  }

		  // required bytes schema_data = 3;
		  internal ByteString schemaData_ = ByteString.Empty;
		  public bool hasSchemaData()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public ByteString SchemaData
		  {
			  get
			  {
				return schemaData_;
			  }
		  }
		  public Builder setSchemaData(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			schemaData_ = value;

			return this;
		  }
		  public Builder clearSchemaData()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			schemaData_ = DefaultInstance.SchemaData;

			return this;
		  }

		  // required .pulsar.proto.Schema.Type type = 4;
		  internal Schema.Type type_ = Schema.Type.None;
		  public bool hasType()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public Schema.Type Type
		  {
			  get
			  {
				return type_;
			  }
		  }
		  public Builder setType(Schema.Type value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000004;
			type_ = value;

			return this;
		  }
		  public Builder clearType()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			type_ = Schema.Type.None;

			return this;
		  }

		  // repeated .pulsar.proto.KeyValue properties = 5;
		  internal IList<KeyValue> properties_ = java.util.Collections.emptyList();
		  internal void ensurePropertiesIsMutable()
		  {
			if (!((bitField0_ & 0x00000008) == 0x00000008))
			{
			  properties_ = new List<KeyValue>(properties_);
			  bitField0_ |= 0x00000008;
			}
		  }

		  public IList<KeyValue> PropertiesList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(properties_);
			  }
		  }
		  public int PropertiesCount
		  {
			  get
			  {
				return properties_.Count;
			  }
		  }
		  public KeyValue getProperties(int index)
		  {
			return properties_[index];
		  }
		  public Builder setProperties(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_[index] = value;

			return this;
		  }
		  public Builder setProperties(int index, KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addProperties(KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_.Add(value);

			return this;
		  }
		  public Builder addProperties(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_.Insert(index, value);

			return this;
		  }
		  public Builder addProperties(KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addProperties(int index, KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllProperties<T1>(IEnumerable<T1> values) where T1 : PulsarApi.KeyValue
		  {
			ensurePropertiesIsMutable();
			base.addAll(values, properties_);

			return this;
		  }
		  public Builder clearProperties()
		  {
			properties_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000008);

			return this;
		  }
		  public Builder removeProperties(int index)
		  {
			ensurePropertiesIsMutable();
			properties_.RemoveAt(index);

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.Schema)
		}

		static Schema()
		{
		  defaultInstance = new Schema(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.Schema)
	  }

	  public interface MessageIdDataOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 ledgerId = 1;
		bool hasLedgerId();
		long LedgerId {get;}

		// required uint64 entryId = 2;
		bool hasEntryId();
		long EntryId {get;}

		// optional int32 partition = 3 [default = -1];
		bool hasPartition();
		int Partition {get;}

		// optional int32 batch_index = 4 [default = -1];
		bool hasBatchIndex();
		int BatchIndex {get;}
	  }
	  public sealed class MessageIdData : MessageIdDataOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use MessageIdData.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal MessageIdData(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<MessageIdData> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<MessageIdData>
		 {
			 protected internal MessageIdData newObject(Handle handle)
			 {
			   return new MessageIdData(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal MessageIdData(bool noInit)
		{
		}

		internal static readonly MessageIdData defaultInstance;
		public static MessageIdData DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public MessageIdData DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 ledgerId = 1;
		public const int LEDGERID_FIELD_NUMBER = 1;
		internal long ledgerId_;
		public bool hasLedgerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long LedgerId
		{
			get
			{
			  return ledgerId_;
			}
		}

		// required uint64 entryId = 2;
		public const int ENTRYID_FIELD_NUMBER = 2;
		internal long entryId_;
		public bool hasEntryId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long EntryId
		{
			get
			{
			  return entryId_;
			}
		}

		// optional int32 partition = 3 [default = -1];
		public const int PARTITION_FIELD_NUMBER = 3;
		internal int partition_;
		public bool hasPartition()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public int Partition
		{
			get
			{
			  return partition_;
			}
		}

		// optional int32 batch_index = 4 [default = -1];
		public const int BATCH_INDEX_FIELD_NUMBER = 4;
		internal int batchIndex_;
		public bool hasBatchIndex()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public int BatchIndex
		{
			get
			{
			  return batchIndex_;
			}
		}

		internal void initFields()
		{
		  ledgerId_ = 0L;
		  entryId_ = 0L;
		  partition_ = -1;
		  batchIndex_ = -1;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasLedgerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasEntryId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, ledgerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, entryId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteInt32(3, partition_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteInt32(4, batchIndex_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(ledgerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(entryId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeInt32Size(3, partition_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeInt32Size(4, batchIndex_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static MessageIdData parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static MessageIdData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static MessageIdData parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static MessageIdData parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseFrom(java.io.InputStream input) throws java.io.IOException
		public static MessageIdData parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static MessageIdData parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static MessageIdData parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static MessageIdData parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseFrom(CodedInputStream input) throws java.io.IOException
		public static MessageIdData parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageIdData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static MessageIdData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(MessageIdData prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<MessageIdData, Builder>, MessageIdDataOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using MessageIdData.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			ledgerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			entryId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			partition_ = -1;
			bitField0_ = (bitField0_ & ~0x00000004);
			batchIndex_ = -1;
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public MessageIdData DefaultInstanceForType
		  {
			  get
			  {
				return MessageIdData.DefaultInstance;
			  }
		  }

		  public MessageIdData build()
		  {
			MessageIdData result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private MessageIdData buildParsed() throws InvalidProtocolBufferException
		  internal MessageIdData buildParsed()
		  {
			MessageIdData result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public MessageIdData buildPartial()
		  {
			MessageIdData result = MessageIdData.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.ledgerId_ = ledgerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.entryId_ = entryId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.partition_ = partition_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.batchIndex_ = batchIndex_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(MessageIdData other)
		  {
			if (other == MessageIdData.DefaultInstance)
			{
				return this;
			}
			if (other.hasLedgerId())
			{
			  LedgerId = other.LedgerId;
			}
			if (other.hasEntryId())
			{
			  EntryId = other.EntryId;
			}
			if (other.hasPartition())
			{
			  Partition = other.Partition;
			}
			if (other.hasBatchIndex())
			{
			  BatchIndex = other.BatchIndex;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasLedgerId())
				{
    
				  return false;
				}
				if (!hasEntryId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  ledgerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  entryId_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  partition_ = input.readInt32();
				  break;
				}
				case 32:
				{
				  bitField0_ |= 0x00000008;
				  batchIndex_ = input.readInt32();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 ledgerId = 1;
		  internal long ledgerId_;
		  public bool hasLedgerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long LedgerId
		  {
			  get
			  {
				return ledgerId_;
			  }
		  }
		  public Builder setLedgerId(long value)
		  {
			bitField0_ |= 0x00000001;
			ledgerId_ = value;

			return this;
		  }
		  public Builder clearLedgerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			ledgerId_ = 0L;

			return this;
		  }

		  // required uint64 entryId = 2;
		  internal long entryId_;
		  public bool hasEntryId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long EntryId
		  {
			  get
			  {
				return entryId_;
			  }
		  }
		  public Builder setEntryId(long value)
		  {
			bitField0_ |= 0x00000002;
			entryId_ = value;

			return this;
		  }
		  public Builder clearEntryId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			entryId_ = 0L;

			return this;
		  }

		  // optional int32 partition = 3 [default = -1];
		  internal int partition_ = -1;
		  public bool hasPartition()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public int Partition
		  {
			  get
			  {
				return partition_;
			  }
		  }
		  public Builder setPartition(int value)
		  {
			bitField0_ |= 0x00000004;
			partition_ = value;

			return this;
		  }
		  public Builder clearPartition()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			partition_ = -1;

			return this;
		  }

		  // optional int32 batch_index = 4 [default = -1];
		  internal int batchIndex_ = -1;
		  public bool hasBatchIndex()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public int BatchIndex
		  {
			  get
			  {
				return batchIndex_;
			  }
		  }
		  public Builder setBatchIndex(int value)
		  {
			bitField0_ |= 0x00000008;
			batchIndex_ = value;

			return this;
		  }
		  public Builder clearBatchIndex()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			batchIndex_ = -1;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.MessageIdData)
		}

		static MessageIdData()
		{
		  defaultInstance = new MessageIdData(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.MessageIdData)
	  }

	  public interface KeyValueOrBuilder : MessageLiteOrBuilder
	  {

		// required string key = 1;
		bool hasKey();
		string Key {get;}

		// required string value = 2;
		bool hasValue();
		string Value {get;}
	  }
	  public sealed class KeyValue : KeyValueOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use KeyValue.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal KeyValue(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<KeyValue> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<KeyValue>
		 {
			 protected internal KeyValue newObject(Handle handle)
			 {
			   return new KeyValue(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal KeyValue(bool noInit)
		{
		}

		internal static readonly KeyValue defaultInstance;
		public static KeyValue DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public KeyValue DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string key = 1;
		public const int KEY_FIELD_NUMBER = 1;
		internal object key_;
		public bool hasKey()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Key
		{
			get
			{
			  object @ref = key_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  key_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString KeyBytes
		{
			get
			{
			  object @ref = key_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				key_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required string value = 2;
		public const int VALUE_FIELD_NUMBER = 2;
		internal object value_;
		public bool hasValue()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public string Value
		{
			get
			{
			  object @ref = value_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  value_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ValueBytes
		{
			get
			{
			  object @ref = value_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				value_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  key_ = "";
		  value_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasKey())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasValue())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, KeyBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, ValueBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, KeyBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, ValueBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static KeyValue parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static KeyValue parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static KeyValue parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static KeyValue parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseFrom(java.io.InputStream input) throws java.io.IOException
		public static KeyValue parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeyValue parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static KeyValue parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeyValue parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseFrom(CodedInputStream input) throws java.io.IOException
		public static KeyValue parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyValue parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeyValue parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(KeyValue prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<KeyValue, Builder>, KeyValueOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using KeyValue.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			key_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			value_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public KeyValue DefaultInstanceForType
		  {
			  get
			  {
				return KeyValue.DefaultInstance;
			  }
		  }

		  public KeyValue build()
		  {
			KeyValue result = buildPartial();
			if (!result.Initialized)
			{
			  throw NewUninitializedMessageException(result);
			}
			return result;
		  }
		  internal KeyValue buildParsed()
		  {
			KeyValue result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public KeyValue buildPartial()
		  {
			KeyValue result = KeyValue.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.key_ = key_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.value_ = value_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(KeyValue other)
		  {
			if (other == KeyValue.DefaultInstance)
			{
				return this;
			}
			if (other.hasKey())
			{
			  setKey(other.Key);
			}
			if (other.hasValue())
			{
			  setValue(other.Value);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasKey())
				{
    
				  return false;
				}
				if (!hasValue())
				{
    
				  return false;
				}
				return true;
			  }
		  }
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistry extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistry extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.ReadTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.SkipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  key_ = input.ReadBytes();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  value_ = input.ReadBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string key = 1;
		  internal object key_ = "";
		  public bool hasKey()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getKey()
		  {
			object @ref = key_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  key_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setKey(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			key_ = value;

			return this;
		  }
		  public Builder clearKey()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			key_ = DefaultInstance.Key;

			return this;
		  }
		  internal void setKey(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			key_ = value;

		  }

		  // required string value = 2;
		  internal object value_ = "";
		  public bool hasValue()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getValue()
		  {
			object @ref = value_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  value_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setValue(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			value_ = value;

			return this;
		  }
		  public Builder clearValue()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			value_ = DefaultInstance.Value;

			return this;
		  }
		  internal void setValue(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			value_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.KeyValue)
		}

		static KeyValue()
		{
		  defaultInstance = new KeyValue(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.KeyValue)
	  }

	  public interface KeyLongValueOrBuilder : MessageOrBuilder
	  {

		// required string key = 1;
		bool hasKey();
		string Key {get;}

		// required uint64 value = 2;
		bool hasValue();
		long Value {get;}
	  }
	  public sealed class KeyLongValue : KeyLongValueOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use KeyLongValue.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal KeyLongValue(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<KeyLongValue> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<KeyLongValue>
		 {
			 protected internal KeyLongValue newObject(Handle handle)
			 {
			   return new KeyLongValue(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal KeyLongValue(bool noInit)
		{
		}

		internal static readonly KeyLongValue defaultInstance;
		public static KeyLongValue DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public KeyLongValue DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string key = 1;
		public const int KEY_FIELD_NUMBER = 1;
		internal object key_;
		public bool hasKey()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Key
		{
			get
			{
			  object @ref = key_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  key_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString KeyBytes
		{
			get
			{
			  object @ref = key_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				key_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required uint64 value = 2;
		public const int VALUE_FIELD_NUMBER = 2;
		internal long value_;
		public bool hasValue()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long Value
		{
			get
			{
			  return value_;
			}
		}

		internal void initFields()
		{
		  key_ = "";
		  value_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasKey())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasValue())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, KeyBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, value_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, KeyBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(value_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static KeyLongValue parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static KeyLongValue parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static KeyLongValue parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static KeyLongValue parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseFrom(java.io.InputStream input) throws java.io.IOException
		public static KeyLongValue parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeyLongValue parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static KeyLongValue parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeyLongValue parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseFrom(CodedInputStream input) throws java.io.IOException
		public static KeyLongValue parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeyLongValue parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeyLongValue parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(KeyLongValue prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<KeyLongValue, Builder>, KeyLongValueOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using KeyLongValue.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			key_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			value_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public KeyLongValue DefaultInstanceForType
		  {
			  get
			  {
				return KeyLongValue.DefaultInstance;
			  }
		  }

		  public KeyLongValue build()
		  {
			KeyLongValue result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private KeyLongValue buildParsed() throws InvalidProtocolBufferException
		  internal KeyLongValue buildParsed()
		  {
			KeyLongValue result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public KeyLongValue buildPartial()
		  {
			KeyLongValue result = KeyLongValue.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.key_ = key_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.value_ = value_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(KeyLongValue other)
		  {
			if (other == KeyLongValue.DefaultInstance)
			{
				return this;
			}
			if (other.hasKey())
			{
			  setKey(other.Key);
			}
			if (other.hasValue())
			{
			  Value = other.Value;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasKey())
				{
    
				  return false;
				}
				if (!hasValue())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  key_ = input.readBytes();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  value_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string key = 1;
		  internal object key_ = "";
		  public bool hasKey()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getKey()
		  {
			object @ref = key_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  key_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setKey(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			key_ = value;

			return this;
		  }
		  public Builder clearKey()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			key_ = DefaultInstance.Key;

			return this;
		  }
		  internal void setKey(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			key_ = value;

		  }

		  // required uint64 value = 2;
		  internal long value_;
		  public bool hasValue()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long Value
		  {
			  get
			  {
				return value_;
			  }
		  }
		  public Builder setValue(long value)
		  {
			bitField0_ |= 0x00000002;
			value_ = value;

			return this;
		  }
		  public Builder clearValue()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			value_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.KeyLongValue)
		}

		static KeyLongValue()
		{
		  defaultInstance = new KeyLongValue(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.KeyLongValue)
	  }

	  public interface IntRangeOrBuilder : MessageLiteOrBuilder
	  {

		// required int32 start = 1;
		bool hasStart();
		int Start {get;}

		// required int32 end = 2;
		bool hasEnd();
		int End {get;}
	  }
	  public sealed class IntRange : IntRangeOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use IntRange.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal IntRange(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<IntRange> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<IntRange>
		 {
			 protected internal IntRange newObject(Handle handle)
			 {
			   return new IntRange(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal IntRange(bool noInit)
		{
		}

		internal static readonly IntRange defaultInstance;
		public static IntRange DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public IntRange DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required int32 start = 1;
		public const int START_FIELD_NUMBER = 1;
		internal int start_;
		public bool hasStart()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public int Start
		{
			get
			{
			  return start_;
			}
		}

		// required int32 end = 2;
		public const int END_FIELD_NUMBER = 2;
		internal int end_;
		public bool hasEnd()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public int End
		{
			get
			{
			  return end_;
			}
		}

		internal void initFields()
		{
		  start_ = 0;
		  end_ = 0;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasStart())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasEnd())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteInt32(1, start_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteInt32(2, end_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeInt32Size(1, start_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeInt32Size(2, end_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static IntRange parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static IntRange parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static IntRange parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static IntRange parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseFrom(java.io.InputStream input) throws java.io.IOException
		public static IntRange parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static IntRange parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static IntRange parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static IntRange parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseFrom(CodedInputStream input) throws java.io.IOException
		public static IntRange parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static IntRange parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static IntRange parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(IntRange prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<IntRange, Builder>, IntRangeOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using IntRange.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			start_ = 0;
			bitField0_ = (bitField0_ & ~0x00000001);
			end_ = 0;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public IntRange DefaultInstanceForType
		  {
			  get
			  {
				return IntRange.DefaultInstance;
			  }
		  }

		  public IntRange build()
		  {
			IntRange result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private IntRange buildParsed() throws InvalidProtocolBufferException
		  internal IntRange buildParsed()
		  {
			IntRange result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public IntRange buildPartial()
		  {
			IntRange result = IntRange.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.start_ = start_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.end_ = end_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(IntRange other)
		  {
			if (other == IntRange.DefaultInstance)
			{
				return this;
			}
			if (other.hasStart())
			{
			  Start = other.Start;
			}
			if (other.hasEnd())
			{
			  End = other.End;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasStart())
				{
    
				  return false;
				}
				if (!hasEnd())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  start_ = input.readInt32();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  end_ = input.readInt32();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required int32 start = 1;
		  internal int start_;
		  public bool hasStart()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public int Start
		  {
			  get
			  {
				return start_;
			  }
		  }
		  public Builder setStart(int value)
		  {
			bitField0_ |= 0x00000001;
			start_ = value;

			return this;
		  }
		  public Builder clearStart()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			start_ = 0;

			return this;
		  }

		  // required int32 end = 2;
		  internal int end_;
		  public bool hasEnd()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public int End
		  {
			  get
			  {
				return end_;
			  }
		  }
		  public Builder setEnd(int value)
		  {
			bitField0_ |= 0x00000002;
			end_ = value;

			return this;
		  }
		  public Builder clearEnd()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			end_ = 0;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.IntRange)
		}

		static IntRange()
		{
		  defaultInstance = new IntRange(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.IntRange)
	  }

	  public interface EncryptionKeysOrBuilder : MessageLiteOrBuilder
	  {

		// required string key = 1;
		bool hasKey();
		string Key {get;}

		// required bytes value = 2;
		bool hasValue();
		ByteString Value {get;}

		// repeated .pulsar.proto.KeyValue metadata = 3;
		IList<KeyValue> MetadataList {get;}
		KeyValue getMetadata(int index);
		int MetadataCount {get;}
	  }
	  public sealed class EncryptionKeys : EncryptionKeysOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use EncryptionKeys.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal EncryptionKeys(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<EncryptionKeys> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<EncryptionKeys>
		 {
			 protected internal EncryptionKeys newObject(Handle handle)
			 {
			   return new EncryptionKeys(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal EncryptionKeys(bool noInit)
		{
		}

		internal static readonly EncryptionKeys defaultInstance;
		public static EncryptionKeys DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public EncryptionKeys DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string key = 1;
		public const int KEY_FIELD_NUMBER = 1;
		internal object key_;
		public bool hasKey()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Key
		{
			get
			{
			  object @ref = key_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  key_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString KeyBytes
		{
			get
			{
			  object @ref = key_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				key_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required bytes value = 2;
		public const int VALUE_FIELD_NUMBER = 2;
		internal ByteString value_;
		public bool hasValue()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public ByteString Value
		{
			get
			{
			  return value_;
			}
		}

		// repeated .pulsar.proto.KeyValue metadata = 3;
		public const int METADATA_FIELD_NUMBER = 3;
		internal IList<KeyValue> metadata_;
		public IList<KeyValue> MetadataList
		{
			get
			{
			  return metadata_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends KeyValueOrBuilder> getMetadataOrBuilderList()
		public IList<KeyValueOrBuilder> MetadataOrBuilderList
		{
			get
			{
			  return metadata_;
			}
		}
		public int MetadataCount
		{
			get
			{
			  return metadata_.Count;
			}
		}
		public KeyValue getMetadata(int index)
		{
		  return metadata_[index];
		}
		public KeyValueOrBuilder getMetadataOrBuilder(int index)
		{
		  return metadata_[index];
		}

		internal void initFields()
		{
		  key_ = "";
		  value_ = ByteString.Empty;
		  metadata_ = java.util.Collections.emptyList();
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasKey())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasValue())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < MetadataCount; i++)
			  {
				if (!getMetadata(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, KeyBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, value_);
		  }
		  for (int i = 0; i < metadata_.Count; i++)
		  {
			output.WriteMessage(3, metadata_[i]);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, KeyBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, value_);
			  }
			  for (int i = 0; i < metadata_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(3, metadata_[i]);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static EncryptionKeys parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static EncryptionKeys parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static EncryptionKeys parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static EncryptionKeys parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseFrom(java.io.InputStream input) throws java.io.IOException
		public static EncryptionKeys parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static EncryptionKeys parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static EncryptionKeys parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static EncryptionKeys parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseFrom(CodedInputStream input) throws java.io.IOException
		public static EncryptionKeys parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static EncryptionKeys parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static EncryptionKeys parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(EncryptionKeys prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<EncryptionKeys, Builder>, EncryptionKeysOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using EncryptionKeys.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			key_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			value_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00000002);
			metadata_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public EncryptionKeys DefaultInstanceForType
		  {
			  get
			  {
				return EncryptionKeys.DefaultInstance;
			  }
		  }

		  public EncryptionKeys build()
		  {
			EncryptionKeys result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private EncryptionKeys buildParsed() throws InvalidProtocolBufferException
		  internal EncryptionKeys buildParsed()
		  {
			EncryptionKeys result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public EncryptionKeys buildPartial()
		  {
			EncryptionKeys result = EncryptionKeys.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.key_ = key_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.value_ = value_;
			if (((bitField0_ & 0x00000004) == 0x00000004))
			{
			  metadata_ = java.util.Collections.unmodifiableList(metadata_);
			  bitField0_ = (bitField0_ & ~0x00000004);
			}
			result.metadata_ = metadata_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(EncryptionKeys other)
		  {
			if (other == EncryptionKeys.DefaultInstance)
			{
				return this;
			}
			if (other.hasKey())
			{
			  setKey(other.Key);
			}
			if (other.hasValue())
			{
			  Value = other.Value;
			}
			if (other.metadata_.Count > 0)
			{
			  if (metadata_.Count == 0)
			  {
				metadata_ = other.metadata_;
				bitField0_ = (bitField0_ & ~0x00000004);
			  }
			  else
			  {
				ensureMetadataIsMutable();
				((List<KeyValue>)metadata_).AddRange(other.metadata_);
			  }

			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasKey())
				{
    
				  return false;
				}
				if (!hasValue())
				{
    
				  return false;
				}
				for (int i = 0; i < MetadataCount; i++)
				{
				  if (!getMetadata(i).Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  key_ = input.readBytes();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  value_ = input.readBytes();
				  break;
				}
				case 26:
				{
				  KeyValue.Builder subBuilder = KeyValue.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addMetadata(subBuilder.buildPartial());
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string key = 1;
		  internal object key_ = "";
		  public bool hasKey()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getKey()
		  {
			object @ref = key_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  key_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setKey(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			key_ = value;

			return this;
		  }
		  public Builder clearKey()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			key_ = DefaultInstance.Key;

			return this;
		  }
		  internal void setKey(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			key_ = value;

		  }

		  // required bytes value = 2;
		  internal ByteString value_ = ByteString.Empty;
		  public bool hasValue()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public ByteString Value
		  {
			  get
			  {
				return value_;
			  }
		  }
		  public Builder setValue(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			value_ = value;

			return this;
		  }
		  public Builder clearValue()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			value_ = DefaultInstance.Value;

			return this;
		  }

		  // repeated .pulsar.proto.KeyValue metadata = 3;
		  internal IList<KeyValue> metadata_ = java.util.Collections.emptyList();
		  internal void ensureMetadataIsMutable()
		  {
			if (!((bitField0_ & 0x00000004) == 0x00000004))
			{
			  metadata_ = new List<KeyValue>(metadata_);
			  bitField0_ |= 0x00000004;
			}
		  }

		  public IList<KeyValue> MetadataList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(metadata_);
			  }
		  }
		  public int MetadataCount
		  {
			  get
			  {
				return metadata_.Count;
			  }
		  }
		  public KeyValue getMetadata(int index)
		  {
			return metadata_[index];
		  }
		  public Builder setMetadata(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_[index] = value;

			return this;
		  }
		  public Builder setMetadata(int index, KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addMetadata(KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_.Add(value);

			return this;
		  }
		  public Builder addMetadata(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_.Insert(index, value);

			return this;
		  }
		  public Builder addMetadata(KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addMetadata(int index, KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllMetadata<T1>(IEnumerable<T1> values) where T1 : KeyValue
		  {
			ensureMetadataIsMutable();
			base.addAll(values, metadata_);

			return this;
		  }
		  public Builder clearMetadata()
		  {
			metadata_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000004);

			return this;
		  }
		  public Builder removeMetadata(int index)
		  {
			ensureMetadataIsMutable();
			metadata_.RemoveAt(index);

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.EncryptionKeys)
		}

		static EncryptionKeys()
		{
		  defaultInstance = new EncryptionKeys(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.EncryptionKeys)
	  }

	  public interface MessageMetadataOrBuilder : MessageLiteOrBuilder
	  {

		// required string producer_name = 1;
		bool hasProducerName();
		string ProducerName {get;}

		// required uint64 sequence_id = 2;
		bool hasSequenceId();
		long SequenceId {get;}

		// required uint64 publish_time = 3;
		bool hasPublishTime();
		long PublishTime {get;}

		// repeated .pulsar.proto.KeyValue properties = 4;
		IList<KeyValue> PropertiesList {get;}
		KeyValue getProperties(int index);
		int PropertiesCount {get;}

		// optional string replicated_from = 5;
		bool hasReplicatedFrom();
		string ReplicatedFrom {get;}

		// optional string partition_key = 6;
		bool hasPartitionKey();
		string PartitionKey {get;}

		// repeated string replicate_to = 7;
		IList<string> ReplicateToList {get;}
		int ReplicateToCount {get;}
		string getReplicateTo(int index);

		// optional .pulsar.proto.CompressionType compression = 8 [default = NONE];
		bool hasCompression();
		CompressionType Compression {get;}

		// optional uint32 uncompressed_size = 9 [default = 0];
		bool hasUncompressedSize();
		int UncompressedSize {get;}

		// optional int32 num_messages_in_batch = 11 [default = 1];
		bool hasNumMessagesInBatch();
		int NumMessagesInBatch {get;}

		// optional uint64 event_time = 12 [default = 0];
		bool hasEventTime();
		long EventTime {get;}

		// repeated .pulsar.proto.EncryptionKeys encryption_keys = 13;
		IList<EncryptionKeys> EncryptionKeysList {get;}
		EncryptionKeys getEncryptionKeys(int index);
		int EncryptionKeysCount {get;}

		// optional string encryption_algo = 14;
		bool hasEncryptionAlgo();
		string EncryptionAlgo {get;}

		// optional bytes encryption_param = 15;
		bool hasEncryptionParam();
		ByteString EncryptionParam {get;}

		// optional bytes schema_version = 16;
		bool hasSchemaVersion();
		ByteString SchemaVersion {get;}

		// optional bool partition_key_b64_encoded = 17 [default = false];
		bool hasPartitionKeyB64Encoded();
		bool PartitionKeyB64Encoded {get;}

		// optional bytes ordering_key = 18;
		bool hasOrderingKey();
		ByteString OrderingKey {get;}

		// optional int64 deliver_at_time = 19;
		bool hasDeliverAtTime();
		long DeliverAtTime {get;}

		// optional int32 marker_type = 20;
		bool hasMarkerType();
		int MarkerType {get;}

		// optional uint64 txnid_least_bits = 22 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 23 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional uint64 highest_sequence_id = 24 [default = 0];
		bool hasHighestSequenceId();
		long HighestSequenceId {get;}
	  }
	  public sealed class MessageMetadata : MessageMetadataOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use MessageMetadata.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal MessageMetadata(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<MessageMetadata> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<MessageMetadata>
		 {
			 protected internal MessageMetadata newObject(Handle handle)
			 {
			   return new MessageMetadata(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal MessageMetadata(bool noInit)
		{
		}

		internal static readonly MessageMetadata defaultInstance;
		public static MessageMetadata DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public MessageMetadata DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string producer_name = 1;
		public const int PRODUCER_NAME_FIELD_NUMBER = 1;
		internal object producerName_;
		public bool hasProducerName()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string ProducerName
		{
			get
			{
			  object @ref = producerName_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  producerName_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ProducerNameBytes
		{
			get
			{
			  object @ref = producerName_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				producerName_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required uint64 sequence_id = 2;
		public const int SEQUENCE_ID_FIELD_NUMBER = 2;
		internal long sequenceId_;
		public bool hasSequenceId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long SequenceId
		{
			get
			{
			  return sequenceId_;
			}
		}

		// required uint64 publish_time = 3;
		public const int PUBLISH_TIME_FIELD_NUMBER = 3;
		internal long publishTime_;
		public bool hasPublishTime()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long PublishTime
		{
			get
			{
			  return publishTime_;
			}
		}

		// repeated .pulsar.proto.KeyValue properties = 4;
		public const int PROPERTIES_FIELD_NUMBER = 4;
		internal IList<KeyValue> properties_;
		public IList<KeyValue> PropertiesList
		{
			get
			{
			  return properties_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends KeyValueOrBuilder> getPropertiesOrBuilderList()
		public IList<KeyValueOrBuilder> PropertiesOrBuilderList
		{
			get
			{
			  return properties_;
			}
		}
		public int PropertiesCount
		{
			get
			{
			  return properties_.Count;
			}
		}
		public KeyValue getProperties(int index)
		{
		  return properties_[index];
		}
		public KeyValueOrBuilder getPropertiesOrBuilder(int index)
		{
		  return properties_[index];
		}

		// optional string replicated_from = 5;
		public const int REPLICATED_FROM_FIELD_NUMBER = 5;
		internal object replicatedFrom_;
		public bool hasReplicatedFrom()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public string ReplicatedFrom
		{
			get
			{
			  object @ref = replicatedFrom_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  replicatedFrom_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ReplicatedFromBytes
		{
			get
			{
			  object @ref = replicatedFrom_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				replicatedFrom_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional string partition_key = 6;
		public const int PARTITION_KEY_FIELD_NUMBER = 6;
		internal object partitionKey_;
		public bool hasPartitionKey()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string PartitionKey
		{
			get
			{
			  object @ref = partitionKey_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  partitionKey_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString PartitionKeyBytes
		{
			get
			{
			  object @ref = partitionKey_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				partitionKey_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// repeated string replicate_to = 7;
		public const int REPLICATE_TO_FIELD_NUMBER = 7;
		internal LazyStringList replicateTo_;
		public IList<string> ReplicateToList
		{
			get
			{
			  return replicateTo_;
			}
		}
		public int ReplicateToCount
		{
			get
			{
			  return replicateTo_.size();
			}
		}
		public string getReplicateTo(int index)
		{
		  return replicateTo_.get(index);
		}

		// optional .pulsar.proto.CompressionType compression = 8 [default = NONE];
		public const int COMPRESSION_FIELD_NUMBER = 8;
		internal CompressionType compression_;
		public bool hasCompression()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public CompressionType Compression
		{
			get
			{
			  return compression_;
			}
		}

		// optional uint32 uncompressed_size = 9 [default = 0];
		public const int UNCOMPRESSED_SIZE_FIELD_NUMBER = 9;
		internal int uncompressedSize_;
		public bool hasUncompressedSize()
		{
		  return ((bitField0_ & 0x00000040) == 0x00000040);
		}
		public int UncompressedSize
		{
			get
			{
			  return uncompressedSize_;
			}
		}

		// optional int32 num_messages_in_batch = 11 [default = 1];
		public const int NUM_MESSAGES_IN_BATCH_FIELD_NUMBER = 11;
		internal int numMessagesInBatch_;
		public bool hasNumMessagesInBatch()
		{
		  return ((bitField0_ & 0x00000080) == 0x00000080);
		}
		public int NumMessagesInBatch
		{
			get
			{
			  return numMessagesInBatch_;
			}
		}

		// optional uint64 event_time = 12 [default = 0];
		public const int EVENT_TIME_FIELD_NUMBER = 12;
		internal long eventTime_;
		public bool hasEventTime()
		{
		  return ((bitField0_ & 0x00000100) == 0x00000100);
		}
		public long EventTime
		{
			get
			{
			  return eventTime_;
			}
		}

		// repeated .pulsar.proto.EncryptionKeys encryption_keys = 13;
		public const int ENCRYPTION_KEYS_FIELD_NUMBER = 13;
		internal IList<EncryptionKeys> encryptionKeys_;
		public IList<EncryptionKeys> EncryptionKeysList
		{
			get
			{
			  return encryptionKeys_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends EncryptionKeysOrBuilder> getEncryptionKeysOrBuilderList()
		public IList<EncryptionKeysOrBuilder> EncryptionKeysOrBuilderList
		{
			get
			{
			  return encryptionKeys_;
			}
		}
		public int EncryptionKeysCount
		{
			get
			{
			  return encryptionKeys_.Count;
			}
		}
		public EncryptionKeys getEncryptionKeys(int index)
		{
		  return encryptionKeys_[index];
		}
		public EncryptionKeysOrBuilder getEncryptionKeysOrBuilder(int index)
		{
		  return encryptionKeys_[index];
		}

		// optional string encryption_algo = 14;
		public const int ENCRYPTION_ALGO_FIELD_NUMBER = 14;
		internal object encryptionAlgo_;
		public bool hasEncryptionAlgo()
		{
		  return ((bitField0_ & 0x00000200) == 0x00000200);
		}
		public string EncryptionAlgo
		{
			get
			{
			  object @ref = encryptionAlgo_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  encryptionAlgo_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString EncryptionAlgoBytes
		{
			get
			{
			  object @ref = encryptionAlgo_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				encryptionAlgo_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional bytes encryption_param = 15;
		public const int ENCRYPTION_PARAM_FIELD_NUMBER = 15;
		internal ByteString encryptionParam_;
		public bool hasEncryptionParam()
		{
		  return ((bitField0_ & 0x00000400) == 0x00000400);
		}
		public ByteString EncryptionParam
		{
			get
			{
			  return encryptionParam_;
			}
		}

		// optional bytes schema_version = 16;
		public const int SCHEMA_VERSION_FIELD_NUMBER = 16;
		internal ByteString schemaVersion_;
		public bool hasSchemaVersion()
		{
		  return ((bitField0_ & 0x00000800) == 0x00000800);
		}
		public ByteString SchemaVersion
		{
			get
			{
			  return schemaVersion_;
			}
		}

		// optional bool partition_key_b64_encoded = 17 [default = false];
		public const int PARTITION_KEY_B64_ENCODED_FIELD_NUMBER = 17;
		internal bool partitionKeyB64Encoded_;
		public bool hasPartitionKeyB64Encoded()
		{
		  return ((bitField0_ & 0x00001000) == 0x00001000);
		}
		public bool PartitionKeyB64Encoded
		{
			get
			{
			  return partitionKeyB64Encoded_;
			}
		}

		// optional bytes ordering_key = 18;
		public const int ORDERING_KEY_FIELD_NUMBER = 18;
		internal ByteString orderingKey_;
		public bool hasOrderingKey()
		{
		  return ((bitField0_ & 0x00002000) == 0x00002000);
		}
		public ByteString OrderingKey
		{
			get
			{
			  return orderingKey_;
			}
		}

		// optional int64 deliver_at_time = 19;
		public const int DELIVER_AT_TIME_FIELD_NUMBER = 19;
		internal long deliverAtTime_;
		public bool hasDeliverAtTime()
		{
		  return ((bitField0_ & 0x00004000) == 0x00004000);
		}
		public long DeliverAtTime
		{
			get
			{
			  return deliverAtTime_;
			}
		}

		// optional int32 marker_type = 20;
		public const int MARKER_TYPE_FIELD_NUMBER = 20;
		internal int markerType_;
		public bool hasMarkerType()
		{
		  return ((bitField0_ & 0x00008000) == 0x00008000);
		}
		public int MarkerType
		{
			get
			{
			  return markerType_;
			}
		}

		// optional uint64 txnid_least_bits = 22 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 22;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00010000) == 0x00010000);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 23 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 23;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00020000) == 0x00020000);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional uint64 highest_sequence_id = 24 [default = 0];
		public const int HIGHEST_SEQUENCE_ID_FIELD_NUMBER = 24;
		internal long highestSequenceId_;
		public bool hasHighestSequenceId()
		{
		  return ((bitField0_ & 0x00040000) == 0x00040000);
		}
		public long HighestSequenceId
		{
			get
			{
			  return highestSequenceId_;
			}
		}

		internal void initFields()
		{
		  producerName_ = "";
		  sequenceId_ = 0L;
		  publishTime_ = 0L;
		  properties_ = java.util.Collections.emptyList();
		  replicatedFrom_ = "";
		  partitionKey_ = "";
		  replicateTo_ = LazyStringArrayList.EMPTY;
		  compression_ = CompressionType.NONE;
		  uncompressedSize_ = 0;
		  numMessagesInBatch_ = 1;
		  eventTime_ = 0L;
		  encryptionKeys_ = java.util.Collections.emptyList();
		  encryptionAlgo_ = "";
		  encryptionParam_ = ByteString.Empty;
		  schemaVersion_ = ByteString.Empty;
		  partitionKeyB64Encoded_ = false;
		  orderingKey_ = ByteString.Empty;
		  deliverAtTime_ = 0L;
		  markerType_ = 0;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  highestSequenceId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasProducerName())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSequenceId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasPublishTime())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < PropertiesCount; i++)
			  {
				if (!getProperties(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  for (int i = 0; i < EncryptionKeysCount; i++)
			  {
				if (!getEncryptionKeys(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, ProducerNameBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, sequenceId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, publishTime_);
		  }
		  for (int i = 0; i < properties_.Count; i++)
		  {
			output.WriteMessage(4, properties_[i]);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteBytes(5, ReplicatedFromBytes);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(6, PartitionKeyBytes);
		  }
		  for (int i = 0; i < replicateTo_.size(); i++)
		  {
			output.WriteBytes(7, replicateTo_.getByteString(i));
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.writeEnum(8, compression_.Number);
		  }
		  if (((bitField0_ & 0x00000040) == 0x00000040))
		  {
			output.WriteUInt32(9, uncompressedSize_);
		  }
		  if (((bitField0_ & 0x00000080) == 0x00000080))
		  {
			output.WriteInt32(11, numMessagesInBatch_);
		  }
		  if (((bitField0_ & 0x00000100) == 0x00000100))
		  {
			output.WriteUInt64(12, eventTime_);
		  }
		  for (int i = 0; i < encryptionKeys_.Count; i++)
		  {
			output.WriteMessage(13, encryptionKeys_[i]);
		  }
		  if (((bitField0_ & 0x00000200) == 0x00000200))
		  {
			output.WriteBytes(14, EncryptionAlgoBytes);
		  }
		  if (((bitField0_ & 0x00000400) == 0x00000400))
		  {
			output.WriteBytes(15, encryptionParam_);
		  }
		  if (((bitField0_ & 0x00000800) == 0x00000800))
		  {
			output.WriteBytes(16, schemaVersion_);
		  }
		  if (((bitField0_ & 0x00001000) == 0x00001000))
		  {
			output.WriteBool(17, partitionKeyB64Encoded_);
		  }
		  if (((bitField0_ & 0x00002000) == 0x00002000))
		  {
			output.WriteBytes(18, orderingKey_);
		  }
		  if (((bitField0_ & 0x00004000) == 0x00004000))
		  {
			output.writeInt64(19, deliverAtTime_);
		  }
		  if (((bitField0_ & 0x00008000) == 0x00008000))
		  {
			output.WriteInt32(20, markerType_);
		  }
		  if (((bitField0_ & 0x00010000) == 0x00010000))
		  {
			output.WriteUInt64(22, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00020000) == 0x00020000))
		  {
			output.WriteUInt64(23, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00040000) == 0x00040000))
		  {
			output.WriteUInt64(24, highestSequenceId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, ProducerNameBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(sequenceId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(publishTime_);
			  }
			  for (int i = 0; i < properties_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(4, properties_[i]);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeBytesSize(5, ReplicatedFromBytes);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(6, PartitionKeyBytes);
			  }
			  {
				int dataSize = 0;
				for (int i = 0; i < replicateTo_.size(); i++)
				{
				  dataSize += CodedOutputStream.computeBytesSizeNoTag(replicateTo_.getByteString(i));
				}
				size += dataSize;
				size += 1 * ReplicateToList.Count;
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.computeEnumSize(8, compression_.Number);
			  }
			  if (((bitField0_ & 0x00000040) == 0x00000040))
			  {
				size += CodedOutputStream.computeUInt32Size(9, uncompressedSize_);
			  }
			  if (((bitField0_ & 0x00000080) == 0x00000080))
			  {
				size += CodedOutputStream.computeInt32Size(11, numMessagesInBatch_);
			  }
			  if (((bitField0_ & 0x00000100) == 0x00000100))
			  {
				size += CodedOutputStream.computeUInt64Size(12, eventTime_);
			  }
			  for (int i = 0; i < encryptionKeys_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(13, encryptionKeys_[i]);
			  }
			  if (((bitField0_ & 0x00000200) == 0x00000200))
			  {
				size += CodedOutputStream.computeBytesSize(14, EncryptionAlgoBytes);
			  }
			  if (((bitField0_ & 0x00000400) == 0x00000400))
			  {
				size += CodedOutputStream.computeBytesSize(15, encryptionParam_);
			  }
			  if (((bitField0_ & 0x00000800) == 0x00000800))
			  {
				size += CodedOutputStream.computeBytesSize(16, schemaVersion_);
			  }
			  if (((bitField0_ & 0x00001000) == 0x00001000))
			  {
				size += CodedOutputStream.computeBoolSize(17, partitionKeyB64Encoded_);
			  }
			  if (((bitField0_ & 0x00002000) == 0x00002000))
			  {
				size += CodedOutputStream.computeBytesSize(18, orderingKey_);
			  }
			  if (((bitField0_ & 0x00004000) == 0x00004000))
			  {
				size += CodedOutputStream.computeInt64Size(19, deliverAtTime_);
			  }
			  if (((bitField0_ & 0x00008000) == 0x00008000))
			  {
				size += CodedOutputStream.computeInt32Size(20, markerType_);
			  }
			  if (((bitField0_ & 0x00010000) == 0x00010000))
			  {
				size += CodedOutputStream.computeUInt64Size(22, txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00020000) == 0x00020000))
			  {
				size += CodedOutputStream.computeUInt64Size(23, txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00040000) == 0x00040000))
			  {
				size += CodedOutputStream.computeUInt64Size(24, highestSequenceId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static MessageMetadata parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static MessageMetadata parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static MessageMetadata parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static MessageMetadata parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseFrom(java.io.InputStream input) throws java.io.IOException
		public static MessageMetadata parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static MessageMetadata parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static MessageMetadata parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static MessageMetadata parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseFrom(CodedInputStream input) throws java.io.IOException
		public static MessageMetadata parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static MessageMetadata parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static MessageMetadata parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(MessageMetadata prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<MessageMetadata, Builder>, MessageMetadataOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using MessageMetadata.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			producerName_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			sequenceId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			publishTime_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			properties_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000008);
			replicatedFrom_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			partitionKey_ = "";
			bitField0_ = (bitField0_ & ~0x00000020);
			replicateTo_ = LazyStringArrayList.EMPTY;
			bitField0_ = (bitField0_ & ~0x00000040);
			compression_ = CompressionType.NONE;
			bitField0_ = (bitField0_ & ~0x00000080);
			uncompressedSize_ = 0;
			bitField0_ = (bitField0_ & ~0x00000100);
			numMessagesInBatch_ = 1;
			bitField0_ = (bitField0_ & ~0x00000200);
			eventTime_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000400);
			encryptionKeys_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000800);
			encryptionAlgo_ = "";
			bitField0_ = (bitField0_ & ~0x00001000);
			encryptionParam_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00002000);
			schemaVersion_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00004000);
			partitionKeyB64Encoded_ = false;
			bitField0_ = (bitField0_ & ~0x00008000);
			orderingKey_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00010000);
			deliverAtTime_ = 0L;
			bitField0_ = (bitField0_ & ~0x00020000);
			markerType_ = 0;
			bitField0_ = (bitField0_ & ~0x00040000);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00080000);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00100000);
			highestSequenceId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00200000);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public MessageMetadata DefaultInstanceForType
		  {
			  get
			  {
				return MessageMetadata.DefaultInstance;
			  }
		  }

		  public MessageMetadata build()
		  {
			MessageMetadata result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private MessageMetadata buildParsed() throws InvalidProtocolBufferException
		  internal MessageMetadata buildParsed()
		  {
			MessageMetadata result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public MessageMetadata buildPartial()
		  {
			MessageMetadata result = MessageMetadata.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.producerName_ = producerName_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.sequenceId_ = sequenceId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.publishTime_ = publishTime_;
			if (((bitField0_ & 0x00000008) == 0x00000008))
			{
			  properties_ = java.util.Collections.unmodifiableList(properties_);
			  bitField0_ = (bitField0_ & ~0x00000008);
			}
			result.properties_ = properties_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.replicatedFrom_ = replicatedFrom_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.partitionKey_ = partitionKey_;
			if (((bitField0_ & 0x00000040) == 0x00000040))
			{
			  replicateTo_ = new UnmodifiableLazyStringList(replicateTo_);
			  bitField0_ = (bitField0_ & ~0x00000040);
			}
			result.replicateTo_ = replicateTo_;
			if (((from_bitField0_ & 0x00000080) == 0x00000080))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.compression_ = compression_;
			if (((from_bitField0_ & 0x00000100) == 0x00000100))
			{
			  to_bitField0_ |= 0x00000040;
			}
			result.uncompressedSize_ = uncompressedSize_;
			if (((from_bitField0_ & 0x00000200) == 0x00000200))
			{
			  to_bitField0_ |= 0x00000080;
			}
			result.numMessagesInBatch_ = numMessagesInBatch_;
			if (((from_bitField0_ & 0x00000400) == 0x00000400))
			{
			  to_bitField0_ |= 0x00000100;
			}
			result.eventTime_ = eventTime_;
			if (((bitField0_ & 0x00000800) == 0x00000800))
			{
			  encryptionKeys_ = java.util.Collections.unmodifiableList(encryptionKeys_);
			  bitField0_ = (bitField0_ & ~0x00000800);
			}
			result.encryptionKeys_ = encryptionKeys_;
			if (((from_bitField0_ & 0x00001000) == 0x00001000))
			{
			  to_bitField0_ |= 0x00000200;
			}
			result.encryptionAlgo_ = encryptionAlgo_;
			if (((from_bitField0_ & 0x00002000) == 0x00002000))
			{
			  to_bitField0_ |= 0x00000400;
			}
			result.encryptionParam_ = encryptionParam_;
			if (((from_bitField0_ & 0x00004000) == 0x00004000))
			{
			  to_bitField0_ |= 0x00000800;
			}
			result.schemaVersion_ = schemaVersion_;
			if (((from_bitField0_ & 0x00008000) == 0x00008000))
			{
			  to_bitField0_ |= 0x00001000;
			}
			result.partitionKeyB64Encoded_ = partitionKeyB64Encoded_;
			if (((from_bitField0_ & 0x00010000) == 0x00010000))
			{
			  to_bitField0_ |= 0x00002000;
			}
			result.orderingKey_ = orderingKey_;
			if (((from_bitField0_ & 0x00020000) == 0x00020000))
			{
			  to_bitField0_ |= 0x00004000;
			}
			result.deliverAtTime_ = deliverAtTime_;
			if (((from_bitField0_ & 0x00040000) == 0x00040000))
			{
			  to_bitField0_ |= 0x00008000;
			}
			result.markerType_ = markerType_;
			if (((from_bitField0_ & 0x00080000) == 0x00080000))
			{
			  to_bitField0_ |= 0x00010000;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00100000) == 0x00100000))
			{
			  to_bitField0_ |= 0x00020000;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00200000) == 0x00200000))
			{
			  to_bitField0_ |= 0x00040000;
			}
			result.highestSequenceId_ = highestSequenceId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(MessageMetadata other)
		  {
			if (other == MessageMetadata.DefaultInstance)
			{
				return this;
			}
			if (other.hasProducerName())
			{
			  SetProducerName(other.ProducerName);
			}
			if (other.hasSequenceId())
			{
			  setSequenceId(other.SequenceId);
			}
			if (other.hasPublishTime())
			{
			  setPublishTime(other.PublishTime);
			}
			if (other.properties_.Count > 0)
			{
			  if (properties_.Count == 0)
			  {
				properties_ = other.properties_;
				bitField0_ = (bitField0_ & ~0x00000008);
			  }
			  else
			  {
				ensurePropertiesIsMutable();
				((List<KeyValue>)properties_).AddRange(other.properties_);
			  }

			}
			if (other.hasReplicatedFrom())
			{
			  setReplicatedFrom(other.ReplicatedFrom);
			}
			if (other.hasPartitionKey())
			{
			  setPartitionKey(other.PartitionKey);
			}
			if (!other.replicateTo_.Empty)
			{
			  if (replicateTo_.Empty)
			  {
				replicateTo_ = other.replicateTo_;
				bitField0_ = (bitField0_ & ~0x00000040);
			  }
			  else
			  {
				ensureReplicateToIsMutable();
				replicateTo_.addAll(other.replicateTo_);
			  }

			}
			if (other.hasCompression())
			{
			  setCompression(other.Compression);
			}
			if (other.hasUncompressedSize())
			{
			  setUncompressedSize(other.UncompressedSize);
			}
			if (other.hasNumMessagesInBatch())
			{
			  setNumMessagesInBatch(other.NumMessagesInBatch);
			}
			if (other.hasEventTime())
			{
			  setEventTime(other.EventTime);
			}
			if (other.encryptionKeys_.Count > 0)
			{
			  if (encryptionKeys_.Count == 0)
			  {
				encryptionKeys_ = other.encryptionKeys_;
				bitField0_ = (bitField0_ & ~0x00000800);
			  }
			  else
			  {
				ensureEncryptionKeysIsMutable();
				((List<EncryptionKeys>)encryptionKeys_).AddRange(other.encryptionKeys_);
			  }

			}
			if (other.hasEncryptionAlgo())
			{
			  setEncryptionAlgo(other.EncryptionAlgo);
			}
			if (other.hasEncryptionParam())
			{
			  EncryptionParam = other.EncryptionParam;
			}
			if (other.hasSchemaVersion())
			{
			  SchemaVersion = other.SchemaVersion;
			}
			if (other.hasPartitionKeyB64Encoded())
			{
			  setPartitionKeyB64Encoded(other.PartitionKeyB64Encoded);
			}
			if (other.hasOrderingKey())
			{
			  OrderingKey = other.OrderingKey;
			}
			if (other.hasDeliverAtTime())
			{
			  setDeliverAtTime(other.DeliverAtTime);
			}
			if (other.hasMarkerType())
			{
			  setMarkerType(other.MarkerType);
			}
			if (other.hasTxnidLeastBits())
			{
			  setTxnidLeastBits(other.TxnidLeastBits);
			}
			if (other.hasTxnidMostBits())
			{
			  setTxnidMostBits(other.TxnidMostBits);
			}
			if (other.hasHighestSequenceId())
			{
			  setHighestSequenceId(other.HighestSequenceId);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasProducerName())
				{
    
				  return false;
				}
				if (!hasSequenceId())
				{
    
				  return false;
				}
				if (!hasPublishTime())
				{
    
				  return false;
				}
				for (int i = 0; i < PropertiesCount; i++)
				{
				  if (!getProperties(i).Initialized)
				  {
    
					return false;
				  }
				}
				for (int i = 0; i < EncryptionKeysCount; i++)
				{
				  if (!getEncryptionKeys(i).Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

		  public Builder mergeFrom(Google.Protobuf.CodedInputStream input, Google.Protobuf.ExtensionRegistry extensionRegistry)
		  {
			 throw new System.IOException("Merge from CodedInputStream is disabled");
		  }
		  public Builder MergeFrom(ByteBufCodedInputStream input, Google.Protobuf.ExtensionRegistry extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.ReadTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.SkipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  producerName_ = input.ReadBytes();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  sequenceId_ = input.ReadUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  publishTime_ = input.ReadUInt64();
				  break;
				}
				case 34:
				{
				  KeyValue.Builder subBuilder = KeyValue.newBuilder();
				  input.ReadMessage(subBuilder, extensionRegistry);
				  addProperties(subBuilder.buildPartial());
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  replicatedFrom_ = input.ReadBytes();
				  break;
				}
				case 50:
				{
				  bitField0_ |= 0x00000020;
				  partitionKey_ = input.ReadBytes();
				  break;
				}
				case 58:
				{
				  ensureReplicateToIsMutable();
				  replicateTo_.add(input.ReadBytes());
				  break;
				}
				case 64:
				{
				  int rawValue = input.ReadEnum();
				  CompressionType value = CompressionType.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000080;
					compression_ = value;
				  }
				  break;
				}
				case 72:
				{
				  bitField0_ |= 0x00000100;
				  uncompressedSize_ = input.ReadUInt32();
				  break;
				}
				case 88:
				{
				  bitField0_ |= 0x00000200;
				  numMessagesInBatch_ = input.readInt32();
				  break;
				}
				case 96:
				{
				  bitField0_ |= 0x00000400;
				  eventTime_ = input.ReadUInt64();
				  break;
				}
				case 106:
				{
				  EncryptionKeys.Builder subBuilder = EncryptionKeys.newBuilder();
				  input.ReadMessage(subBuilder, extensionRegistry);
				  addEncryptionKeys(subBuilder.buildPartial());
				  break;
				}
				case 114:
				{
				  bitField0_ |= 0x00001000;
				  encryptionAlgo_ = input.ReadBytes();
				  break;
				}
				case 122:
				{
				  bitField0_ |= 0x00002000;
				  encryptionParam_ = input.ReadBytes();
				  break;
				}
				case 130:
				{
				  bitField0_ |= 0x00004000;
				  schemaVersion_ = input.ReadBytes();
				  break;
				}
				case 136:
				{
				  bitField0_ |= 0x00008000;
				  partitionKeyB64Encoded_ = input.ReadBool();
				  break;
				}
				case 146:
				{
				  bitField0_ |= 0x00010000;
				  orderingKey_ = input.ReadBytes();
				  break;
				}
				case 152:
				{
				  bitField0_ |= 0x00020000;
				  deliverAtTime_ = input.ReadInt64();
				  break;
				}
				case 160:
				{
				  bitField0_ |= 0x00040000;
				  markerType_ = input.ReadInt32();
				  break;
				}
				case 176:
				{
				  bitField0_ |= 0x00080000;
				  txnidLeastBits_ = input.ReadUInt64();
				  break;
				}
				case 184:
				{
				  bitField0_ |= 0x00100000;
				  txnidMostBits_ = input.ReadUInt64();
				  break;
				}
				case 192:
				{
				  bitField0_ |= 0x00200000;
				  highestSequenceId_ = input.ReadUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string producer_name = 1;
		  internal object producerName_ = "";
		  public bool HasProducerName()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string GetProducerName()
		  {
			object @ref = producerName_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();  
			  producerName_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder SetProducerName(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			producerName_ = value;

			return this;
		  }
		  public Builder clearProducerName()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			producerName_ = DefaultInstance.ProducerName;

			return this;
		  }
		  internal void setProducerName(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			producerName_ = value;

		  }

		  // required uint64 sequence_id = 2;
		  internal long sequenceId_;
		  public bool hasSequenceId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long SequenceId
		  {
			  get
			  {
				return sequenceId_;
			  }
		  }
		  public Builder setSequenceId(long value)
		  {
			bitField0_ |= 0x00000002;
			sequenceId_ = value;

			return this;
		  }
		  public Builder clearSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			sequenceId_ = 0L;

			return this;
		  }

		  // required uint64 publish_time = 3;
		  internal long publishTime_;
		  public bool hasPublishTime()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long PublishTime
		  {
			  get
			  {
				return publishTime_;
			  }
		  }
		  public Builder setPublishTime(long value)
		  {
			bitField0_ |= 0x00000004;
			publishTime_ = value;

			return this;
		  }
		  public Builder clearPublishTime()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			publishTime_ = 0L;

			return this;
		  }

		  // repeated .pulsar.proto.KeyValue properties = 4;
		  internal IList<KeyValue> properties_ = java.util.Collections.emptyList();
		  internal void ensurePropertiesIsMutable()
		  {
			if (!((bitField0_ & 0x00000008) == 0x00000008))
			{
			  properties_ = new List<KeyValue>(properties_);
			  bitField0_ |= 0x00000008;
			}
		  }

		  public IList<KeyValue> PropertiesList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(properties_);
			  }
		  }
		  public int PropertiesCount
		  {
			  get
			  {
				return properties_.Count;
			  }
		  }
		  public KeyValue getProperties(int index)
		  {
			return properties_[index];
		  }
		  public Builder setProperties(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_[index] = value;

			return this;
		  }
		  public Builder setProperties(int index, KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addProperties(KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_.Add(value);

			return this;
		  }
		  public Builder addProperties(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_.Insert(index, value);

			return this;
		  }
		  public Builder addProperties(KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addProperties(int index, KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllProperties<T1>(IEnumerable<T1> values) where T1 : KeyValue
		  {
			ensurePropertiesIsMutable();
			base.addAll(values, properties_);

			return this;
		  }
		  public Builder clearProperties()
		  {
			properties_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000008);

			return this;
		  }
		  public Builder removeProperties(int index)
		  {
			ensurePropertiesIsMutable();
			properties_.RemoveAt(index);

			return this;
		  }

		  // optional string replicated_from = 5;
		  internal object replicatedFrom_ = "";
		  public bool hasReplicatedFrom()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getReplicatedFrom()
		  {
			object @ref = replicatedFrom_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  replicatedFrom_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setReplicatedFrom(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			replicatedFrom_ = value;

			return this;
		  }
		  public Builder clearReplicatedFrom()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			replicatedFrom_ = DefaultInstance.ReplicatedFrom;

			return this;
		  }
		  internal void setReplicatedFrom(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			replicatedFrom_ = value;

		  }

		  // optional string partition_key = 6;
		  internal object partitionKey_ = "";
		  public bool hasPartitionKey()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public string getPartitionKey()
		  {
			object @ref = partitionKey_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  partitionKey_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setPartitionKey(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000020;
			partitionKey_ = value;

			return this;
		  }
		  public Builder clearPartitionKey()
		  {
			bitField0_ = (bitField0_ & ~0x00000020);
			partitionKey_ = DefaultInstance.PartitionKey;

			return this;
		  }
		  internal void setPartitionKey(ByteString value)
		  {
			bitField0_ |= 0x00000020;
			partitionKey_ = value;

		  }

		  // repeated string replicate_to = 7;
		  internal LazyStringList replicateTo_ = LazyStringArrayList.EMPTY;
		  internal void ensureReplicateToIsMutable()
		  {
			if (!((bitField0_ & 0x00000040) == 0x00000040))
			{
			  replicateTo_ = new LazyStringArrayList(replicateTo_);
			  bitField0_ |= 0x00000040;
			}
		  }
		  public IList<string> ReplicateToList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(replicateTo_);
			  }
		  }
		  public int ReplicateToCount
		  {
			  get
			  {
				return replicateTo_.size();
			  }
		  }
		  public string getReplicateTo(int index)
		  {
			return replicateTo_.get(index);
		  }
		  public Builder setReplicateTo(int index, string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  ensureReplicateToIsMutable();
			replicateTo_.set(index, value);

			return this;
		  }
		  public Builder addReplicateTo(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  ensureReplicateToIsMutable();
			replicateTo_.add(value);

			return this;
		  }
		  public Builder addAllReplicateTo(IEnumerable<string> values)
		  {
			ensureReplicateToIsMutable();
			base.addAll(values, replicateTo_);

			return this;
		  }
		  public Builder clearReplicateTo()
		  {
			replicateTo_ = LazyStringArrayList.EMPTY;
			bitField0_ = (bitField0_ & ~0x00000040);

			return this;
		  }
		  internal void addReplicateTo(ByteString value)
		  {
			ensureReplicateToIsMutable();
			replicateTo_.add(value);

		  }

		  // optional .pulsar.proto.CompressionType compression = 8 [default = NONE];
		  internal CompressionType compression_ = CompressionType.NONE;
		  public bool hasCompression()
		  {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		  }
		  public CompressionType Compression
		  {
			  get
			  {
				return compression_;
			  }
		  }
		  public Builder setCompression(CompressionType value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000080;
			compression_ = value;

			return this;
		  }
		  public Builder clearCompression()
		  {
			bitField0_ = (bitField0_ & ~0x00000080);
			compression_ = CompressionType.NONE;

			return this;
		  }

		  // optional uint32 uncompressed_size = 9 [default = 0];
		  internal int uncompressedSize_;
		  public bool hasUncompressedSize()
		  {
			return ((bitField0_ & 0x00000100) == 0x00000100);
		  }
		  public int UncompressedSize
		  {
			  get
			  {
				return uncompressedSize_;
			  }
		  }
		  public Builder setUncompressedSize(int value)
		  {
			bitField0_ |= 0x00000100;
			uncompressedSize_ = value;

			return this;
		  }
		  public Builder clearUncompressedSize()
		  {
			bitField0_ = (bitField0_ & ~0x00000100);
			uncompressedSize_ = 0;

			return this;
		  }

		  // optional int32 num_messages_in_batch = 11 [default = 1];
		  internal int numMessagesInBatch_ = 1;
		  public bool hasNumMessagesInBatch()
		  {
			return ((bitField0_ & 0x00000200) == 0x00000200);
		  }
		  public int NumMessagesInBatch
		  {
			  get
			  {
				return numMessagesInBatch_;
			  }
		  }
		  public Builder setNumMessagesInBatch(int value)
		  {
			bitField0_ |= 0x00000200;
			numMessagesInBatch_ = value;

			return this;
		  }
		  public Builder clearNumMessagesInBatch()
		  {
			bitField0_ = (bitField0_ & ~0x00000200);
			numMessagesInBatch_ = 1;

			return this;
		  }

		  // optional uint64 event_time = 12 [default = 0];
		  internal long eventTime_;
		  public bool hasEventTime()
		  {
			return ((bitField0_ & 0x00000400) == 0x00000400);
		  }
		  public long EventTime
		  {
			  get
			  {
				return eventTime_;
			  }
		  }
		  public Builder setEventTime(long value)
		  {
			bitField0_ |= 0x00000400;
			eventTime_ = value;

			return this;
		  }
		  public Builder clearEventTime()
		  {
			bitField0_ = (bitField0_ & ~0x00000400);
			eventTime_ = 0L;

			return this;
		  }

		  // repeated .pulsar.proto.EncryptionKeys encryption_keys = 13;
		  internal IList<EncryptionKeys> encryptionKeys_ = java.util.Collections.emptyList();
		  internal void ensureEncryptionKeysIsMutable()
		  {
			if (!((bitField0_ & 0x00000800) == 0x00000800))
			{
			  encryptionKeys_ = new List<EncryptionKeys>(encryptionKeys_);
			  bitField0_ |= 0x00000800;
			}
		  }

		  public IList<EncryptionKeys> EncryptionKeysList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(encryptionKeys_);
			  }
		  }
		  public int EncryptionKeysCount
		  {
			  get
			  {
				return encryptionKeys_.Count;
			  }
		  }
		  public EncryptionKeys getEncryptionKeys(int index)
		  {
			return encryptionKeys_[index];
		  }
		  public Builder setEncryptionKeys(int index, EncryptionKeys value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureEncryptionKeysIsMutable();
			encryptionKeys_[index] = value;

			return this;
		  }
		  public Builder setEncryptionKeys(int index, EncryptionKeys.Builder builderForValue)
		  {
			ensureEncryptionKeysIsMutable();
			encryptionKeys_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addEncryptionKeys(EncryptionKeys value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureEncryptionKeysIsMutable();
			encryptionKeys_.Add(value);

			return this;
		  }
		  public Builder addEncryptionKeys(int index, EncryptionKeys value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureEncryptionKeysIsMutable();
			encryptionKeys_.Insert(index, value);

			return this;
		  }
		  public Builder addEncryptionKeys(EncryptionKeys.Builder builderForValue)
		  {
			ensureEncryptionKeysIsMutable();
			encryptionKeys_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addEncryptionKeys(int index, EncryptionKeys.Builder builderForValue)
		  {
			ensureEncryptionKeysIsMutable();
			encryptionKeys_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllEncryptionKeys<T1>(IEnumerable<T1> values) where T1 : EncryptionKeys
		  {
			ensureEncryptionKeysIsMutable();
			base.addAll(values, encryptionKeys_);

			return this;
		  }
		  public Builder clearEncryptionKeys()
		  {
			encryptionKeys_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000800);

			return this;
		  }
		  public Builder removeEncryptionKeys(int index)
		  {
			ensureEncryptionKeysIsMutable();
			encryptionKeys_.RemoveAt(index);

			return this;
		  }

		  // optional string encryption_algo = 14;
		  internal object encryptionAlgo_ = "";
		  public bool hasEncryptionAlgo()
		  {
			return ((bitField0_ & 0x00001000) == 0x00001000);
		  }
		  public string getEncryptionAlgo()
		  {
			object @ref = encryptionAlgo_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  encryptionAlgo_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setEncryptionAlgo(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00001000;
			encryptionAlgo_ = value;

			return this;
		  }
		  public Builder clearEncryptionAlgo()
		  {
			bitField0_ = (bitField0_ & ~0x00001000);
			encryptionAlgo_ = DefaultInstance.EncryptionAlgo;

			return this;
		  }
		  internal void setEncryptionAlgo(ByteString value)
		  {
			bitField0_ |= 0x00001000;
			encryptionAlgo_ = value;

		  }

		  // optional bytes encryption_param = 15;
		  internal ByteString encryptionParam_ = ByteString.Empty;
		  public bool hasEncryptionParam()
		  {
			return ((bitField0_ & 0x00002000) == 0x00002000);
		  }
		  public ByteString EncryptionParam
		  {
			  get
			  {
				return encryptionParam_;
			  }
		  }
		  public Builder setEncryptionParam(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00002000;
			encryptionParam_ = value;

			return this;
		  }
		  public Builder clearEncryptionParam()
		  {
			bitField0_ = (bitField0_ & ~0x00002000);
			encryptionParam_ = DefaultInstance.EncryptionParam;

			return this;
		  }

		  // optional bytes schema_version = 16;
		  internal ByteString schemaVersion_ = ByteString.Empty;
		  public bool hasSchemaVersion()
		  {
			return ((bitField0_ & 0x00004000) == 0x00004000);
		  }
		  public ByteString SchemaVersion
		  {
			  get
			  {
				return schemaVersion_;
			  }
		  }
		  public Builder setSchemaVersion(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00004000;
			schemaVersion_ = value;

			return this;
		  }
		  public Builder clearSchemaVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00004000);
			schemaVersion_ = DefaultInstance.SchemaVersion;

			return this;
		  }

		  // optional bool partition_key_b64_encoded = 17 [default = false];
		  internal bool partitionKeyB64Encoded_;
		  public bool hasPartitionKeyB64Encoded()
		  {
			return ((bitField0_ & 0x00008000) == 0x00008000);
		  }
		  public bool PartitionKeyB64Encoded
		  {
			  get
			  {
				return partitionKeyB64Encoded_;
			  }
		  }
		  public Builder setPartitionKeyB64Encoded(bool value)
		  {
			bitField0_ |= 0x00008000;
			partitionKeyB64Encoded_ = value;

			return this;
		  }
		  public Builder clearPartitionKeyB64Encoded()
		  {
			bitField0_ = (bitField0_ & ~0x00008000);
			partitionKeyB64Encoded_ = false;

			return this;
		  }

		  // optional bytes ordering_key = 18;
		  internal ByteString orderingKey_ = ByteString.Empty;
		  public bool hasOrderingKey()
		  {
			return ((bitField0_ & 0x00010000) == 0x00010000);
		  }
		  public ByteString OrderingKey
		  {
			  get
			  {
				return orderingKey_;
			  }
		  }
		  public Builder setOrderingKey(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00010000;
			orderingKey_ = value;

			return this;
		  }
		  public Builder clearOrderingKey()
		  {
			bitField0_ = (bitField0_ & ~0x00010000);
			orderingKey_ = DefaultInstance.OrderingKey;

			return this;
		  }

		  // optional int64 deliver_at_time = 19;
		  internal long deliverAtTime_;
		  public bool hasDeliverAtTime()
		  {
			return ((bitField0_ & 0x00020000) == 0x00020000);
		  }
		  public long DeliverAtTime
		  {
			  get
			  {
				return deliverAtTime_;
			  }
		  }
		  public Builder setDeliverAtTime(long value)
		  {
			bitField0_ |= 0x00020000;
			deliverAtTime_ = value;

			return this;
		  }
		  public Builder clearDeliverAtTime()
		  {
			bitField0_ = (bitField0_ & ~0x00020000);
			deliverAtTime_ = 0L;

			return this;
		  }

		  // optional int32 marker_type = 20;
		  internal int markerType_;
		  public bool hasMarkerType()
		  {
			return ((bitField0_ & 0x00040000) == 0x00040000);
		  }
		  public int MarkerType
		  {
			  get
			  {
				return markerType_;
			  }
		  }
		  public Builder setMarkerType(int value)
		  {
			bitField0_ |= 0x00040000;
			markerType_ = value;

			return this;
		  }
		  public Builder clearMarkerType()
		  {
			bitField0_ = (bitField0_ & ~0x00040000);
			markerType_ = 0;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 22 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00080000) == 0x00080000);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00080000;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00080000);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 23 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00100000) == 0x00100000);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00100000;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00100000);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional uint64 highest_sequence_id = 24 [default = 0];
		  internal long highestSequenceId_;
		  public bool hasHighestSequenceId()
		  {
			return ((bitField0_ & 0x00200000) == 0x00200000);
		  }
		  public long HighestSequenceId
		  {
			  get
			  {
				return highestSequenceId_;
			  }
		  }
		  public Builder setHighestSequenceId(long value)
		  {
			bitField0_ |= 0x00200000;
			highestSequenceId_ = value;

			return this;
		  }
		  public Builder clearHighestSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00200000);
			highestSequenceId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.MessageMetadata)
		}

		static MessageMetadata()
		{
		  defaultInstance = new MessageMetadata(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.MessageMetadata)
	  }

	  public interface SingleMessageMetadataOrBuilder : MessageLiteOrBuilder
	  {

		// repeated .pulsar.proto.KeyValue properties = 1;
		IList<KeyValue> PropertiesList {get;}
		KeyValue getProperties(int index);
		int PropertiesCount {get;}

		// optional string partition_key = 2;
		bool hasPartitionKey();
		string PartitionKey {get;}

		// required int32 payload_size = 3;
		bool hasPayloadSize();
		int PayloadSize {get;}

		// optional bool compacted_out = 4 [default = false];
		bool hasCompactedOut();
		bool CompactedOut {get;}

		// optional uint64 event_time = 5 [default = 0];
		bool hasEventTime();
		long EventTime {get;}

		// optional bool partition_key_b64_encoded = 6 [default = false];
		bool hasPartitionKeyB64Encoded();
		bool PartitionKeyB64Encoded {get;}

		// optional bytes ordering_key = 7;
		bool hasOrderingKey();
		ByteString OrderingKey {get;}

		// optional uint64 sequence_id = 8;
		bool hasSequenceId();
		long SequenceId {get;}
	  }
	  public sealed class SingleMessageMetadata : SingleMessageMetadataOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use SingleMessageMetadata.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal SingleMessageMetadata(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<SingleMessageMetadata> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<SingleMessageMetadata>
		 {
			 protected internal SingleMessageMetadata newObject(Handle handle)
			 {
			   return new SingleMessageMetadata(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal SingleMessageMetadata(bool noInit)
		{
		}

		internal static readonly SingleMessageMetadata defaultInstance;
		public static SingleMessageMetadata DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public SingleMessageMetadata DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// repeated .pulsar.proto.KeyValue properties = 1;
		public const int PROPERTIES_FIELD_NUMBER = 1;
		internal IList<KeyValue> properties_;
		public IList<KeyValue> PropertiesList
		{
			get
			{
			  return properties_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends KeyValueOrBuilder> getPropertiesOrBuilderList()
		public IList<KeyValueOrBuilder> PropertiesOrBuilderList
		{
			get
			{
			  return properties_;
			}
		}
		public int PropertiesCount
		{
			get
			{
			  return properties_.Count;
			}
		}
		public KeyValue getProperties(int index)
		{
		  return properties_[index];
		}
		public KeyValueOrBuilder getPropertiesOrBuilder(int index)
		{
		  return properties_[index];
		}

		// optional string partition_key = 2;
		public const int PARTITION_KEY_FIELD_NUMBER = 2;
		internal object partitionKey_;
		public bool hasPartitionKey()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string PartitionKey
		{
			get
			{
			  object @ref = partitionKey_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  partitionKey_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString PartitionKeyBytes
		{
			get
			{
			  object @ref = partitionKey_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				partitionKey_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required int32 payload_size = 3;
		public const int PAYLOAD_SIZE_FIELD_NUMBER = 3;
		internal int payloadSize_;
		public bool hasPayloadSize()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public int PayloadSize
		{
			get
			{
			  return payloadSize_;
			}
		}

		// optional bool compacted_out = 4 [default = false];
		public const int COMPACTED_OUT_FIELD_NUMBER = 4;
		internal bool compactedOut_;
		public bool hasCompactedOut()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public bool CompactedOut
		{
			get
			{
			  return compactedOut_;
			}
		}

		// optional uint64 event_time = 5 [default = 0];
		public const int EVENT_TIME_FIELD_NUMBER = 5;
		internal long eventTime_;
		public bool hasEventTime()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public long EventTime
		{
			get
			{
			  return eventTime_;
			}
		}

		// optional bool partition_key_b64_encoded = 6 [default = false];
		public const int PARTITION_KEY_B64_ENCODED_FIELD_NUMBER = 6;
		internal bool partitionKeyB64Encoded_;
		public bool hasPartitionKeyB64Encoded()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public bool PartitionKeyB64Encoded
		{
			get
			{
			  return partitionKeyB64Encoded_;
			}
		}

		// optional bytes ordering_key = 7;
		public const int ORDERING_KEY_FIELD_NUMBER = 7;
		internal ByteString orderingKey_;
		public bool hasOrderingKey()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public ByteString OrderingKey
		{
			get
			{
			  return orderingKey_;
			}
		}

		// optional uint64 sequence_id = 8;
		public const int SEQUENCE_ID_FIELD_NUMBER = 8;
		internal long sequenceId_;
		public bool hasSequenceId()
		{
		  return ((bitField0_ & 0x00000040) == 0x00000040);
		}
		public long SequenceId
		{
			get
			{
			  return sequenceId_;
			}
		}

		internal void initFields()
		{
		  properties_ = java.util.Collections.emptyList();
		  partitionKey_ = "";
		  payloadSize_ = 0;
		  compactedOut_ = false;
		  eventTime_ = 0L;
		  partitionKeyB64Encoded_ = false;
		  orderingKey_ = ByteString.Empty;
		  sequenceId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasPayloadSize())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < PropertiesCount; i++)
			  {
				if (!getProperties(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  for (int i = 0; i < properties_.Count; i++)
		  {
			output.WriteMessage(1, properties_[i]);
		  }
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(2, PartitionKeyBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteInt32(3, payloadSize_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteBool(4, compactedOut_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteUInt64(5, eventTime_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBool(6, partitionKeyB64Encoded_);
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.WriteBytes(7, orderingKey_);
		  }
		  if (((bitField0_ & 0x00000040) == 0x00000040))
		  {
			output.WriteUInt64(8, sequenceId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  for (int i = 0; i < properties_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(1, properties_[i]);
			  }
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(2, PartitionKeyBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeInt32Size(3, payloadSize_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeBoolSize(4, compactedOut_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.ComputeUInt64Size(eventTime_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBoolSize(6, partitionKeyB64Encoded_);
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.ComputeBytesSize(orderingKey_);
			  }
			  if (((bitField0_ & 0x00000040) == 0x00000040))
			  {
				size += CodedOutputStream.ComputeUInt64Size(sequenceId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}
		public static SingleMessageMetadata parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static SingleMessageMetadata parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static SingleMessageMetadata parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static SingleMessageMetadata parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseFrom(java.io.InputStream input) throws java.io.IOException
		public static SingleMessageMetadata parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static SingleMessageMetadata parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static SingleMessageMetadata parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static SingleMessageMetadata parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseFrom(CodedInputStream input) throws java.io.IOException
		public static SingleMessageMetadata parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static SingleMessageMetadata parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static SingleMessageMetadata parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(SingleMessageMetadata prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<SingleMessageMetadata, Builder>, SingleMessageMetadataOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using SingleMessageMetadata.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			properties_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000001);
			partitionKey_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			payloadSize_ = 0;
			bitField0_ = (bitField0_ & ~0x00000004);
			compactedOut_ = false;
			bitField0_ = (bitField0_ & ~0x00000008);
			eventTime_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000010);
			partitionKeyB64Encoded_ = false;
			bitField0_ = (bitField0_ & ~0x00000020);
			orderingKey_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00000040);
			sequenceId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000080);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public SingleMessageMetadata DefaultInstanceForType
		  {
			  get
			  {
				return SingleMessageMetadata.DefaultInstance;
			  }
		  }

		  public SingleMessageMetadata build()
		  {
			SingleMessageMetadata result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private SingleMessageMetadata buildParsed() throws InvalidProtocolBufferException
		  internal SingleMessageMetadata buildParsed()
		  {
			SingleMessageMetadata result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public SingleMessageMetadata buildPartial()
		  {
			SingleMessageMetadata result = SingleMessageMetadata.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((bitField0_ & 0x00000001) == 0x00000001))
			{
			  properties_ = java.util.Collections.unmodifiableList(properties_);
			  bitField0_ = (bitField0_ & ~0x00000001);
			}
			result.properties_ = properties_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.partitionKey_ = partitionKey_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.payloadSize_ = payloadSize_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.compactedOut_ = compactedOut_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.eventTime_ = eventTime_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.partitionKeyB64Encoded_ = partitionKeyB64Encoded_;
			if (((from_bitField0_ & 0x00000040) == 0x00000040))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.orderingKey_ = orderingKey_;
			if (((from_bitField0_ & 0x00000080) == 0x00000080))
			{
			  to_bitField0_ |= 0x00000040;
			}
			result.sequenceId_ = sequenceId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(SingleMessageMetadata other)
		  {
			if (other == SingleMessageMetadata.DefaultInstance)
			{
				return this;
			}
			if (other.properties_.Count > 0)
			{
			  if (properties_.Count == 0)
			  {
				properties_ = other.properties_;
				bitField0_ = (bitField0_ & ~0x00000001);
			  }
			  else
			  {
				ensurePropertiesIsMutable();
				((List<KeyValue>)properties_).AddRange(other.properties_);
			  }

			}
			if (other.hasPartitionKey())
			{
			  setPartitionKey(other.PartitionKey);
			}
			if (other.hasPayloadSize())
			{
			  PayloadSize = other.PayloadSize;
			}
			if (other.hasCompactedOut())
			{
			  CompactedOut = other.CompactedOut;
			}
			if (other.hasEventTime())
			{
			  EventTime = other.EventTime;
			}
			if (other.hasPartitionKeyB64Encoded())
			{
			  PartitionKeyB64Encoded = other.PartitionKeyB64Encoded;
			}
			if (other.hasOrderingKey())
			{
			  OrderingKey = other.OrderingKey;
			}
			if (other.hasSequenceId())
			{
			  SequenceId = other.SequenceId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasPayloadSize())
				{
    
				  return false;
				}
				for (int i = 0; i < PropertiesCount; i++)
				{
				  if (!getProperties(i).Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  KeyValue.Builder subBuilder = KeyValue.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addProperties(subBuilder.buildPartial());
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  partitionKey_ = input.readBytes();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  payloadSize_ = input.readInt32();
				  break;
				}
				case 32:
				{
				  bitField0_ |= 0x00000008;
				  compactedOut_ = input.readBool();
				  break;
				}
				case 40:
				{
				  bitField0_ |= 0x00000010;
				  eventTime_ = input.readUInt64();
				  break;
				}
				case 48:
				{
				  bitField0_ |= 0x00000020;
				  partitionKeyB64Encoded_ = input.readBool();
				  break;
				}
				case 58:
				{
				  bitField0_ |= 0x00000040;
				  orderingKey_ = input.readBytes();
				  break;
				}
				case 64:
				{
				  bitField0_ |= 0x00000080;
				  sequenceId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // repeated .pulsar.proto.KeyValue properties = 1;
		  internal IList<KeyValue> properties_ = java.util.Collections.emptyList();
		  internal void ensurePropertiesIsMutable()
		  {
			if (!((bitField0_ & 0x00000001) == 0x00000001))
			{
			  properties_ = new List<KeyValue>(properties_);
			  bitField0_ |= 0x00000001;
			}
		  }

		  public IList<KeyValue> PropertiesList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(properties_);
			  }
		  }
		  public int PropertiesCount
		  {
			  get
			  {
				return properties_.Count;
			  }
		  }
		  public KeyValue getProperties(int index)
		  {
			return properties_[index];
		  }
		  public Builder setProperties(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_[index] = value;

			return this;
		  }
		  public Builder setProperties(int index, KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addProperties(KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_.Add(value);

			return this;
		  }
		  public Builder addProperties(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_.Insert(index, value);

			return this;
		  }
		  public Builder addProperties(KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addProperties(int index, KeyValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllProperties<T1>(IEnumerable<T1> values) where T1 : KeyValue
		  {
			ensurePropertiesIsMutable();
			base.addAll(values, properties_);

			return this;
		  }
		  public Builder clearProperties()
		  {
			properties_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000001);

			return this;
		  }
		  public Builder removeProperties(int index)
		  {
			ensurePropertiesIsMutable();
			properties_.RemoveAt(index);

			return this;
		  }

		  // optional string partition_key = 2;
		  internal object partitionKey_ = "";
		  public bool hasPartitionKey()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getPartitionKey()
		  {
			object @ref = partitionKey_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  partitionKey_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setPartitionKey(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			partitionKey_ = value;

			return this;
		  }
		  public Builder clearPartitionKey()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			partitionKey_ = DefaultInstance.PartitionKey;

			return this;
		  }
		  internal void setPartitionKey(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			partitionKey_ = value;

		  }

		  // required int32 payload_size = 3;
		  internal int payloadSize_;
		  public bool hasPayloadSize()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public int PayloadSize
		  {
			  get
			  {
				return payloadSize_;
			  }
		  }
		  public Builder setPayloadSize(int value)
		  {
			bitField0_ |= 0x00000004;
			payloadSize_ = value;

			return this;
		  }
		  public Builder clearPayloadSize()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			payloadSize_ = 0;

			return this;
		  }

		  // optional bool compacted_out = 4 [default = false];
		  internal bool compactedOut_;
		  public bool hasCompactedOut()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public bool CompactedOut
		  {
			  get
			  {
				return compactedOut_;
			  }
		  }
		  public Builder setCompactedOut(bool value)
		  {
			bitField0_ |= 0x00000008;
			compactedOut_ = value;

			return this;
		  }
		  public Builder clearCompactedOut()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			compactedOut_ = false;

			return this;
		  }

		  // optional uint64 event_time = 5 [default = 0];
		  internal long eventTime_;
		  public bool hasEventTime()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public long EventTime
		  {
			  get
			  {
				return eventTime_;
			  }
		  }
		  public Builder setEventTime(long value)
		  {
			bitField0_ |= 0x00000010;
			eventTime_ = value;

			return this;
		  }
		  public Builder clearEventTime()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			eventTime_ = 0L;

			return this;
		  }

		  // optional bool partition_key_b64_encoded = 6 [default = false];
		  internal bool partitionKeyB64Encoded_;
		  public bool hasPartitionKeyB64Encoded()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public bool PartitionKeyB64Encoded
		  {
			  get
			  {
				return partitionKeyB64Encoded_;
			  }
		  }
		  public Builder setPartitionKeyB64Encoded(bool value)
		  {
			bitField0_ |= 0x00000020;
			partitionKeyB64Encoded_ = value;

			return this;
		  }
		  public Builder clearPartitionKeyB64Encoded()
		  {
			bitField0_ = (bitField0_ & ~0x00000020);
			partitionKeyB64Encoded_ = false;

			return this;
		  }

		  // optional bytes ordering_key = 7;
		  internal ByteString orderingKey_ = ByteString.Empty;
		  public bool hasOrderingKey()
		  {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		  }
		  public ByteString OrderingKey
		  {
			  get
			  {
				return orderingKey_;
			  }
		  }
		  public Builder setOrderingKey(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000040;
			orderingKey_ = value;

			return this;
		  }
		  public Builder clearOrderingKey()
		  {
			bitField0_ = (bitField0_ & ~0x00000040);
			orderingKey_ = DefaultInstance.OrderingKey;

			return this;
		  }

		  // optional uint64 sequence_id = 8;
		  internal long sequenceId_;
		  public bool hasSequenceId()
		  {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		  }
		  public long SequenceId
		  {
			  get
			  {
				return sequenceId_;
			  }
		  }
		  public Builder setSequenceId(long value)
		  {
			bitField0_ |= 0x00000080;
			sequenceId_ = value;

			return this;
		  }
		  public Builder clearSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00000080);
			sequenceId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.SingleMessageMetadata)
		}

		static SingleMessageMetadata()
		{
		  defaultInstance = new SingleMessageMetadata(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.SingleMessageMetadata)
	  }

	 
	 

	  public interface CommandConnectedOrBuilder : MessageLiteOrBuilder
	  {

		// required string server_version = 1;
		bool hasServerVersion();
		string ServerVersion {get;}

		// optional int32 protocol_version = 2 [default = 0];
		bool hasProtocolVersion();
		int ProtocolVersion {get;}

		// optional int32 max_message_size = 3;
		bool hasMaxMessageSize();
		int MaxMessageSize {get;}
	  }
	  public sealed class CommandConnected : CommandConnectedOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandConnected.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandConnected(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandConnected> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandConnected>
		 {
			 protected internal CommandConnected newObject(Handle handle)
			 {
			   return new CommandConnected(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandConnected(bool noInit)
		{
		}

		internal static readonly CommandConnected defaultInstance;
		public static CommandConnected DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandConnected DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string server_version = 1;
		public const int SERVER_VERSION_FIELD_NUMBER = 1;
		internal object serverVersion_;
		public bool hasServerVersion()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string ServerVersion
		{
			get
			{
			  object @ref = serverVersion_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  serverVersion_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ServerVersionBytes
		{
			get
			{
			  object @ref = serverVersion_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				serverVersion_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional int32 protocol_version = 2 [default = 0];
		public const int PROTOCOL_VERSION_FIELD_NUMBER = 2;
		internal int protocolVersion_;
		public bool hasProtocolVersion()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public int ProtocolVersion
		{
			get
			{
			  return protocolVersion_;
			}
		}

		// optional int32 max_message_size = 3;
		public const int MAX_MESSAGE_SIZE_FIELD_NUMBER = 3;
		internal int maxMessageSize_;
		public bool hasMaxMessageSize()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public int MaxMessageSize
		{
			get
			{
			  return maxMessageSize_;
			}
		}

		internal void initFields()
		{
		  serverVersion_ = "";
		  protocolVersion_ = 0;
		  maxMessageSize_ = 0;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasServerVersion())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, ServerVersionBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteInt32(2, protocolVersion_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteInt32(3, maxMessageSize_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, ServerVersionBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeInt32Size(2, protocolVersion_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeInt32Size(3, maxMessageSize_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandConnected parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandConnected parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandConnected parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandConnected parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandConnected parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandConnected parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandConnected parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandConnected parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandConnected parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConnected parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandConnected parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandConnected prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandConnected, Builder>, CommandConnectedOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandConnected.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			serverVersion_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			protocolVersion_ = 0;
			bitField0_ = (bitField0_ & ~0x00000002);
			maxMessageSize_ = 0;
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandConnected DefaultInstanceForType
		  {
			  get
			  {
				return CommandConnected.DefaultInstance;
			  }
		  }

		  public CommandConnected build()
		  {
			CommandConnected result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandConnected buildParsed() throws InvalidProtocolBufferException
		  internal CommandConnected buildParsed()
		  {
			CommandConnected result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandConnected buildPartial()
		  {
			CommandConnected result = CommandConnected.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.serverVersion_ = serverVersion_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.protocolVersion_ = protocolVersion_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.maxMessageSize_ = maxMessageSize_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandConnected other)
		  {
			if (other == CommandConnected.DefaultInstance)
			{
				return this;
			}
			if (other.hasServerVersion())
			{
			  setServerVersion(other.ServerVersion);
			}
			if (other.hasProtocolVersion())
			{
			  ProtocolVersion = other.ProtocolVersion;
			}
			if (other.hasMaxMessageSize())
			{
			  MaxMessageSize = other.MaxMessageSize;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasServerVersion())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  serverVersion_ = input.readBytes();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  protocolVersion_ = input.readInt32();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  maxMessageSize_ = input.readInt32();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string server_version = 1;
		  internal object serverVersion_ = "";
		  public bool hasServerVersion()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getServerVersion()
		  {
			object @ref = serverVersion_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  serverVersion_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setServerVersion(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			serverVersion_ = value;

			return this;
		  }
		  public Builder clearServerVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			serverVersion_ = DefaultInstance.ServerVersion;

			return this;
		  }
		  internal void setServerVersion(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			serverVersion_ = value;

		  }

		  // optional int32 protocol_version = 2 [default = 0];
		  internal int protocolVersion_;
		  public bool hasProtocolVersion()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public int ProtocolVersion
		  {
			  get
			  {
				return protocolVersion_;
			  }
		  }
		  public Builder setProtocolVersion(int value)
		  {
			bitField0_ |= 0x00000002;
			protocolVersion_ = value;

			return this;
		  }
		  public Builder clearProtocolVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			protocolVersion_ = 0;

			return this;
		  }

		  // optional int32 max_message_size = 3;
		  internal int maxMessageSize_;
		  public bool hasMaxMessageSize()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public int MaxMessageSize
		  {
			  get
			  {
				return maxMessageSize_;
			  }
		  }
		  public Builder setMaxMessageSize(int value)
		  {
			bitField0_ |= 0x00000004;
			maxMessageSize_ = value;

			return this;
		  }
		  public Builder clearMaxMessageSize()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			maxMessageSize_ = 0;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandConnected)
		}

		static CommandConnected()
		{
		  defaultInstance = new CommandConnected(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandConnected)
	  }

	  public interface CommandAuthResponseOrBuilder : MessageLiteOrBuilder
	  {

		// optional string client_version = 1;
		bool hasClientVersion();
		string ClientVersion {get;}

		// optional .pulsar.proto.AuthData response = 2;
		bool hasResponse();
		AuthData Response {get;}

		// optional int32 protocol_version = 3 [default = 0];
		bool hasProtocolVersion();
		int ProtocolVersion {get;}
	  }
	  public sealed class CommandAuthResponse : CommandAuthResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandAuthResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandAuthResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandAuthResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandAuthResponse>
		 {
			 protected internal CommandAuthResponse newObject(Handle handle)
			 {
			   return new CommandAuthResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandAuthResponse(bool noInit)
		{
		}

		internal static readonly CommandAuthResponse defaultInstance;
		public static CommandAuthResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandAuthResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// optional string client_version = 1;
		public const int CLIENT_VERSION_FIELD_NUMBER = 1;
		internal object clientVersion_;
		public bool hasClientVersion()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string ClientVersion
		{
			get
			{
			  object @ref = clientVersion_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  clientVersion_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ClientVersionBytes
		{
			get
			{
			  object @ref = clientVersion_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				clientVersion_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional .pulsar.proto.AuthData response = 2;
		public const int RESPONSE_FIELD_NUMBER = 2;
		internal AuthData response_;
		public bool hasResponse()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public AuthData Response
		{
			get
			{
			  return response_;
			}
		}

		// optional int32 protocol_version = 3 [default = 0];
		public const int PROTOCOL_VERSION_FIELD_NUMBER = 3;
		internal int protocolVersion_;
		public bool hasProtocolVersion()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public int ProtocolVersion
		{
			get
			{
			  return protocolVersion_;
			}
		}

		internal void initFields()
		{
		  clientVersion_ = "";
		  response_ = AuthData.DefaultInstance;
		  protocolVersion_ = 0;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, ClientVersionBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteMessage(2, response_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteInt32(3, protocolVersion_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, ClientVersionBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeMessageSize(2, response_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeInt32Size(3, protocolVersion_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandAuthResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAuthResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandAuthResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAuthResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAuthResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAuthResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAuthResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAuthResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandAuthResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAuthResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandAuthResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandAuthResponse, Builder>, CommandAuthResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandAuthResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			clientVersion_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			response_ = AuthData.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000002);
			protocolVersion_ = 0;
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandAuthResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandAuthResponse.DefaultInstance;
			  }
		  }

		  public CommandAuthResponse build()
		  {
			CommandAuthResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandAuthResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandAuthResponse buildParsed()
		  {
			CommandAuthResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandAuthResponse buildPartial()
		  {
			CommandAuthResponse result = CommandAuthResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.clientVersion_ = clientVersion_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.response_ = response_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.protocolVersion_ = protocolVersion_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandAuthResponse other)
		  {
			if (other == CommandAuthResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasClientVersion())
			{
			  setClientVersion(other.ClientVersion);
			}
			if (other.hasResponse())
			{
			  mergeResponse(other.Response);
			}
			if (other.hasProtocolVersion())
			{
			  ProtocolVersion = other.ProtocolVersion;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  clientVersion_ = input.readBytes();
				  break;
				}
				case 18:
				{
				  AuthData.Builder subBuilder = AuthData.newBuilder();
				  if (hasResponse())
				  {
					subBuilder.mergeFrom(getResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  protocolVersion_ = input.readInt32();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // optional string client_version = 1;
		  internal object clientVersion_ = "";
		  public bool hasClientVersion()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getClientVersion()
		  {
			object @ref = clientVersion_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  clientVersion_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setClientVersion(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			clientVersion_ = value;

			return this;
		  }
		  public Builder clearClientVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			clientVersion_ = DefaultInstance.ClientVersion;

			return this;
		  }
		  internal void setClientVersion(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			clientVersion_ = value;

		  }

		  // optional .pulsar.proto.AuthData response = 2;
		  internal AuthData response_ = AuthData.DefaultInstance;
		  public bool hasResponse()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public AuthData getResponse()
		  {
			return response_;
		  }
		  public Builder setResponse(AuthData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			response_ = value;

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder setResponse(AuthData.Builder builderForValue)
		  {
			response_ = builderForValue.build();

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder mergeResponse(AuthData value)
		  {
			if (((bitField0_ & 0x00000002) == 0x00000002) && response_ != AuthData.DefaultInstance)
			{
			  response_ = AuthData.newBuilder(response_).mergeFrom(value).buildPartial();
			}
			else
			{
			  response_ = value;
			}

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder clearResponse()
		  {
			response_ = AuthData.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  // optional int32 protocol_version = 3 [default = 0];
		  internal int protocolVersion_;
		  public bool hasProtocolVersion()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public int ProtocolVersion
		  {
			  get
			  {
				return protocolVersion_;
			  }
		  }
		  public Builder setProtocolVersion(int value)
		  {
			bitField0_ |= 0x00000004;
			protocolVersion_ = value;

			return this;
		  }
		  public Builder clearProtocolVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			protocolVersion_ = 0;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandAuthResponse)
		}

		static CommandAuthResponse()
		{
		  defaultInstance = new CommandAuthResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandAuthResponse)
	  }

	  public interface CommandAuthChallengeOrBuilder : MessageLiteOrBuilder
	  {

		// optional string server_version = 1;
		bool hasServerVersion();
		string ServerVersion {get;}

		// optional .pulsar.proto.AuthData challenge = 2;
		bool hasChallenge();
		AuthData Challenge {get;}

		// optional int32 protocol_version = 3 [default = 0];
		bool hasProtocolVersion();
		int ProtocolVersion {get;}
	  }
	  public sealed class CommandAuthChallenge : CommandAuthChallengeOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandAuthChallenge.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandAuthChallenge(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandAuthChallenge> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandAuthChallenge>
		 {
			 protected internal CommandAuthChallenge newObject(Handle handle)
			 {
			   return new CommandAuthChallenge(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandAuthChallenge(bool noInit)
		{
		}

		internal static readonly CommandAuthChallenge defaultInstance;
		public static CommandAuthChallenge DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandAuthChallenge DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// optional string server_version = 1;
		public const int SERVER_VERSION_FIELD_NUMBER = 1;
		internal object serverVersion_;
		public bool hasServerVersion()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string ServerVersion
		{
			get
			{
			  object @ref = serverVersion_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  serverVersion_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ServerVersionBytes
		{
			get
			{
			  object @ref = serverVersion_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				serverVersion_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional .pulsar.proto.AuthData challenge = 2;
		public const int CHALLENGE_FIELD_NUMBER = 2;
		internal AuthData challenge_;
		public bool hasChallenge()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public AuthData Challenge
		{
			get
			{
			  return challenge_;
			}
		}

		// optional int32 protocol_version = 3 [default = 0];
		public const int PROTOCOL_VERSION_FIELD_NUMBER = 3;
		internal int protocolVersion_;
		public bool hasProtocolVersion()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public int ProtocolVersion
		{
			get
			{
			  return protocolVersion_;
			}
		}

		internal void initFields()
		{
		  serverVersion_ = "";
		  challenge_ = AuthData.DefaultInstance;
		  protocolVersion_ = 0;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, ServerVersionBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteMessage(2, challenge_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteInt32(3, protocolVersion_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, ServerVersionBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeMessageSize(2, challenge_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeInt32Size(3, protocolVersion_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandAuthChallenge parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAuthChallenge parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandAuthChallenge parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAuthChallenge parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAuthChallenge parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAuthChallenge parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAuthChallenge parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAuthChallenge parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandAuthChallenge parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAuthChallenge parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAuthChallenge parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandAuthChallenge prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandAuthChallenge, Builder>, CommandAuthChallengeOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandAuthChallenge.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			serverVersion_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			challenge_ = AuthData.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000002);
			protocolVersion_ = 0;
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandAuthChallenge DefaultInstanceForType
		  {
			  get
			  {
				return CommandAuthChallenge.DefaultInstance;
			  }
		  }

		  public CommandAuthChallenge build()
		  {
			CommandAuthChallenge result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandAuthChallenge buildParsed() throws InvalidProtocolBufferException
		  internal CommandAuthChallenge buildParsed()
		  {
			CommandAuthChallenge result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandAuthChallenge buildPartial()
		  {
			CommandAuthChallenge result = CommandAuthChallenge.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.serverVersion_ = serverVersion_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.challenge_ = challenge_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.protocolVersion_ = protocolVersion_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandAuthChallenge other)
		  {
			if (other == CommandAuthChallenge.DefaultInstance)
			{
				return this;
			}
			if (other.hasServerVersion())
			{
			  setServerVersion(other.ServerVersion);
			}
			if (other.hasChallenge())
			{
			  mergeChallenge(other.Challenge);
			}
			if (other.hasProtocolVersion())
			{
			  ProtocolVersion = other.ProtocolVersion;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  serverVersion_ = input.readBytes();
				  break;
				}
				case 18:
				{
				  AuthData.Builder subBuilder = AuthData.newBuilder();
				  if (hasChallenge())
				  {
					subBuilder.mergeFrom(getChallenge());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setChallenge(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  protocolVersion_ = input.readInt32();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // optional string server_version = 1;
		  internal object serverVersion_ = "";
		  public bool hasServerVersion()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getServerVersion()
		  {
			object @ref = serverVersion_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  serverVersion_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setServerVersion(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			serverVersion_ = value;

			return this;
		  }
		  public Builder clearServerVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			serverVersion_ = DefaultInstance.ServerVersion;

			return this;
		  }
		  internal void setServerVersion(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			serverVersion_ = value;

		  }

		  // optional .pulsar.proto.AuthData challenge = 2;
		  internal AuthData challenge_ = AuthData.DefaultInstance;
		  public bool hasChallenge()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public AuthData getChallenge()
		  {
			return challenge_;
		  }
		  public Builder setChallenge(AuthData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			challenge_ = value;

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder setChallenge(AuthData.Builder builderForValue)
		  {
			challenge_ = builderForValue.build();

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder mergeChallenge(AuthData value)
		  {
			if (((bitField0_ & 0x00000002) == 0x00000002) && challenge_ != AuthData.DefaultInstance)
			{
			  challenge_ = AuthData.newBuilder(challenge_).mergeFrom(value).buildPartial();
			}
			else
			{
			  challenge_ = value;
			}

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder clearChallenge()
		  {
			challenge_ = AuthData.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  // optional int32 protocol_version = 3 [default = 0];
		  internal int protocolVersion_;
		  public bool hasProtocolVersion()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public int ProtocolVersion
		  {
			  get
			  {
				return protocolVersion_;
			  }
		  }
		  public Builder setProtocolVersion(int value)
		  {
			bitField0_ |= 0x00000004;
			protocolVersion_ = value;

			return this;
		  }
		  public Builder clearProtocolVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			protocolVersion_ = 0;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandAuthChallenge)
		}

		static CommandAuthChallenge()
		{
		  defaultInstance = new CommandAuthChallenge(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandAuthChallenge)
	  }

	  public interface AuthDataOrBuilder : MessageLiteOrBuilder
	  {

		// optional string auth_method_name = 1;
		bool hasAuthMethodName();
		string AuthMethodName {get;}

		// optional bytes auth_data = 2;
		bool hasAuthData();
		ByteString AuthData {get;}
	  }
	  public sealed class AuthData : AuthDataOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use AuthData.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal AuthData(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<AuthData> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<AuthData>
		 {
			 protected internal AuthData newObject(Handle handle)
			 {
			   return new AuthData(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal AuthData(bool noInit)
		{
		}

		internal static readonly AuthData defaultInstance;
		public static AuthData DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public AuthData DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// optional string auth_method_name = 1;
		public const int AUTH_METHOD_NAME_FIELD_NUMBER = 1;
		internal object authMethodName_;
		public bool hasAuthMethodName()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string AuthMethodName
		{
			get
			{
			  object @ref = authMethodName_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  authMethodName_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString AuthMethodNameBytes
		{
			get
			{
			  object @ref = authMethodName_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				authMethodName_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional bytes auth_data = 2;
		public const int AUTH_DATA_FIELD_NUMBER = 2;
		internal ByteString authData_;
		public bool hasAuthData()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public ByteString getAuthData()
		{
		  return authData_;
		}

		internal void initFields()
		{
		  authMethodName_ = "";
		  authData_ = ByteString.Empty;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, AuthMethodNameBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, authData_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, AuthMethodNameBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, authData_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static AuthData parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static AuthData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static AuthData parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static AuthData parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseFrom(java.io.InputStream input) throws java.io.IOException
		public static AuthData parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static AuthData parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static AuthData parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static AuthData parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseFrom(CodedInputStream input) throws java.io.IOException
		public static AuthData parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static AuthData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static AuthData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(AuthData prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<AuthData, Builder>, AuthDataOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using AuthData.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			authMethodName_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			authData_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public AuthData DefaultInstanceForType
		  {
			  get
			  {
				return AuthData.DefaultInstance;
			  }
		  }

		  public AuthData build()
		  {
			AuthData result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private AuthData buildParsed() throws InvalidProtocolBufferException
		  internal AuthData buildParsed()
		  {
			AuthData result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public AuthData buildPartial()
		  {
			AuthData result = AuthData.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.authMethodName_ = authMethodName_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.authData_ = authData_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(AuthData other)
		  {
			if (other == AuthData.DefaultInstance)
			{
				return this;
			}
			if (other.hasAuthMethodName())
			{
			  setAuthMethodName(other.AuthMethodName);
			}
			if (other.hasAuthData())
			{
			  AuthData = other.getAuthData();
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  authMethodName_ = input.readBytes();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  authData_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // optional string auth_method_name = 1;
		  internal object authMethodName_ = "";
		  public bool hasAuthMethodName()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getAuthMethodName()
		  {
			object @ref = authMethodName_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  authMethodName_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setAuthMethodName(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			authMethodName_ = value;

			return this;
		  }
		  public Builder clearAuthMethodName()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			authMethodName_ = DefaultInstance.AuthMethodName;

			return this;
		  }
		  internal void setAuthMethodName(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			authMethodName_ = value;

		  }

		  // optional bytes auth_data = 2;
		  internal ByteString authData_ = ByteString.Empty;
		  public bool hasAuthData()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public ByteString AuthData
		  {
			  get
			  {
				return authData_;
			  }
		  }
		  public Builder setAuthData(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			authData_ = value;

			return this;
		  }
		  public Builder clearAuthData()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			authData_ = DefaultInstance.AuthData;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.AuthData)
		}

		static AuthData()
		{
		  defaultInstance = new AuthData(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.AuthData)
	  }

	  public interface KeySharedMetaOrBuilder : MessageLiteOrBuilder
	  {

		// required .pulsar.proto.KeySharedMode keySharedMode = 1;
		bool hasKeySharedMode();
		KeySharedMode KeySharedMode {get;}

		// repeated .pulsar.proto.IntRange hashRanges = 3;
		IList<IntRange> HashRangesList {get;}
		IntRange getHashRanges(int index);
		int HashRangesCount {get;}
	  }
	  public sealed class KeySharedMeta : KeySharedMetaOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use KeySharedMeta.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal KeySharedMeta(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<KeySharedMeta> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<KeySharedMeta>
		 {
			 protected internal KeySharedMeta newObject(Handle handle)
			 {
			   return new KeySharedMeta(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal KeySharedMeta(bool noInit)
		{
		}

		internal static readonly KeySharedMeta defaultInstance;
		public static KeySharedMeta DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public KeySharedMeta DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required .pulsar.proto.KeySharedMode keySharedMode = 1;
		public const int KEYSHAREDMODE_FIELD_NUMBER = 1;
		internal KeySharedMode keySharedMode_;
		public bool hasKeySharedMode()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public KeySharedMode KeySharedMode
		{
			get
			{
			  return keySharedMode_;
			}
		}

		// repeated .pulsar.proto.IntRange hashRanges = 3;
		public const int HASHRANGES_FIELD_NUMBER = 3;
		internal IList<IntRange> hashRanges_;
		public IList<IntRange> HashRangesList
		{
			get
			{
			  return hashRanges_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends IntRangeOrBuilder> getHashRangesOrBuilderList()
		public IList<IntRangeOrBuilder> HashRangesOrBuilderList
		{
			get
			{
			  return hashRanges_;
			}
		}
		public int HashRangesCount
		{
			get
			{
			  return hashRanges_.Count;
			}
		}
		public IntRange getHashRanges(int index)
		{
		  return hashRanges_[index];
		}
		public IntRangeOrBuilder getHashRangesOrBuilder(int index)
		{
		  return hashRanges_[index];
		}

		internal void initFields()
		{
		  keySharedMode_ = KeySharedMode.AUTO_SPLIT;
		  hashRanges_ = java.util.Collections.emptyList();
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasKeySharedMode())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < HashRangesCount; i++)
			  {
				if (!getHashRanges(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.writeEnum(1, keySharedMode_.Number);
		  }
		  for (int i = 0; i < hashRanges_.Count; i++)
		  {
			output.WriteMessage(3, hashRanges_[i]);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeEnumSize(1, keySharedMode_.Number);
			  }
			  for (int i = 0; i < hashRanges_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(3, hashRanges_[i]);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static KeySharedMeta parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static KeySharedMeta parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static KeySharedMeta parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static KeySharedMeta parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseFrom(java.io.InputStream input) throws java.io.IOException
		public static KeySharedMeta parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeySharedMeta parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static KeySharedMeta parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeySharedMeta parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseFrom(CodedInputStream input) throws java.io.IOException
		public static KeySharedMeta parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static KeySharedMeta parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static KeySharedMeta parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(KeySharedMeta prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<KeySharedMeta, Builder>, KeySharedMetaOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using KeySharedMeta.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			keySharedMode_ = KeySharedMode.AUTO_SPLIT;
			bitField0_ = (bitField0_ & ~0x00000001);
			hashRanges_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public KeySharedMeta DefaultInstanceForType
		  {
			  get
			  {
				return KeySharedMeta.DefaultInstance;
			  }
		  }

		  public KeySharedMeta build()
		  {
			KeySharedMeta result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private KeySharedMeta buildParsed() throws InvalidProtocolBufferException
		  internal KeySharedMeta buildParsed()
		  {
			KeySharedMeta result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public KeySharedMeta buildPartial()
		  {
			KeySharedMeta result = KeySharedMeta.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.keySharedMode_ = keySharedMode_;
			if (((bitField0_ & 0x00000002) == 0x00000002))
			{
			  hashRanges_ = java.util.Collections.unmodifiableList(hashRanges_);
			  bitField0_ = (bitField0_ & ~0x00000002);
			}
			result.hashRanges_ = hashRanges_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(KeySharedMeta other)
		  {
			if (other == KeySharedMeta.DefaultInstance)
			{
				return this;
			}
			if (other.hasKeySharedMode())
			{
			  KeySharedMode = other.KeySharedMode;
			}
			if (other.hashRanges_.Count > 0)
			{
			  if (hashRanges_.Count == 0)
			  {
				hashRanges_ = other.hashRanges_;
				bitField0_ = (bitField0_ & ~0x00000002);
			  }
			  else
			  {
				ensureHashRangesIsMutable();
				((List<IntRange>)hashRanges_).AddRange(other.hashRanges_);
			  }

			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasKeySharedMode())
				{
    
				  return false;
				}
				for (int i = 0; i < HashRangesCount; i++)
				{
				  if (!getHashRanges(i).Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  int rawValue = input.readEnum();
				  KeySharedMode value = KeySharedMode.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000001;
					keySharedMode_ = value;
				  }
				  break;
				}
				case 26:
				{
				  IntRange.Builder subBuilder = IntRange.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addHashRanges(subBuilder.buildPartial());
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required .pulsar.proto.KeySharedMode keySharedMode = 1;
		  internal KeySharedMode keySharedMode_ = KeySharedMode.AUTO_SPLIT;
		  public bool hasKeySharedMode()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public KeySharedMode KeySharedMode
		  {
			  get
			  {
				return keySharedMode_;
			  }
		  }
		  public Builder setKeySharedMode(KeySharedMode value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000001;
			keySharedMode_ = value;

			return this;
		  }
		  public Builder clearKeySharedMode()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			keySharedMode_ = KeySharedMode.AUTO_SPLIT;

			return this;
		  }

		  // repeated .pulsar.proto.IntRange hashRanges = 3;
		  internal IList<IntRange> hashRanges_ = java.util.Collections.emptyList();
		  internal void ensureHashRangesIsMutable()
		  {
			if (!((bitField0_ & 0x00000002) == 0x00000002))
			{
			  hashRanges_ = new List<IntRange>(hashRanges_);
			  bitField0_ |= 0x00000002;
			}
		  }

		  public IList<IntRange> HashRangesList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(hashRanges_);
			  }
		  }
		  public int HashRangesCount
		  {
			  get
			  {
				return hashRanges_.Count;
			  }
		  }
		  public IntRange getHashRanges(int index)
		  {
			return hashRanges_[index];
		  }
		  public Builder setHashRanges(int index, IntRange value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureHashRangesIsMutable();
			hashRanges_[index] = value;

			return this;
		  }
		  public Builder setHashRanges(int index, IntRange.Builder builderForValue)
		  {
			ensureHashRangesIsMutable();
			hashRanges_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addHashRanges(IntRange value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureHashRangesIsMutable();
			hashRanges_.Add(value);

			return this;
		  }
		  public Builder addHashRanges(int index, IntRange value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureHashRangesIsMutable();
			hashRanges_.Insert(index, value);

			return this;
		  }
		  public Builder addHashRanges(IntRange.Builder builderForValue)
		  {
			ensureHashRangesIsMutable();
			hashRanges_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addHashRanges(int index, IntRange.Builder builderForValue)
		  {
			ensureHashRangesIsMutable();
			hashRanges_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllHashRanges<T1>(IEnumerable<T1> values) where T1 : IntRange
		  {
			ensureHashRangesIsMutable();
			base.addAll(values, hashRanges_);

			return this;
		  }
		  public Builder clearHashRanges()
		  {
			hashRanges_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000002);

			return this;
		  }
		  public Builder removeHashRanges(int index)
		  {
			ensureHashRangesIsMutable();
			hashRanges_.RemoveAt(index);

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.KeySharedMeta)
		}

		static KeySharedMeta()
		{
		  defaultInstance = new KeySharedMeta(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.KeySharedMeta)
	  }

	  public interface CommandSubscribeOrBuilder : MessageLiteOrBuilder
	  {

		// required string topic = 1;
		bool hasTopic();
		string Topic {get;}

		// required string subscription = 2;
		bool hasSubscription();
		string Subscription {get;}

		// required .pulsar.proto.CommandSubscribe.SubType subType = 3;
		bool hasSubType();
		CommandSubscribe.SubType SubType {get;}

		// required uint64 consumer_id = 4;
		bool hasConsumerId();
		long ConsumerId {get;}

		// required uint64 request_id = 5;
		bool hasRequestId();
		long RequestId {get;}

		// optional string consumer_name = 6;
		bool hasConsumerName();
		string ConsumerName {get;}

		// optional int32 priority_level = 7;
		bool hasPriorityLevel();
		int PriorityLevel {get;}

		// optional bool durable = 8 [default = true];
		bool hasDurable();
		bool Durable {get;}

		// optional .pulsar.proto.MessageIdData start_message_id = 9;
		bool hasStartMessageId();
		MessageIdData StartMessageId {get;}

		// repeated .pulsar.proto.KeyValue metadata = 10;
		IList<KeyValue> MetadataList {get;}
		KeyValue getMetadata(int index);
		int MetadataCount {get;}

		// optional bool read_compacted = 11;
		bool hasReadCompacted();
		bool ReadCompacted {get;}

		// optional .pulsar.proto.Schema schema = 12;
		bool hasSchema();
		Schema Schema {get;}

		// optional .pulsar.proto.CommandSubscribe.InitialPosition initialPosition = 13 [default = Latest];
		bool hasInitialPosition();
		CommandSubscribe.InitialPosition InitialPosition {get;}

		// optional bool replicate_subscription_state = 14;
		bool hasReplicateSubscriptionState();
		bool ReplicateSubscriptionState {get;}

		// optional bool force_topic_creation = 15 [default = true];
		bool hasForceTopicCreation();
		bool ForceTopicCreation {get;}

		// optional uint64 start_message_rollback_duration_sec = 16 [default = 0];
		bool hasStartMessageRollbackDurationSec();
		long StartMessageRollbackDurationSec {get;}

		// optional .pulsar.proto.KeySharedMeta keySharedMeta = 17;
		bool hasKeySharedMeta();
		KeySharedMeta KeySharedMeta {get;}
	  }
	  public sealed class CommandSubscribe : CommandSubscribeOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandSubscribe.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandSubscribe(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandSubscribe> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandSubscribe>
		 {
			 protected internal CommandSubscribe newObject(Handle handle)
			 {
			   return new CommandSubscribe(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandSubscribe(bool noInit)
		{
		}

		internal static readonly CommandSubscribe defaultInstance;
		public static CommandSubscribe DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandSubscribe DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		public sealed class SubType : Internal.EnumLite
		{
		  public static readonly SubType Exclusive = new SubType("Exclusive", InnerEnum.Exclusive, 0, 0);
		  public static readonly SubType Shared = new SubType("Shared", InnerEnum.Shared, 1, 1);
		  public static readonly SubType Failover = new SubType("Failover", InnerEnum.Failover, 2, 2);
		  public static readonly SubType Key_Shared = new SubType("Key_Shared", InnerEnum.Key_Shared, 3, 3);

		  private static readonly IList<SubType> valueList = new List<SubType>();

		  static SubType()
		  {
			  valueList.Add(Exclusive);
			  valueList.Add(Shared);
			  valueList.Add(Failover);
			  valueList.Add(Key_Shared);
		  }

		  public enum InnerEnum
		  {
			  Exclusive,
			  Shared,
			  Failover,
			  Key_Shared
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int Exclusive_VALUE = 0;
		  public const int Shared_VALUE = 1;
		  public const int Failover_VALUE = 2;
		  public const int Key_Shared_VALUE = 3;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static SubType valueOf(int value)
		  {
			switch (value)
			{
			  case 0:
				  return Exclusive;
			  case 1:
				  return Shared;
			  case 2:
				  return Failover;
			  case 3:
				  return Key_Shared;
			  default:
				  return null;
			}
		  }

		  public static IList<SubType> internalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<SubType> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal SubType(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<SubType>
	//	  {
	//		  public SubType findValueByNumber(int number)
	//		  {
	//			return SubType.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.CommandSubscribe.SubType)

			public static IList<SubType> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		public sealed class InitialPosition : Internal.EnumLite
		{
		  public static readonly InitialPosition Latest = new InitialPosition("Latest", InnerEnum.Latest, 0, 0);
		  public static readonly InitialPosition Earliest = new InitialPosition("Earliest", InnerEnum.Earliest, 1, 1);

		  private static readonly IList<InitialPosition> valueList = new List<InitialPosition>();

		  static InitialPosition()
		  {
			  valueList.Add(Latest);
			  valueList.Add(Earliest);
		  }

		  public enum InnerEnum
		  {
			  Latest,
			  Earliest
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int Latest_VALUE = 0;
		  public const int Earliest_VALUE = 1;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static InitialPosition valueOf(int value)
		  {
			switch (value)
			{
			  case 0:
				  return Latest;
			  case 1:
				  return Earliest;
			  default:
				  return null;
			}
		  }

		  public static IList<InitialPosition> internalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<InitialPosition> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal InitialPosition(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<InitialPosition>
	//	  {
	//		  public InitialPosition findValueByNumber(int number)
	//		  {
	//			return InitialPosition.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.CommandSubscribe.InitialPosition)

			public static IList<InitialPosition> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		internal int bitField0_;
		// required string topic = 1;
		public const int TOPIC_FIELD_NUMBER = 1;
		internal object topic_;
		public bool hasTopic()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Topic
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  topic_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TopicBytes
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				topic_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required string subscription = 2;
		public const int SUBSCRIPTION_FIELD_NUMBER = 2;
		internal object subscription_;
		public bool hasSubscription()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public string Subscription
		{
			get
			{
			  object @ref = subscription_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  subscription_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString SubscriptionBytes
		{
			get
			{
			  object @ref = subscription_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				subscription_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required .pulsar.proto.CommandSubscribe.SubType subType = 3;
		public const int SUBTYPE_FIELD_NUMBER = 3;
		internal CommandSubscribe.SubType subType_;
		public bool hasSubType()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public CommandSubscribe.SubType getSubType()
		{
		  return subType_;
		}

		// required uint64 consumer_id = 4;
		public const int CONSUMER_ID_FIELD_NUMBER = 4;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// required uint64 request_id = 5;
		public const int REQUEST_ID_FIELD_NUMBER = 5;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional string consumer_name = 6;
		public const int CONSUMER_NAME_FIELD_NUMBER = 6;
		internal object consumerName_;
		public bool hasConsumerName()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public string ConsumerName
		{
			get
			{
			  object @ref = consumerName_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  consumerName_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ConsumerNameBytes
		{
			get
			{
			  object @ref = consumerName_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				consumerName_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional int32 priority_level = 7;
		public const int PRIORITY_LEVEL_FIELD_NUMBER = 7;
		internal int priorityLevel_;
		public bool hasPriorityLevel()
		{
		  return ((bitField0_ & 0x00000040) == 0x00000040);
		}
		public int PriorityLevel
		{
			get
			{
			  return priorityLevel_;
			}
		}

		// optional bool durable = 8 [default = true];
		public const int DURABLE_FIELD_NUMBER = 8;
		internal bool durable_;
		public bool hasDurable()
		{
		  return ((bitField0_ & 0x00000080) == 0x00000080);
		}
		public bool Durable
		{
			get
			{
			  return durable_;
			}
		}

		// optional .pulsar.proto.MessageIdData start_message_id = 9;
		public const int START_MESSAGE_ID_FIELD_NUMBER = 9;
		internal MessageIdData startMessageId_;
		public bool hasStartMessageId()
		{
		  return ((bitField0_ & 0x00000100) == 0x00000100);
		}
		public MessageIdData StartMessageId
		{
			get
			{
			  return startMessageId_;
			}
		}

		// repeated .pulsar.proto.KeyValue metadata = 10;
		public const int METADATA_FIELD_NUMBER = 10;
		internal IList<KeyValue> metadata_;
		public IList<KeyValue> MetadataList
		{
			get
			{
			  return metadata_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends KeyValueOrBuilder> getMetadataOrBuilderList()
		public IList<KeyValueOrBuilder> MetadataOrBuilderList
		{
			get
			{
			  return metadata_;
			}
		}
		public int MetadataCount
		{
			get
			{
			  return metadata_.Count;
			}
		}
		public KeyValue getMetadata(int index)
		{
		  return metadata_[index];
		}
		public KeyValueOrBuilder getMetadataOrBuilder(int index)
		{
		  return metadata_[index];
		}

		// optional bool read_compacted = 11;
		public const int READ_COMPACTED_FIELD_NUMBER = 11;
		internal bool readCompacted_;
		public bool hasReadCompacted()
		{
		  return ((bitField0_ & 0x00000200) == 0x00000200);
		}
		public bool ReadCompacted
		{
			get
			{
			  return readCompacted_;
			}
		}

		// optional .pulsar.proto.Schema schema = 12;
		public const int SCHEMA_FIELD_NUMBER = 12;
		internal Schema schema_;
		public bool hasSchema()
		{
		  return ((bitField0_ & 0x00000400) == 0x00000400);
		}
		public Schema Schema
		{
			get
			{
			  return schema_;
			}
		}

		// optional .pulsar.proto.CommandSubscribe.InitialPosition initialPosition = 13 [default = Latest];
		public const int INITIALPOSITION_FIELD_NUMBER = 13;
		internal CommandSubscribe.InitialPosition initialPosition_;
		public bool hasInitialPosition()
		{
		  return ((bitField0_ & 0x00000800) == 0x00000800);
		}
		public CommandSubscribe.InitialPosition getInitialPosition()
		{
		  return initialPosition_;
		}

		// optional bool replicate_subscription_state = 14;
		public const int REPLICATE_SUBSCRIPTION_STATE_FIELD_NUMBER = 14;
		internal bool replicateSubscriptionState_;
		public bool hasReplicateSubscriptionState()
		{
		  return ((bitField0_ & 0x00001000) == 0x00001000);
		}
		public bool ReplicateSubscriptionState
		{
			get
			{
			  return replicateSubscriptionState_;
			}
		}

		// optional bool force_topic_creation = 15 [default = true];
		public const int FORCE_TOPIC_CREATION_FIELD_NUMBER = 15;
		internal bool forceTopicCreation_;
		public bool hasForceTopicCreation()
		{
		  return ((bitField0_ & 0x00002000) == 0x00002000);
		}
		public bool ForceTopicCreation
		{
			get
			{
			  return forceTopicCreation_;
			}
		}

		// optional uint64 start_message_rollback_duration_sec = 16 [default = 0];
		public const int START_MESSAGE_ROLLBACK_DURATION_SEC_FIELD_NUMBER = 16;
		internal long startMessageRollbackDurationSec_;
		public bool hasStartMessageRollbackDurationSec()
		{
		  return ((bitField0_ & 0x00004000) == 0x00004000);
		}
		public long StartMessageRollbackDurationSec
		{
			get
			{
			  return startMessageRollbackDurationSec_;
			}
		}

		// optional .pulsar.proto.KeySharedMeta keySharedMeta = 17;
		public const int KEYSHAREDMETA_FIELD_NUMBER = 17;
		internal KeySharedMeta keySharedMeta_;
		public bool hasKeySharedMeta()
		{
		  return ((bitField0_ & 0x00008000) == 0x00008000);
		}
		public KeySharedMeta KeySharedMeta
		{
			get
			{
			  return keySharedMeta_;
			}
		}

		internal void initFields()
		{
		  topic_ = "";
		  subscription_ = "";
		  subType_ = CommandSubscribe.SubType.Exclusive;
		  consumerId_ = 0L;
		  requestId_ = 0L;
		  consumerName_ = "";
		  priorityLevel_ = 0;
		  durable_ = true;
		  startMessageId_ = MessageIdData.DefaultInstance;
		  metadata_ = java.util.Collections.emptyList();
		  readCompacted_ = false;
		  schema_ = Schema.DefaultInstance;
		  initialPosition_ = CommandSubscribe.InitialPosition.Latest;
		  replicateSubscriptionState_ = false;
		  forceTopicCreation_ = true;
		  startMessageRollbackDurationSec_ = 0L;
		  keySharedMeta_ = KeySharedMeta.DefaultInstance;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasTopic())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSubscription())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSubType())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (hasStartMessageId())
			  {
				if (!StartMessageId.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  for (int i = 0; i < MetadataCount; i++)
			  {
				if (!getMetadata(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasSchema())
			  {
				if (!Schema.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasKeySharedMeta())
			  {
				if (!KeySharedMeta.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, TopicBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, SubscriptionBytes);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.writeEnum(3, subType_.Number);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteUInt64(4, consumerId_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteUInt64(5, requestId_);
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.WriteBytes(6, ConsumerNameBytes);
		  }
		  if (((bitField0_ & 0x00000040) == 0x00000040))
		  {
			output.WriteInt32(7, priorityLevel_);
		  }
		  if (((bitField0_ & 0x00000080) == 0x00000080))
		  {
			output.WriteBool(8, durable_);
		  }
		  if (((bitField0_ & 0x00000100) == 0x00000100))
		  {
			output.WriteMessage(9, startMessageId_);
		  }
		  for (int i = 0; i < metadata_.Count; i++)
		  {
			output.WriteMessage(10, metadata_[i]);
		  }
		  if (((bitField0_ & 0x00000200) == 0x00000200))
		  {
			output.WriteBool(11, readCompacted_);
		  }
		  if (((bitField0_ & 0x00000400) == 0x00000400))
		  {
			output.WriteMessage(12, schema_);
		  }
		  if (((bitField0_ & 0x00000800) == 0x00000800))
		  {
			output.writeEnum(13, initialPosition_.Number);
		  }
		  if (((bitField0_ & 0x00001000) == 0x00001000))
		  {
			output.WriteBool(14, replicateSubscriptionState_);
		  }
		  if (((bitField0_ & 0x00002000) == 0x00002000))
		  {
			output.WriteBool(15, forceTopicCreation_);
		  }
		  if (((bitField0_ & 0x00004000) == 0x00004000))
		  {
			output.WriteUInt64(16, startMessageRollbackDurationSec_);
		  }
		  if (((bitField0_ & 0x00008000) == 0x00008000))
		  {
			output.WriteMessage(17, keySharedMeta_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, TopicBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, SubscriptionBytes);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeEnumSize(3, subType_.Number);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.computeBytesSize(6, ConsumerNameBytes);
			  }
			  if (((bitField0_ & 0x00000040) == 0x00000040))
			  {
				size += CodedOutputStream.computeInt32Size(7, priorityLevel_);
			  }
			  if (((bitField0_ & 0x00000080) == 0x00000080))
			  {
				size += CodedOutputStream.computeBoolSize(8, durable_);
			  }
			  if (((bitField0_ & 0x00000100) == 0x00000100))
			  {
				size += CodedOutputStream.computeMessageSize(9, startMessageId_);
			  }
			  for (int i = 0; i < metadata_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(10, metadata_[i]);
			  }
			  if (((bitField0_ & 0x00000200) == 0x00000200))
			  {
				size += CodedOutputStream.computeBoolSize(11, readCompacted_);
			  }
			  if (((bitField0_ & 0x00000400) == 0x00000400))
			  {
				size += CodedOutputStream.computeMessageSize(12, schema_);
			  }
			  if (((bitField0_ & 0x00000800) == 0x00000800))
			  {
				size += CodedOutputStream.computeEnumSize(13, initialPosition_.Number);
			  }
			  if (((bitField0_ & 0x00001000) == 0x00001000))
			  {
				size += CodedOutputStream.computeBoolSize(14, replicateSubscriptionState_);
			  }
			  if (((bitField0_ & 0x00002000) == 0x00002000))
			  {
				size += CodedOutputStream.computeBoolSize(15, forceTopicCreation_);
			  }
			  if (((bitField0_ & 0x00004000) == 0x00004000))
			  {
				size += CodedOutputStream.computeUInt64Size(16, startMessageRollbackDurationSec_);
			  }
			  if (((bitField0_ & 0x00008000) == 0x00008000))
			  {
				size += CodedOutputStream.computeMessageSize(17, keySharedMeta_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandSubscribe parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSubscribe parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandSubscribe parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSubscribe parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSubscribe parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSubscribe parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSubscribe parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSubscribe parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandSubscribe parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSubscribe parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSubscribe parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandSubscribe prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandSubscribe, Builder>, CommandSubscribeOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandSubscribe.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass();

		  private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			topic_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			subscription_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			subType_ = CommandSubscribe.SubType.Exclusive;
			bitField0_ = (bitField0_ & ~0x00000004);
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000008);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000010);
			consumerName_ = "";
			bitField0_ = (bitField0_ & ~0x00000020);
			priorityLevel_ = 0;
			bitField0_ = (bitField0_ & ~0x00000040);
			durable_ = true;
			bitField0_ = (bitField0_ & ~0x00000080);
			startMessageId_ = MessageIdData.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000100);
			metadata_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000200);
			readCompacted_ = false;
			bitField0_ = (bitField0_ & ~0x00000400);
			schema_ = Schema.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000800);
			initialPosition_ = CommandSubscribe.InitialPosition.Latest;
			bitField0_ = (bitField0_ & ~0x00001000);
			replicateSubscriptionState_ = false;
			bitField0_ = (bitField0_ & ~0x00002000);
			forceTopicCreation_ = true;
			bitField0_ = (bitField0_ & ~0x00004000);
			startMessageRollbackDurationSec_ = 0L;
			bitField0_ = (bitField0_ & ~0x00008000);
			keySharedMeta_ = KeySharedMeta.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00010000);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandSubscribe DefaultInstanceForType
		  {
			  get
			  {
				return CommandSubscribe.DefaultInstance;
			  }
		  }

		  public CommandSubscribe build()
		  {
			CommandSubscribe result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandSubscribe buildParsed() throws InvalidProtocolBufferException
		  internal CommandSubscribe buildParsed()
		  {
			CommandSubscribe result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandSubscribe buildPartial()
		  {
			CommandSubscribe result = CommandSubscribe.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.topic_ = topic_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.subscription_ = subscription_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.subType_ = subType_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.consumerName_ = consumerName_;
			if (((from_bitField0_ & 0x00000040) == 0x00000040))
			{
			  to_bitField0_ |= 0x00000040;
			}
			result.priorityLevel_ = priorityLevel_;
			if (((from_bitField0_ & 0x00000080) == 0x00000080))
			{
			  to_bitField0_ |= 0x00000080;
			}
			result.durable_ = durable_;
			if (((from_bitField0_ & 0x00000100) == 0x00000100))
			{
			  to_bitField0_ |= 0x00000100;
			}
			result.startMessageId_ = startMessageId_;
			if (((bitField0_ & 0x00000200) == 0x00000200))
			{
			  metadata_ = java.util.Collections.unmodifiableList(metadata_);
			  bitField0_ = (bitField0_ & ~0x00000200);
			}
			result.metadata_ = metadata_;
			if (((from_bitField0_ & 0x00000400) == 0x00000400))
			{
			  to_bitField0_ |= 0x00000200;
			}
			result.readCompacted_ = readCompacted_;
			if (((from_bitField0_ & 0x00000800) == 0x00000800))
			{
			  to_bitField0_ |= 0x00000400;
			}
			result.schema_ = schema_;
			if (((from_bitField0_ & 0x00001000) == 0x00001000))
			{
			  to_bitField0_ |= 0x00000800;
			}
			result.initialPosition_ = initialPosition_;
			if (((from_bitField0_ & 0x00002000) == 0x00002000))
			{
			  to_bitField0_ |= 0x00001000;
			}
			result.replicateSubscriptionState_ = replicateSubscriptionState_;
			if (((from_bitField0_ & 0x00004000) == 0x00004000))
			{
			  to_bitField0_ |= 0x00002000;
			}
			result.forceTopicCreation_ = forceTopicCreation_;
			if (((from_bitField0_ & 0x00008000) == 0x00008000))
			{
			  to_bitField0_ |= 0x00004000;
			}
			result.startMessageRollbackDurationSec_ = startMessageRollbackDurationSec_;
			if (((from_bitField0_ & 0x00010000) == 0x00010000))
			{
			  to_bitField0_ |= 0x00008000;
			}
			result.keySharedMeta_ = keySharedMeta_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandSubscribe other)
		  {
			if (other == CommandSubscribe.DefaultInstance)
			{
				return this;
			}
			if (other.hasTopic())
			{
			  setTopic(other.Topic);
			}
			if (other.hasSubscription())
			{
			  setSubscription(other.Subscription);
			}
			if (other.hasSubType())
			{
			  SubType = other.getSubType();
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasConsumerName())
			{
			  setConsumerName(other.ConsumerName);
			}
			if (other.hasPriorityLevel())
			{
			  PriorityLevel = other.PriorityLevel;
			}
			if (other.hasDurable())
			{
			  Durable = other.Durable;
			}
			if (other.hasStartMessageId())
			{
			  mergeStartMessageId(other.StartMessageId);
			}
			if (other.metadata_.Count > 0)
			{
			  if (metadata_.Count == 0)
			  {
				metadata_ = other.metadata_;
				bitField0_ = (bitField0_ & ~0x00000200);
			  }
			  else
			  {
				ensureMetadataIsMutable();
				((List<KeyValue>)metadata_).AddRange(other.metadata_);
			  }

			}
			if (other.hasReadCompacted())
			{
			  ReadCompacted = other.ReadCompacted;
			}
			if (other.hasSchema())
			{
			  mergeSchema(other.Schema);
			}
			if (other.hasInitialPosition())
			{
			  InitialPosition = other.getInitialPosition();
			}
			if (other.hasReplicateSubscriptionState())
			{
			  ReplicateSubscriptionState = other.ReplicateSubscriptionState;
			}
			if (other.hasForceTopicCreation())
			{
			  ForceTopicCreation = other.ForceTopicCreation;
			}
			if (other.hasStartMessageRollbackDurationSec())
			{
			  StartMessageRollbackDurationSec = other.StartMessageRollbackDurationSec;
			}
			if (other.hasKeySharedMeta())
			{
			  mergeKeySharedMeta(other.KeySharedMeta);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasTopic())
				{
    
				  return false;
				}
				if (!hasSubscription())
				{
    
				  return false;
				}
				if (!hasSubType())
				{
    
				  return false;
				}
				if (!hasConsumerId())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (hasStartMessageId())
				{
				  if (!getStartMessageId().Initialized)
				  {
    
					return false;
				  }
				}
				for (int i = 0; i < MetadataCount; i++)
				{
				  if (!getMetadata(i).Initialized)
				  {
    
					return false;
				  }
				}
				if (hasSchema())
				{
				  if (!getSchema().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasKeySharedMeta())
				{
				  if (!getKeySharedMeta().Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  topic_ = input.readBytes();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  subscription_ = input.readBytes();
				  break;
				}
				case 24:
				{
				  int rawValue = input.readEnum();
				  CommandSubscribe.SubType value = CommandSubscribe.SubType.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000004;
					subType_ = value;
				  }
				  break;
				}
				case 32:
				{
				  bitField0_ |= 0x00000008;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 40:
				{
				  bitField0_ |= 0x00000010;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 50:
				{
				  bitField0_ |= 0x00000020;
				  consumerName_ = input.readBytes();
				  break;
				}
				case 56:
				{
				  bitField0_ |= 0x00000040;
				  priorityLevel_ = input.readInt32();
				  break;
				}
				case 64:
				{
				  bitField0_ |= 0x00000080;
				  durable_ = input.readBool();
				  break;
				}
				case 74:
				{
				  MessageIdData.Builder subBuilder = MessageIdData.newBuilder();
				  if (hasStartMessageId())
				  {
					subBuilder.mergeFrom(getStartMessageId());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setStartMessageId(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 82:
				{
				  KeyValue.Builder subBuilder = KeyValue.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addMetadata(subBuilder.buildPartial());
				  break;
				}
				case 88:
				{
				  bitField0_ |= 0x00000400;
				  readCompacted_ = input.readBool();
				  break;
				}
				case 98:
				{
				  Schema.Builder subBuilder = Schema.newBuilder();
				  if (hasSchema())
				  {
					subBuilder.mergeFrom(getSchema());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSchema(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 104:
				{
				  int rawValue = input.readEnum();
				  CommandSubscribe.InitialPosition value = CommandSubscribe.InitialPosition.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00001000;
					initialPosition_ = value;
				  }
				  break;
				}
				case 112:
				{
				  bitField0_ |= 0x00002000;
				  replicateSubscriptionState_ = input.readBool();
				  break;
				}
				case 120:
				{
				  bitField0_ |= 0x00004000;
				  forceTopicCreation_ = input.readBool();
				  break;
				}
				case 128:
				{
				  bitField0_ |= 0x00008000;
				  startMessageRollbackDurationSec_ = input.readUInt64();
				  break;
				}
				case 138:
				{
				  KeySharedMeta.Builder subBuilder = KeySharedMeta.newBuilder();
				  if (hasKeySharedMeta())
				  {
					subBuilder.mergeFrom(getKeySharedMeta());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setKeySharedMeta(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string topic = 1;
		  internal object topic_ = "";
		  public bool hasTopic()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getTopic()
		  {
			object @ref = topic_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  topic_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setTopic(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			topic_ = value;

			return this;
		  }
		  public Builder clearTopic()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			topic_ = DefaultInstance.Topic;

			return this;
		  }
		  internal void setTopic(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			topic_ = value;

		  }

		  // required string subscription = 2;
		  internal object subscription_ = "";
		  public bool hasSubscription()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getSubscription()
		  {
			object @ref = subscription_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  subscription_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setSubscription(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			subscription_ = value;

			return this;
		  }
		  public Builder clearSubscription()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			subscription_ = DefaultInstance.Subscription;

			return this;
		  }
		  internal void setSubscription(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			subscription_ = value;

		  }

		  // required .pulsar.proto.CommandSubscribe.SubType subType = 3;
		  internal CommandSubscribe.SubType subType_ = CommandSubscribe.SubType.Exclusive;
		  public bool hasSubType()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public CommandSubscribe.SubType SubType
		  {
			  get
			  {
				return subType_;
			  }
		  }
		  public Builder setSubType(CommandSubscribe.SubType value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000004;
			subType_ = value;

			return this;
		  }
		  public Builder clearSubType()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			subType_ = CommandSubscribe.SubType.Exclusive;

			return this;
		  }

		  // required uint64 consumer_id = 4;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000008;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			consumerId_ = 0L;

			return this;
		  }

		  // required uint64 request_id = 5;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000010;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			requestId_ = 0L;

			return this;
		  }

		  // optional string consumer_name = 6;
		  internal object consumerName_ = "";
		  public bool hasConsumerName()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public string getConsumerName()
		  {
			object @ref = consumerName_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  consumerName_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setConsumerName(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000020;
			consumerName_ = value;

			return this;
		  }
		  public Builder clearConsumerName()
		  {
			bitField0_ = (bitField0_ & ~0x00000020);
			consumerName_ = DefaultInstance.ConsumerName;

			return this;
		  }
		  internal void setConsumerName(ByteString value)
		  {
			bitField0_ |= 0x00000020;
			consumerName_ = value;

		  }

		  // optional int32 priority_level = 7;
		  internal int priorityLevel_;
		  public bool hasPriorityLevel()
		  {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		  }
		  public int PriorityLevel
		  {
			  get
			  {
				return priorityLevel_;
			  }
		  }
		  public Builder setPriorityLevel(int value)
		  {
			bitField0_ |= 0x00000040;
			priorityLevel_ = value;

			return this;
		  }
		  public Builder clearPriorityLevel()
		  {
			bitField0_ = (bitField0_ & ~0x00000040);
			priorityLevel_ = 0;

			return this;
		  }

		  // optional bool durable = 8 [default = true];
		  internal bool durable_ = true;
		  public bool hasDurable()
		  {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		  }
		  public bool Durable
		  {
			  get
			  {
				return durable_;
			  }
		  }
		  public Builder setDurable(bool value)
		  {
			bitField0_ |= 0x00000080;
			durable_ = value;

			return this;
		  }
		  public Builder clearDurable()
		  {
			bitField0_ = (bitField0_ & ~0x00000080);
			durable_ = true;

			return this;
		  }

		  // optional .pulsar.proto.MessageIdData start_message_id = 9;
		  internal MessageIdData startMessageId_ = MessageIdData.DefaultInstance;
		  public bool hasStartMessageId()
		  {
			return ((bitField0_ & 0x00000100) == 0x00000100);
		  }
		  public MessageIdData getStartMessageId()
		  {
			return startMessageId_;
		  }
		  public Builder setStartMessageId(MessageIdData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			startMessageId_ = value;

			bitField0_ |= 0x00000100;
			return this;
		  }
		  public Builder setStartMessageId(MessageIdData.Builder builderForValue)
		  {
			startMessageId_ = builderForValue.build();

			bitField0_ |= 0x00000100;
			return this;
		  }
		  public Builder mergeStartMessageId(MessageIdData value)
		  {
			if (((bitField0_ & 0x00000100) == 0x00000100) && startMessageId_ != MessageIdData.DefaultInstance)
			{
			  startMessageId_ = MessageIdData.newBuilder(startMessageId_).mergeFrom(value).buildPartial();
			}
			else
			{
			  startMessageId_ = value;
			}

			bitField0_ |= 0x00000100;
			return this;
		  }
		  public Builder clearStartMessageId()
		  {
			startMessageId_ = MessageIdData.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000100);
			return this;
		  }

		  // repeated .pulsar.proto.KeyValue metadata = 10;
		  internal IList<KeyValue> metadata_ = java.util.Collections.emptyList();
		  internal void ensureMetadataIsMutable()
		  {
			if (!((bitField0_ & 0x00000200) == 0x00000200))
			{
			  metadata_ = new List<KeyValue>(metadata_);
			  bitField0_ |= 0x00000200;
			}
		  }

		  public IList<KeyValue> MetadataList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(metadata_);
			  }
		  }
		  public int MetadataCount
		  {
			  get
			  {
				return metadata_.Count;
			  }
		  }
		  public KeyValue getMetadata(int index)
		  {
			return metadata_[index];
		  }
		  public Builder setMetadata(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_[index] = value;

			return this;
		  }
		  public Builder setMetadata(int index, KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addMetadata(KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_.Add(value);

			return this;
		  }
		  public Builder addMetadata(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_.Insert(index, value);

			return this;
		  }
		  public Builder addMetadata(KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addMetadata(int index, KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllMetadata<T1>(IEnumerable<T1> values) where T1 : KeyValue
		  {
			ensureMetadataIsMutable();
			base.addAll(values, metadata_);

			return this;
		  }
		  public Builder clearMetadata()
		  {
			metadata_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000200);

			return this;
		  }
		  public Builder removeMetadata(int index)
		  {
			ensureMetadataIsMutable();
			metadata_.RemoveAt(index);

			return this;
		  }

		  // optional bool read_compacted = 11;
		  internal bool readCompacted_;
		  public bool hasReadCompacted()
		  {
			return ((bitField0_ & 0x00000400) == 0x00000400);
		  }
		  public bool ReadCompacted
		  {
			  get
			  {
				return readCompacted_;
			  }
		  }
		  public Builder setReadCompacted(bool value)
		  {
			bitField0_ |= 0x00000400;
			readCompacted_ = value;

			return this;
		  }
		  public Builder clearReadCompacted()
		  {
			bitField0_ = (bitField0_ & ~0x00000400);
			readCompacted_ = false;

			return this;
		  }

		  // optional .pulsar.proto.Schema schema = 12;
		  internal Schema schema_ = Schema.DefaultInstance;
		  public bool hasSchema()
		  {
			return ((bitField0_ & 0x00000800) == 0x00000800);
		  }
		  public Schema getSchema()
		  {
			return schema_;
		  }
		  public Builder setSchema(Schema value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			schema_ = value;

			bitField0_ |= 0x00000800;
			return this;
		  }
		  public Builder setSchema(Schema.Builder builderForValue)
		  {
			schema_ = builderForValue.build();

			bitField0_ |= 0x00000800;
			return this;
		  }
		  public Builder mergeSchema(Schema value)
		  {
			if (((bitField0_ & 0x00000800) == 0x00000800) && schema_ != Schema.DefaultInstance)
			{
			  schema_ = Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
			}
			else
			{
			  schema_ = value;
			}

			bitField0_ |= 0x00000800;
			return this;
		  }
		  public Builder clearSchema()
		  {
			schema_ = Schema.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000800);
			return this;
		  }

		  // optional .pulsar.proto.CommandSubscribe.InitialPosition initialPosition = 13 [default = Latest];
		  internal CommandSubscribe.InitialPosition initialPosition_ = CommandSubscribe.InitialPosition.Latest;
		  public bool hasInitialPosition()
		  {
			return ((bitField0_ & 0x00001000) == 0x00001000);
		  }
		  public CommandSubscribe.InitialPosition InitialPosition
		  {
			  get
			  {
				return initialPosition_;
			  }
		  }
		  public Builder setInitialPosition(CommandSubscribe.InitialPosition value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00001000;
			initialPosition_ = value;

			return this;
		  }
		  public Builder clearInitialPosition()
		  {
			bitField0_ = (bitField0_ & ~0x00001000);
			initialPosition_ = CommandSubscribe.InitialPosition.Latest;

			return this;
		  }

		  // optional bool replicate_subscription_state = 14;
		  internal bool replicateSubscriptionState_;
		  public bool hasReplicateSubscriptionState()
		  {
			return ((bitField0_ & 0x00002000) == 0x00002000);
		  }
		  public bool ReplicateSubscriptionState
		  {
			  get
			  {
				return replicateSubscriptionState_;
			  }
		  }
		  public Builder setReplicateSubscriptionState(bool value)
		  {
			bitField0_ |= 0x00002000;
			replicateSubscriptionState_ = value;

			return this;
		  }
		  public Builder clearReplicateSubscriptionState()
		  {
			bitField0_ = (bitField0_ & ~0x00002000);
			replicateSubscriptionState_ = false;

			return this;
		  }

		  // optional bool force_topic_creation = 15 [default = true];
		  internal bool forceTopicCreation_ = true;
		  public bool hasForceTopicCreation()
		  {
			return ((bitField0_ & 0x00004000) == 0x00004000);
		  }
		  public bool ForceTopicCreation
		  {
			  get
			  {
				return forceTopicCreation_;
			  }
		  }
		  public Builder setForceTopicCreation(bool value)
		  {
			bitField0_ |= 0x00004000;
			forceTopicCreation_ = value;

			return this;
		  }
		  public Builder clearForceTopicCreation()
		  {
			bitField0_ = (bitField0_ & ~0x00004000);
			forceTopicCreation_ = true;

			return this;
		  }

		  // optional uint64 start_message_rollback_duration_sec = 16 [default = 0];
		  internal long startMessageRollbackDurationSec_;
		  public bool hasStartMessageRollbackDurationSec()
		  {
			return ((bitField0_ & 0x00008000) == 0x00008000);
		  }
		  public long StartMessageRollbackDurationSec
		  {
			  get
			  {
				return startMessageRollbackDurationSec_;
			  }
		  }
		  public Builder setStartMessageRollbackDurationSec(long value)
		  {
			bitField0_ |= 0x00008000;
			startMessageRollbackDurationSec_ = value;

			return this;
		  }
		  public Builder clearStartMessageRollbackDurationSec()
		  {
			bitField0_ = (bitField0_ & ~0x00008000);
			startMessageRollbackDurationSec_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.KeySharedMeta keySharedMeta = 17;
		  internal KeySharedMeta keySharedMeta_ = KeySharedMeta.DefaultInstance;
		  public bool hasKeySharedMeta()
		  {
			return ((bitField0_ & 0x00010000) == 0x00010000);
		  }
		  public KeySharedMeta getKeySharedMeta()
		  {
			return keySharedMeta_;
		  }
		  public Builder setKeySharedMeta(KeySharedMeta value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			keySharedMeta_ = value;

			bitField0_ |= 0x00010000;
			return this;
		  }
		  public Builder setKeySharedMeta(KeySharedMeta.Builder builderForValue)
		  {
			keySharedMeta_ = builderForValue.build();

			bitField0_ |= 0x00010000;
			return this;
		  }
		  public Builder mergeKeySharedMeta(KeySharedMeta value)
		  {
			if (((bitField0_ & 0x00010000) == 0x00010000) && keySharedMeta_ != KeySharedMeta.DefaultInstance)
			{
			  keySharedMeta_ = KeySharedMeta.newBuilder(keySharedMeta_).mergeFrom(value).buildPartial();
			}
			else
			{
			  keySharedMeta_ = value;
			}

			bitField0_ |= 0x00010000;
			return this;
		  }
		  public Builder clearKeySharedMeta()
		  {
			keySharedMeta_ = KeySharedMeta.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00010000);
			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandSubscribe)
		}

		static CommandSubscribe()
		{
		  defaultInstance = new CommandSubscribe(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandSubscribe)
	  }

	  public interface CommandPartitionedTopicMetadataOrBuilder : MessageLiteOrBuilder
	  {

		// required string topic = 1;
		bool hasTopic();
		string Topic {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}

		// optional string original_principal = 3;
		bool hasOriginalPrincipal();
		string OriginalPrincipal {get;}

		// optional string original_auth_data = 4;
		bool hasOriginalAuthData();
		string OriginalAuthData {get;}

		// optional string original_auth_method = 5;
		bool hasOriginalAuthMethod();
		string OriginalAuthMethod {get;}
	  }
	  public sealed class CommandPartitionedTopicMetadata : CommandPartitionedTopicMetadataOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandPartitionedTopicMetadata.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandPartitionedTopicMetadata(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandPartitionedTopicMetadata> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandPartitionedTopicMetadata>
		 {
			 protected internal CommandPartitionedTopicMetadata newObject(Handle handle)
			 {
			   return new CommandPartitionedTopicMetadata(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandPartitionedTopicMetadata(bool noInit)
		{
		}

		internal static readonly CommandPartitionedTopicMetadata defaultInstance;
		public static CommandPartitionedTopicMetadata DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandPartitionedTopicMetadata DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string topic = 1;
		public const int TOPIC_FIELD_NUMBER = 1;
		internal object topic_;
		public bool hasTopic()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Topic
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  topic_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TopicBytes
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				topic_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional string original_principal = 3;
		public const int ORIGINAL_PRINCIPAL_FIELD_NUMBER = 3;
		internal object originalPrincipal_;
		public bool hasOriginalPrincipal()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public string OriginalPrincipal
		{
			get
			{
			  object @ref = originalPrincipal_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  originalPrincipal_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString OriginalPrincipalBytes
		{
			get
			{
			  object @ref = originalPrincipal_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				originalPrincipal_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional string original_auth_data = 4;
		public const int ORIGINAL_AUTH_DATA_FIELD_NUMBER = 4;
		internal object originalAuthData_;
		public bool hasOriginalAuthData()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public string OriginalAuthData
		{
			get
			{
			  object @ref = originalAuthData_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  originalAuthData_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString OriginalAuthDataBytes
		{
			get
			{
			  object @ref = originalAuthData_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				originalAuthData_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional string original_auth_method = 5;
		public const int ORIGINAL_AUTH_METHOD_FIELD_NUMBER = 5;
		internal object originalAuthMethod_;
		public bool hasOriginalAuthMethod()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string OriginalAuthMethod
		{
			get
			{
			  object @ref = originalAuthMethod_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  originalAuthMethod_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString OriginalAuthMethodBytes
		{
			get
			{
			  object @ref = originalAuthMethod_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				originalAuthMethod_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  topic_ = "";
		  requestId_ = 0L;
		  originalPrincipal_ = "";
		  originalAuthData_ = "";
		  originalAuthMethod_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasTopic())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, TopicBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteBytes(3, OriginalPrincipalBytes);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteBytes(4, OriginalAuthDataBytes);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, OriginalAuthMethodBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, TopicBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeBytesSize(3, OriginalPrincipalBytes);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeBytesSize(4, OriginalAuthDataBytes);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, OriginalAuthMethodBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandPartitionedTopicMetadata parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandPartitionedTopicMetadata parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandPartitionedTopicMetadata parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandPartitionedTopicMetadata parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandPartitionedTopicMetadata parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPartitionedTopicMetadata parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandPartitionedTopicMetadata parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPartitionedTopicMetadata parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandPartitionedTopicMetadata parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadata parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPartitionedTopicMetadata parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandPartitionedTopicMetadata prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandPartitionedTopicMetadata, Builder>, CommandPartitionedTopicMetadataOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandPartitionedTopicMetadata.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			topic_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			originalPrincipal_ = "";
			bitField0_ = (bitField0_ & ~0x00000004);
			originalAuthData_ = "";
			bitField0_ = (bitField0_ & ~0x00000008);
			originalAuthMethod_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandPartitionedTopicMetadata DefaultInstanceForType
		  {
			  get
			  {
				return CommandPartitionedTopicMetadata.DefaultInstance;
			  }
		  }

		  public CommandPartitionedTopicMetadata build()
		  {
			CommandPartitionedTopicMetadata result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandPartitionedTopicMetadata buildParsed() throws InvalidProtocolBufferException
		  internal CommandPartitionedTopicMetadata buildParsed()
		  {
			CommandPartitionedTopicMetadata result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandPartitionedTopicMetadata buildPartial()
		  {
			CommandPartitionedTopicMetadata result = CommandPartitionedTopicMetadata.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.topic_ = topic_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.originalPrincipal_ = originalPrincipal_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.originalAuthData_ = originalAuthData_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.originalAuthMethod_ = originalAuthMethod_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandPartitionedTopicMetadata other)
		  {
			if (other == CommandPartitionedTopicMetadata.DefaultInstance)
			{
				return this;
			}
			if (other.hasTopic())
			{
			  setTopic(other.Topic);
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasOriginalPrincipal())
			{
			  setOriginalPrincipal(other.OriginalPrincipal);
			}
			if (other.hasOriginalAuthData())
			{
			  setOriginalAuthData(other.OriginalAuthData);
			}
			if (other.hasOriginalAuthMethod())
			{
			  setOriginalAuthMethod(other.OriginalAuthMethod);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasTopic())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  topic_ = input.readBytes();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 26:
				{
				  bitField0_ |= 0x00000004;
				  originalPrincipal_ = input.readBytes();
				  break;
				}
				case 34:
				{
				  bitField0_ |= 0x00000008;
				  originalAuthData_ = input.readBytes();
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  originalAuthMethod_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string topic = 1;
		  internal object topic_ = "";
		  public bool hasTopic()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getTopic()
		  {
			object @ref = topic_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  topic_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setTopic(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			topic_ = value;

			return this;
		  }
		  public Builder clearTopic()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			topic_ = DefaultInstance.Topic;

			return this;
		  }
		  internal void setTopic(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			topic_ = value;

		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // optional string original_principal = 3;
		  internal object originalPrincipal_ = "";
		  public bool hasOriginalPrincipal()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public string getOriginalPrincipal()
		  {
			object @ref = originalPrincipal_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  originalPrincipal_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setOriginalPrincipal(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000004;
			originalPrincipal_ = value;

			return this;
		  }
		  public Builder clearOriginalPrincipal()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			originalPrincipal_ = DefaultInstance.OriginalPrincipal;

			return this;
		  }
		  internal void setOriginalPrincipal(ByteString value)
		  {
			bitField0_ |= 0x00000004;
			originalPrincipal_ = value;

		  }

		  // optional string original_auth_data = 4;
		  internal object originalAuthData_ = "";
		  public bool hasOriginalAuthData()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public string getOriginalAuthData()
		  {
			object @ref = originalAuthData_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  originalAuthData_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setOriginalAuthData(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000008;
			originalAuthData_ = value;

			return this;
		  }
		  public Builder clearOriginalAuthData()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			originalAuthData_ = DefaultInstance.OriginalAuthData;

			return this;
		  }
		  internal void setOriginalAuthData(ByteString value)
		  {
			bitField0_ |= 0x00000008;
			originalAuthData_ = value;

		  }

		  // optional string original_auth_method = 5;
		  internal object originalAuthMethod_ = "";
		  public bool hasOriginalAuthMethod()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getOriginalAuthMethod()
		  {
			object @ref = originalAuthMethod_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  originalAuthMethod_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setOriginalAuthMethod(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			originalAuthMethod_ = value;

			return this;
		  }
		  public Builder clearOriginalAuthMethod()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			originalAuthMethod_ = DefaultInstance.OriginalAuthMethod;

			return this;
		  }
		  internal void setOriginalAuthMethod(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			originalAuthMethod_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandPartitionedTopicMetadata)
		}

		static CommandPartitionedTopicMetadata()
		{
		  defaultInstance = new CommandPartitionedTopicMetadata(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandPartitionedTopicMetadata)
	  }

	  public interface CommandPartitionedTopicMetadataResponseOrBuilder : MessageLiteOrBuilder
	  {

		// optional uint32 partitions = 1;
		bool hasPartitions();
		int Partitions {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}

		// optional .pulsar.proto.CommandPartitionedTopicMetadataResponse.LookupType response = 3;
		bool hasResponse();
		CommandPartitionedTopicMetadataResponse.LookupType Response {get;}

		// optional .pulsar.proto.ServerError error = 4;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 5;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandPartitionedTopicMetadataResponse : CommandPartitionedTopicMetadataResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandPartitionedTopicMetadataResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandPartitionedTopicMetadataResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandPartitionedTopicMetadataResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandPartitionedTopicMetadataResponse>
		 {
			 protected internal CommandPartitionedTopicMetadataResponse newObject(Handle handle)
			 {
			   return new CommandPartitionedTopicMetadataResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandPartitionedTopicMetadataResponse(bool noInit)
		{
		}

		internal static readonly CommandPartitionedTopicMetadataResponse defaultInstance;
		public static CommandPartitionedTopicMetadataResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandPartitionedTopicMetadataResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		public sealed class LookupType : Internal.EnumLite
		{
		  public static readonly LookupType Success = new LookupType("Success", InnerEnum.Success, 0, 0);
		  public static readonly LookupType Failed = new LookupType("Failed", InnerEnum.Failed, 1, 1);

		  private static readonly IList<LookupType> valueList = new List<LookupType>();

		  static LookupType()
		  {
			  valueList.Add(Success);
			  valueList.Add(Failed);
		  }

		  public enum InnerEnum
		  {
			  Success,
			  Failed
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int Success_VALUE = 0;
		  public const int Failed_VALUE = 1;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static LookupType valueOf(int value)
		  {
			switch (value)
			{
			  case 0:
				  return Success;
			  case 1:
				  return Failed;
			  default:
				  return null;
			}
		  }

		  public static IList<LookupType> internalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<LookupType> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal LookupType(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<LookupType>
	//	  {
	//		  public LookupType findValueByNumber(int number)
	//		  {
	//			return LookupType.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.CommandPartitionedTopicMetadataResponse.LookupType)

			public static IList<LookupType> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		internal int bitField0_;
		// optional uint32 partitions = 1;
		public const int PARTITIONS_FIELD_NUMBER = 1;
		internal int partitions_;
		public bool hasPartitions()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public int Partitions
		{
			get
			{
			  return partitions_;
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional .pulsar.proto.CommandPartitionedTopicMetadataResponse.LookupType response = 3;
		public const int RESPONSE_FIELD_NUMBER = 3;
		internal CommandPartitionedTopicMetadataResponse.LookupType response_;
		public bool hasResponse()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public CommandPartitionedTopicMetadataResponse.LookupType Response
		{
			get
			{
			  return response_;
			}
		}

		// optional .pulsar.proto.ServerError error = 4;
		public const int ERROR_FIELD_NUMBER = 4;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 5;
		public const int MESSAGE_FIELD_NUMBER = 5;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  partitions_ = 0;
		  requestId_ = 0L;
		  response_ = CommandPartitionedTopicMetadataResponse.LookupType.Success;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt32(1, partitions_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.writeEnum(3, response_.Number);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, error_.Number);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeUInt32Size(1, partitions_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeEnumSize(3, response_.Number);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, error_.Number);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandPartitionedTopicMetadataResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandPartitionedTopicMetadataResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandPartitionedTopicMetadataResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandPartitionedTopicMetadataResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandPartitionedTopicMetadataResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPartitionedTopicMetadataResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandPartitionedTopicMetadataResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPartitionedTopicMetadataResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandPartitionedTopicMetadataResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPartitionedTopicMetadataResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPartitionedTopicMetadataResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandPartitionedTopicMetadataResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandPartitionedTopicMetadataResponse, Builder>, CommandPartitionedTopicMetadataResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandPartitionedTopicMetadataResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass();

		  private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			partitions_ = 0;
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			response_ = CommandPartitionedTopicMetadataResponse.LookupType.Success;
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandPartitionedTopicMetadataResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandPartitionedTopicMetadataResponse.DefaultInstance;
			  }
		  }

		  public CommandPartitionedTopicMetadataResponse build()
		  {
			CommandPartitionedTopicMetadataResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandPartitionedTopicMetadataResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandPartitionedTopicMetadataResponse buildParsed()
		  {
			CommandPartitionedTopicMetadataResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandPartitionedTopicMetadataResponse buildPartial()
		  {
			CommandPartitionedTopicMetadataResponse result = CommandPartitionedTopicMetadataResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.partitions_ = partitions_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.response_ = response_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandPartitionedTopicMetadataResponse other)
		  {
			if (other == CommandPartitionedTopicMetadataResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasPartitions())
			{
			  Partitions = other.Partitions;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasResponse())
			{
			  Response = other.Response;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  partitions_ = input.readUInt32();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  int rawValue = input.readEnum();
				  CommandPartitionedTopicMetadataResponse.LookupType value = CommandPartitionedTopicMetadataResponse.LookupType.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000004;
					response_ = value;
				  }
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					error_ = value;
				  }
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // optional uint32 partitions = 1;
		  internal int partitions_;
		  public bool hasPartitions()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public int Partitions
		  {
			  get
			  {
				return partitions_;
			  }
		  }
		  public Builder setPartitions(int value)
		  {
			bitField0_ |= 0x00000001;
			partitions_ = value;

			return this;
		  }
		  public Builder clearPartitions()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			partitions_ = 0;

			return this;
		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.CommandPartitionedTopicMetadataResponse.LookupType response = 3;
		  internal CommandPartitionedTopicMetadataResponse.LookupType response_ = CommandPartitionedTopicMetadataResponse.LookupType.Success;
		  public bool hasResponse()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public CommandPartitionedTopicMetadataResponse.LookupType Response
		  {
			  get
			  {
				return response_;
			  }
		  }
		  public Builder setResponse(CommandPartitionedTopicMetadataResponse.LookupType value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000004;
			response_ = value;

			return this;
		  }
		  public Builder clearResponse()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			response_ = CommandPartitionedTopicMetadataResponse.LookupType.Success;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 4;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 5;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandPartitionedTopicMetadataResponse)
		}

		static CommandPartitionedTopicMetadataResponse()
		{
		  defaultInstance = new CommandPartitionedTopicMetadataResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandPartitionedTopicMetadataResponse)
	  }

	  public interface CommandLookupTopicOrBuilder : MessageLiteOrBuilder
	  {

		// required string topic = 1;
		bool hasTopic();
		string Topic {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}

		// optional bool authoritative = 3 [default = false];
		bool hasAuthoritative();
		bool Authoritative {get;}

		// optional string original_principal = 4;
		bool hasOriginalPrincipal();
		string OriginalPrincipal {get;}

		// optional string original_auth_data = 5;
		bool hasOriginalAuthData();
		string OriginalAuthData {get;}

		// optional string original_auth_method = 6;
		bool hasOriginalAuthMethod();
		string OriginalAuthMethod {get;}
	  }
	  public sealed class CommandLookupTopic : CommandLookupTopicOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandLookupTopic.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandLookupTopic(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandLookupTopic> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandLookupTopic>
		 {
			 protected internal CommandLookupTopic newObject(Handle handle)
			 {
			   return new CommandLookupTopic(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandLookupTopic(bool noInit)
		{
		}

		internal static readonly CommandLookupTopic defaultInstance;
		public static CommandLookupTopic DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandLookupTopic DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string topic = 1;
		public const int TOPIC_FIELD_NUMBER = 1;
		internal object topic_;
		public bool hasTopic()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Topic
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  topic_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TopicBytes
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				topic_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional bool authoritative = 3 [default = false];
		public const int AUTHORITATIVE_FIELD_NUMBER = 3;
		internal bool authoritative_;
		public bool hasAuthoritative()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public bool Authoritative
		{
			get
			{
			  return authoritative_;
			}
		}

		// optional string original_principal = 4;
		public const int ORIGINAL_PRINCIPAL_FIELD_NUMBER = 4;
		internal object originalPrincipal_;
		public bool hasOriginalPrincipal()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public string OriginalPrincipal
		{
			get
			{
			  object @ref = originalPrincipal_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  originalPrincipal_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString OriginalPrincipalBytes
		{
			get
			{
			  object @ref = originalPrincipal_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				originalPrincipal_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional string original_auth_data = 5;
		public const int ORIGINAL_AUTH_DATA_FIELD_NUMBER = 5;
		internal object originalAuthData_;
		public bool hasOriginalAuthData()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string OriginalAuthData
		{
			get
			{
			  object @ref = originalAuthData_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  originalAuthData_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString OriginalAuthDataBytes
		{
			get
			{
			  object @ref = originalAuthData_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				originalAuthData_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional string original_auth_method = 6;
		public const int ORIGINAL_AUTH_METHOD_FIELD_NUMBER = 6;
		internal object originalAuthMethod_;
		public bool hasOriginalAuthMethod()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public string OriginalAuthMethod
		{
			get
			{
			  object @ref = originalAuthMethod_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  originalAuthMethod_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString OriginalAuthMethodBytes
		{
			get
			{
			  object @ref = originalAuthMethod_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				originalAuthMethod_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  topic_ = "";
		  requestId_ = 0L;
		  authoritative_ = false;
		  originalPrincipal_ = "";
		  originalAuthData_ = "";
		  originalAuthMethod_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasTopic())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, TopicBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteBool(3, authoritative_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteBytes(4, OriginalPrincipalBytes);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, OriginalAuthDataBytes);
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.WriteBytes(6, OriginalAuthMethodBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, TopicBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeBoolSize(3, authoritative_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeBytesSize(4, OriginalPrincipalBytes);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, OriginalAuthDataBytes);
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.computeBytesSize(6, OriginalAuthMethodBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandLookupTopic parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandLookupTopic parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandLookupTopic parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandLookupTopic parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandLookupTopic parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandLookupTopic parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandLookupTopic parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandLookupTopic parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandLookupTopic parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopic parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandLookupTopic parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandLookupTopic prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandLookupTopic, Builder>, CommandLookupTopicOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandLookupTopic.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			topic_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			authoritative_ = false;
			bitField0_ = (bitField0_ & ~0x00000004);
			originalPrincipal_ = "";
			bitField0_ = (bitField0_ & ~0x00000008);
			originalAuthData_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			originalAuthMethod_ = "";
			bitField0_ = (bitField0_ & ~0x00000020);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandLookupTopic DefaultInstanceForType
		  {
			  get
			  {
				return CommandLookupTopic.DefaultInstance;
			  }
		  }

		  public CommandLookupTopic build()
		  {
			CommandLookupTopic result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandLookupTopic buildParsed() throws InvalidProtocolBufferException
		  internal CommandLookupTopic buildParsed()
		  {
			CommandLookupTopic result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandLookupTopic buildPartial()
		  {
			CommandLookupTopic result = CommandLookupTopic.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.topic_ = topic_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.authoritative_ = authoritative_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.originalPrincipal_ = originalPrincipal_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.originalAuthData_ = originalAuthData_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.originalAuthMethod_ = originalAuthMethod_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandLookupTopic other)
		  {
			if (other == CommandLookupTopic.DefaultInstance)
			{
				return this;
			}
			if (other.hasTopic())
			{
			  setTopic(other.Topic);
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasAuthoritative())
			{
			  Authoritative = other.Authoritative;
			}
			if (other.hasOriginalPrincipal())
			{
			  setOriginalPrincipal(other.OriginalPrincipal);
			}
			if (other.hasOriginalAuthData())
			{
			  setOriginalAuthData(other.OriginalAuthData);
			}
			if (other.hasOriginalAuthMethod())
			{
			  setOriginalAuthMethod(other.OriginalAuthMethod);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasTopic())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  topic_ = input.readBytes();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  authoritative_ = input.readBool();
				  break;
				}
				case 34:
				{
				  bitField0_ |= 0x00000008;
				  originalPrincipal_ = input.readBytes();
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  originalAuthData_ = input.readBytes();
				  break;
				}
				case 50:
				{
				  bitField0_ |= 0x00000020;
				  originalAuthMethod_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string topic = 1;
		  internal object topic_ = "";
		  public bool hasTopic()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getTopic()
		  {
			object @ref = topic_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  topic_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setTopic(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			topic_ = value;

			return this;
		  }
		  public Builder clearTopic()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			topic_ = DefaultInstance.Topic;

			return this;
		  }
		  internal void setTopic(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			topic_ = value;

		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // optional bool authoritative = 3 [default = false];
		  internal bool authoritative_;
		  public bool hasAuthoritative()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public bool Authoritative
		  {
			  get
			  {
				return authoritative_;
			  }
		  }
		  public Builder setAuthoritative(bool value)
		  {
			bitField0_ |= 0x00000004;
			authoritative_ = value;

			return this;
		  }
		  public Builder clearAuthoritative()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			authoritative_ = false;

			return this;
		  }

		  // optional string original_principal = 4;
		  internal object originalPrincipal_ = "";
		  public bool hasOriginalPrincipal()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public string getOriginalPrincipal()
		  {
			object @ref = originalPrincipal_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  originalPrincipal_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setOriginalPrincipal(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000008;
			originalPrincipal_ = value;

			return this;
		  }
		  public Builder clearOriginalPrincipal()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			originalPrincipal_ = DefaultInstance.OriginalPrincipal;

			return this;
		  }
		  internal void setOriginalPrincipal(ByteString value)
		  {
			bitField0_ |= 0x00000008;
			originalPrincipal_ = value;

		  }

		  // optional string original_auth_data = 5;
		  internal object originalAuthData_ = "";
		  public bool hasOriginalAuthData()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getOriginalAuthData()
		  {
			object @ref = originalAuthData_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  originalAuthData_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setOriginalAuthData(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			originalAuthData_ = value;

			return this;
		  }
		  public Builder clearOriginalAuthData()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			originalAuthData_ = DefaultInstance.OriginalAuthData;

			return this;
		  }
		  internal void setOriginalAuthData(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			originalAuthData_ = value;

		  }

		  // optional string original_auth_method = 6;
		  internal object originalAuthMethod_ = "";
		  public bool hasOriginalAuthMethod()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public string getOriginalAuthMethod()
		  {
			object @ref = originalAuthMethod_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  originalAuthMethod_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setOriginalAuthMethod(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000020;
			originalAuthMethod_ = value;

			return this;
		  }
		  public Builder clearOriginalAuthMethod()
		  {
			bitField0_ = (bitField0_ & ~0x00000020);
			originalAuthMethod_ = DefaultInstance.OriginalAuthMethod;

			return this;
		  }
		  internal void setOriginalAuthMethod(ByteString value)
		  {
			bitField0_ |= 0x00000020;
			originalAuthMethod_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandLookupTopic)
		}

		static CommandLookupTopic()
		{
		  defaultInstance = new CommandLookupTopic(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandLookupTopic)
	  }

	  public interface CommandLookupTopicResponseOrBuilder : MessageLiteOrBuilder
	  {

		// optional string brokerServiceUrl = 1;
		bool hasBrokerServiceUrl();
		string BrokerServiceUrl {get;}

		// optional string brokerServiceUrlTls = 2;
		bool hasBrokerServiceUrlTls();
		string BrokerServiceUrlTls {get;}

		// optional .pulsar.proto.CommandLookupTopicResponse.LookupType response = 3;
		bool hasResponse();
		CommandLookupTopicResponse.LookupType Response {get;}

		// required uint64 request_id = 4;
		bool hasRequestId();
		long RequestId {get;}

		// optional bool authoritative = 5 [default = false];
		bool hasAuthoritative();
		bool Authoritative {get;}

		// optional .pulsar.proto.ServerError error = 6;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 7;
		bool hasMessage();
		string Message {get;}

		// optional bool proxy_through_service_url = 8 [default = false];
		bool hasProxyThroughServiceUrl();
		bool ProxyThroughServiceUrl {get;}
	  }
	  public sealed class CommandLookupTopicResponse : CommandLookupTopicResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandLookupTopicResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandLookupTopicResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandLookupTopicResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandLookupTopicResponse>
		 {
			 protected internal CommandLookupTopicResponse newObject(Handle handle)
			 {
			   return new CommandLookupTopicResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandLookupTopicResponse(bool noInit)
		{
		}

		internal static readonly CommandLookupTopicResponse defaultInstance;
		public static CommandLookupTopicResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandLookupTopicResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		public sealed class LookupType : Internal.EnumLite
		{
		  public static readonly LookupType Redirect = new LookupType("Redirect", InnerEnum.Redirect, 0, 0);
		  public static readonly LookupType Connect = new LookupType("Connect", InnerEnum.Connect, 1, 1);
		  public static readonly LookupType Failed = new LookupType("Failed", InnerEnum.Failed, 2, 2);

		  private static readonly IList<LookupType> valueList = new List<LookupType>();

		  static LookupType()
		  {
			  valueList.Add(Redirect);
			  valueList.Add(Connect);
			  valueList.Add(Failed);
		  }

		  public enum InnerEnum
		  {
			  Redirect,
			  Connect,
			  Failed
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int Redirect_VALUE = 0;
		  public const int Connect_VALUE = 1;
		  public const int Failed_VALUE = 2;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static LookupType valueOf(int value)
		  {
			switch (value)
			{
			  case 0:
				  return Redirect;
			  case 1:
				  return Connect;
			  case 2:
				  return Failed;
			  default:
				  return null;
			}
		  }

		  public static IList<LookupType> internalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<LookupType> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal LookupType(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<LookupType>
	//	  {
	//		  public LookupType findValueByNumber(int number)
	//		  {
	//			return LookupType.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.CommandLookupTopicResponse.LookupType)

			public static IList<LookupType> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		internal int bitField0_;
		// optional string brokerServiceUrl = 1;
		public const int BROKERSERVICEURL_FIELD_NUMBER = 1;
		internal object brokerServiceUrl_;
		public bool hasBrokerServiceUrl()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string BrokerServiceUrl
		{
			get
			{
			  object @ref = brokerServiceUrl_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  brokerServiceUrl_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString BrokerServiceUrlBytes
		{
			get
			{
			  object @ref = brokerServiceUrl_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				brokerServiceUrl_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional string brokerServiceUrlTls = 2;
		public const int BROKERSERVICEURLTLS_FIELD_NUMBER = 2;
		internal object brokerServiceUrlTls_;
		public bool hasBrokerServiceUrlTls()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public string BrokerServiceUrlTls
		{
			get
			{
			  object @ref = brokerServiceUrlTls_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  brokerServiceUrlTls_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString BrokerServiceUrlTlsBytes
		{
			get
			{
			  object @ref = brokerServiceUrlTls_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				brokerServiceUrlTls_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional .pulsar.proto.CommandLookupTopicResponse.LookupType response = 3;
		public const int RESPONSE_FIELD_NUMBER = 3;
		internal CommandLookupTopicResponse.LookupType response_;
		public bool hasResponse()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public CommandLookupTopicResponse.LookupType Response
		{
			get
			{
			  return response_;
			}
		}

		// required uint64 request_id = 4;
		public const int REQUEST_ID_FIELD_NUMBER = 4;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional bool authoritative = 5 [default = false];
		public const int AUTHORITATIVE_FIELD_NUMBER = 5;
		internal bool authoritative_;
		public bool hasAuthoritative()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public bool Authoritative
		{
			get
			{
			  return authoritative_;
			}
		}

		// optional .pulsar.proto.ServerError error = 6;
		public const int ERROR_FIELD_NUMBER = 6;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 7;
		public const int MESSAGE_FIELD_NUMBER = 7;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000040) == 0x00000040);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional bool proxy_through_service_url = 8 [default = false];
		public const int PROXY_THROUGH_SERVICE_URL_FIELD_NUMBER = 8;
		internal bool proxyThroughServiceUrl_;
		public bool hasProxyThroughServiceUrl()
		{
		  return ((bitField0_ & 0x00000080) == 0x00000080);
		}
		public bool ProxyThroughServiceUrl
		{
			get
			{
			  return proxyThroughServiceUrl_;
			}
		}

		internal void initFields()
		{
		  brokerServiceUrl_ = "";
		  brokerServiceUrlTls_ = "";
		  response_ = CommandLookupTopicResponse.LookupType.Redirect;
		  requestId_ = 0L;
		  authoritative_ = false;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		  proxyThroughServiceUrl_ = false;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, BrokerServiceUrlBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, BrokerServiceUrlTlsBytes);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.writeEnum(3, response_.Number);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteUInt64(4, requestId_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBool(5, authoritative_);
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.writeEnum(6, error_.Number);
		  }
		  if (((bitField0_ & 0x00000040) == 0x00000040))
		  {
			output.WriteBytes(7, MessageBytes);
		  }
		  if (((bitField0_ & 0x00000080) == 0x00000080))
		  {
			output.WriteBool(8, proxyThroughServiceUrl_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, BrokerServiceUrlBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, BrokerServiceUrlTlsBytes);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeEnumSize(3, response_.Number);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBoolSize(5, authoritative_);
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.computeEnumSize(6, error_.Number);
			  }
			  if (((bitField0_ & 0x00000040) == 0x00000040))
			  {
				size += CodedOutputStream.computeBytesSize(7, MessageBytes);
			  }
			  if (((bitField0_ & 0x00000080) == 0x00000080))
			  {
				size += CodedOutputStream.computeBoolSize(8, proxyThroughServiceUrl_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandLookupTopicResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandLookupTopicResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandLookupTopicResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandLookupTopicResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandLookupTopicResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandLookupTopicResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandLookupTopicResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandLookupTopicResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandLookupTopicResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandLookupTopicResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandLookupTopicResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandLookupTopicResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandLookupTopicResponse, Builder>, CommandLookupTopicResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandLookupTopicResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass();

		  private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			brokerServiceUrl_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			brokerServiceUrlTls_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			response_ = CommandLookupTopicResponse.LookupType.Redirect;
			bitField0_ = (bitField0_ & ~0x00000004);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000008);
			authoritative_ = false;
			bitField0_ = (bitField0_ & ~0x00000010);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000020);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000040);
			proxyThroughServiceUrl_ = false;
			bitField0_ = (bitField0_ & ~0x00000080);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandLookupTopicResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandLookupTopicResponse.DefaultInstance;
			  }
		  }

		  public CommandLookupTopicResponse build()
		  {
			CommandLookupTopicResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandLookupTopicResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandLookupTopicResponse buildParsed()
		  {
			CommandLookupTopicResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandLookupTopicResponse buildPartial()
		  {
			CommandLookupTopicResponse result = CommandLookupTopicResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.brokerServiceUrl_ = brokerServiceUrl_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.brokerServiceUrlTls_ = brokerServiceUrlTls_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.response_ = response_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.authoritative_ = authoritative_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000040) == 0x00000040))
			{
			  to_bitField0_ |= 0x00000040;
			}
			result.message_ = message_;
			if (((from_bitField0_ & 0x00000080) == 0x00000080))
			{
			  to_bitField0_ |= 0x00000080;
			}
			result.proxyThroughServiceUrl_ = proxyThroughServiceUrl_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandLookupTopicResponse other)
		  {
			if (other == CommandLookupTopicResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasBrokerServiceUrl())
			{
			  setBrokerServiceUrl(other.BrokerServiceUrl);
			}
			if (other.hasBrokerServiceUrlTls())
			{
			  setBrokerServiceUrlTls(other.BrokerServiceUrlTls);
			}
			if (other.hasResponse())
			{
			  Response = other.Response;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasAuthoritative())
			{
			  Authoritative = other.Authoritative;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			if (other.hasProxyThroughServiceUrl())
			{
			  ProxyThroughServiceUrl = other.ProxyThroughServiceUrl;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  brokerServiceUrl_ = input.readBytes();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  brokerServiceUrlTls_ = input.readBytes();
				  break;
				}
				case 24:
				{
				  int rawValue = input.readEnum();
				  CommandLookupTopicResponse.LookupType value = CommandLookupTopicResponse.LookupType.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000004;
					response_ = value;
				  }
				  break;
				}
				case 32:
				{
				  bitField0_ |= 0x00000008;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 40:
				{
				  bitField0_ |= 0x00000010;
				  authoritative_ = input.readBool();
				  break;
				}
				case 48:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000020;
					error_ = value;
				  }
				  break;
				}
				case 58:
				{
				  bitField0_ |= 0x00000040;
				  message_ = input.readBytes();
				  break;
				}
				case 64:
				{
				  bitField0_ |= 0x00000080;
				  proxyThroughServiceUrl_ = input.readBool();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // optional string brokerServiceUrl = 1;
		  internal object brokerServiceUrl_ = "";
		  public bool hasBrokerServiceUrl()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getBrokerServiceUrl()
		  {
			object @ref = brokerServiceUrl_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  brokerServiceUrl_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setBrokerServiceUrl(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			brokerServiceUrl_ = value;

			return this;
		  }
		  public Builder clearBrokerServiceUrl()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			brokerServiceUrl_ = DefaultInstance.BrokerServiceUrl;

			return this;
		  }
		  internal void setBrokerServiceUrl(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			brokerServiceUrl_ = value;

		  }

		  // optional string brokerServiceUrlTls = 2;
		  internal object brokerServiceUrlTls_ = "";
		  public bool hasBrokerServiceUrlTls()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getBrokerServiceUrlTls()
		  {
			object @ref = brokerServiceUrlTls_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  brokerServiceUrlTls_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setBrokerServiceUrlTls(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			brokerServiceUrlTls_ = value;

			return this;
		  }
		  public Builder clearBrokerServiceUrlTls()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			brokerServiceUrlTls_ = DefaultInstance.BrokerServiceUrlTls;

			return this;
		  }
		  internal void setBrokerServiceUrlTls(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			brokerServiceUrlTls_ = value;

		  }

		  // optional .pulsar.proto.CommandLookupTopicResponse.LookupType response = 3;
		  internal CommandLookupTopicResponse.LookupType response_ = CommandLookupTopicResponse.LookupType.Redirect;
		  public bool hasResponse()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public CommandLookupTopicResponse.LookupType Response
		  {
			  get
			  {
				return response_;
			  }
		  }
		  public Builder setResponse(CommandLookupTopicResponse.LookupType value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000004;
			response_ = value;

			return this;
		  }
		  public Builder clearResponse()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			response_ = CommandLookupTopicResponse.LookupType.Redirect;

			return this;
		  }

		  // required uint64 request_id = 4;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000008;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			requestId_ = 0L;

			return this;
		  }

		  // optional bool authoritative = 5 [default = false];
		  internal bool authoritative_;
		  public bool hasAuthoritative()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public bool Authoritative
		  {
			  get
			  {
				return authoritative_;
			  }
		  }
		  public Builder setAuthoritative(bool value)
		  {
			bitField0_ |= 0x00000010;
			authoritative_ = value;

			return this;
		  }
		  public Builder clearAuthoritative()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			authoritative_ = false;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 6;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000020;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000020);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 7;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000040;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000040);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000040;
			message_ = value;

		  }

		  // optional bool proxy_through_service_url = 8 [default = false];
		  internal bool proxyThroughServiceUrl_;
		  public bool hasProxyThroughServiceUrl()
		  {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		  }
		  public bool ProxyThroughServiceUrl
		  {
			  get
			  {
				return proxyThroughServiceUrl_;
			  }
		  }
		  public Builder setProxyThroughServiceUrl(bool value)
		  {
			bitField0_ |= 0x00000080;
			proxyThroughServiceUrl_ = value;

			return this;
		  }
		  public Builder clearProxyThroughServiceUrl()
		  {
			bitField0_ = (bitField0_ & ~0x00000080);
			proxyThroughServiceUrl_ = false;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandLookupTopicResponse)
		}

		static CommandLookupTopicResponse()
		{
		  defaultInstance = new CommandLookupTopicResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandLookupTopicResponse)
	  }

	  public interface CommandProducerOrBuilder : MessageLiteOrBuilder
	  {

		// required string topic = 1;
		bool hasTopic();
		string Topic {get;}

		// required uint64 producer_id = 2;
		bool hasProducerId();
		long ProducerId {get;}

		// required uint64 request_id = 3;
		bool hasRequestId();
		long RequestId {get;}

		// optional string producer_name = 4;
		bool hasProducerName();
		string ProducerName {get;}

		// optional bool encrypted = 5 [default = false];
		bool hasEncrypted();
		bool Encrypted {get;}

		// repeated .pulsar.proto.KeyValue metadata = 6;
		IList<KeyValue> MetadataList {get;}
		KeyValue getMetadata(int index);
		int MetadataCount {get;}

		// optional .pulsar.proto.Schema schema = 7;
		bool hasSchema();
		Schema Schema {get;}

		// optional uint64 epoch = 8 [default = 0];
		bool hasEpoch();
		long Epoch {get;}

		// optional bool user_provided_producer_name = 9 [default = true];
		bool hasUserProvidedProducerName();
		bool UserProvidedProducerName {get;}
	  }
	  public sealed class CommandProducer : CommandProducerOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandProducer.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandProducer(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandProducer> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandProducer>
		 {
			 protected internal CommandProducer newObject(Handle handle)
			 {
			   return new CommandProducer(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandProducer(bool noInit)
		{
		}

		internal static readonly CommandProducer defaultInstance;
		public static CommandProducer DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandProducer DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string topic = 1;
		public const int TOPIC_FIELD_NUMBER = 1;
		internal object topic_;
		public bool hasTopic()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Topic
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  topic_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TopicBytes
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				topic_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required uint64 producer_id = 2;
		public const int PRODUCER_ID_FIELD_NUMBER = 2;
		internal long producerId_;
		public bool hasProducerId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long ProducerId
		{
			get
			{
			  return producerId_;
			}
		}

		// required uint64 request_id = 3;
		public const int REQUEST_ID_FIELD_NUMBER = 3;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional string producer_name = 4;
		public const int PRODUCER_NAME_FIELD_NUMBER = 4;
		internal object producerName_;
		public bool hasProducerName()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public string ProducerName
		{
			get
			{
			  object @ref = producerName_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  producerName_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ProducerNameBytes
		{
			get
			{
			  object @ref = producerName_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				producerName_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional bool encrypted = 5 [default = false];
		public const int ENCRYPTED_FIELD_NUMBER = 5;
		internal bool encrypted_;
		public bool hasEncrypted()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public bool Encrypted
		{
			get
			{
			  return encrypted_;
			}
		}

		// repeated .pulsar.proto.KeyValue metadata = 6;
		public const int METADATA_FIELD_NUMBER = 6;
		internal IList<KeyValue> metadata_;
		public IList<KeyValue> MetadataList
		{
			get
			{
			  return metadata_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends KeyValueOrBuilder> getMetadataOrBuilderList()
		public IList<KeyValueOrBuilder> MetadataOrBuilderList
		{
			get
			{
			  return metadata_;
			}
		}
		public int MetadataCount
		{
			get
			{
			  return metadata_.Count;
			}
		}
		public KeyValue getMetadata(int index)
		{
		  return metadata_[index];
		}
		public KeyValueOrBuilder getMetadataOrBuilder(int index)
		{
		  return metadata_[index];
		}

		// optional .pulsar.proto.Schema schema = 7;
		public const int SCHEMA_FIELD_NUMBER = 7;
		internal Schema schema_;
		public bool hasSchema()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public Schema Schema
		{
			get
			{
			  return schema_;
			}
		}

		// optional uint64 epoch = 8 [default = 0];
		public const int EPOCH_FIELD_NUMBER = 8;
		internal long epoch_;
		public bool hasEpoch()
		{
		  return ((bitField0_ & 0x00000040) == 0x00000040);
		}
		public long Epoch
		{
			get
			{
			  return epoch_;
			}
		}

		// optional bool user_provided_producer_name = 9 [default = true];
		public const int USER_PROVIDED_PRODUCER_NAME_FIELD_NUMBER = 9;
		internal bool userProvidedProducerName_;
		public bool hasUserProvidedProducerName()
		{
		  return ((bitField0_ & 0x00000080) == 0x00000080);
		}
		public bool UserProvidedProducerName
		{
			get
			{
			  return userProvidedProducerName_;
			}
		}

		internal void initFields()
		{
		  topic_ = "";
		  producerId_ = 0L;
		  requestId_ = 0L;
		  producerName_ = "";
		  encrypted_ = false;
		  metadata_ = java.util.Collections.emptyList();
		  schema_ = Schema.DefaultInstance;
		  epoch_ = 0L;
		  userProvidedProducerName_ = true;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasTopic())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasProducerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < MetadataCount; i++)
			  {
				if (!getMetadata(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasSchema())
			  {
				if (!Schema.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, TopicBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, producerId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, requestId_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteBytes(4, ProducerNameBytes);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBool(5, encrypted_);
		  }
		  for (int i = 0; i < metadata_.Count; i++)
		  {
			output.WriteMessage(6, metadata_[i]);
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.WriteMessage(7, schema_);
		  }
		  if (((bitField0_ & 0x00000040) == 0x00000040))
		  {
			output.WriteUInt64(8, epoch_);
		  }
		  if (((bitField0_ & 0x00000080) == 0x00000080))
		  {
			output.WriteBool(9, userProvidedProducerName_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, TopicBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(producerId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeBytesSize(4, ProducerNameBytes);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBoolSize(5, encrypted_);
			  }
			  for (int i = 0; i < metadata_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(6, metadata_[i]);
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.computeMessageSize(7, schema_);
			  }
			  if (((bitField0_ & 0x00000040) == 0x00000040))
			  {
				size += CodedOutputStream.ComputeUInt64Size(epoch_);
			  }
			  if (((bitField0_ & 0x00000080) == 0x00000080))
			  {
				size += CodedOutputStream.computeBoolSize(9, userProvidedProducerName_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandProducer parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandProducer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandProducer parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandProducer parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandProducer parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandProducer parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandProducer parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandProducer parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandProducer parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandProducer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandProducer prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandProducer, Builder>, CommandProducerOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandProducer.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			topic_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			producerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			producerName_ = "";
			bitField0_ = (bitField0_ & ~0x00000008);
			encrypted_ = false;
			bitField0_ = (bitField0_ & ~0x00000010);
			metadata_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000020);
			schema_ = Schema.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000040);
			epoch_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000080);
			userProvidedProducerName_ = true;
			bitField0_ = (bitField0_ & ~0x00000100);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandProducer DefaultInstanceForType
		  {
			  get
			  {
				return CommandProducer.DefaultInstance;
			  }
		  }

		  public CommandProducer build()
		  {
			CommandProducer result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandProducer buildParsed() throws InvalidProtocolBufferException
		  internal CommandProducer buildParsed()
		  {
			CommandProducer result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandProducer buildPartial()
		  {
			CommandProducer result = CommandProducer.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.topic_ = topic_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.producerId_ = producerId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.producerName_ = producerName_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.encrypted_ = encrypted_;
			if (((bitField0_ & 0x00000020) == 0x00000020))
			{
			  metadata_ = java.util.Collections.unmodifiableList(metadata_);
			  bitField0_ = (bitField0_ & ~0x00000020);
			}
			result.metadata_ = metadata_;
			if (((from_bitField0_ & 0x00000040) == 0x00000040))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.schema_ = schema_;
			if (((from_bitField0_ & 0x00000080) == 0x00000080))
			{
			  to_bitField0_ |= 0x00000040;
			}
			result.epoch_ = epoch_;
			if (((from_bitField0_ & 0x00000100) == 0x00000100))
			{
			  to_bitField0_ |= 0x00000080;
			}
			result.userProvidedProducerName_ = userProvidedProducerName_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandProducer other)
		  {
			if (other == CommandProducer.DefaultInstance)
			{
				return this;
			}
			if (other.hasTopic())
			{
			  setTopic(other.Topic);
			}
			if (other.hasProducerId())
			{
			  ProducerId = other.ProducerId;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasProducerName())
			{
			  setProducerName(other.ProducerName);
			}
			if (other.hasEncrypted())
			{
			  Encrypted = other.Encrypted;
			}
			if (other.metadata_.Count > 0)
			{
			  if (metadata_.Count == 0)
			  {
				metadata_ = other.metadata_;
				bitField0_ = (bitField0_ & ~0x00000020);
			  }
			  else
			  {
				ensureMetadataIsMutable();
				((List<KeyValue>)metadata_).AddRange(other.metadata_);
			  }

			}
			if (other.hasSchema())
			{
			  mergeSchema(other.Schema);
			}
			if (other.hasEpoch())
			{
			  Epoch = other.Epoch;
			}
			if (other.hasUserProvidedProducerName())
			{
			  UserProvidedProducerName = other.UserProvidedProducerName;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasTopic())
				{
    
				  return false;
				}
				if (!hasProducerId())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				for (int i = 0; i < MetadataCount; i++)
				{
				  if (!getMetadata(i).Initialized)
				  {
    
					return false;
				  }
				}
				if (hasSchema())
				{
				  if (!getSchema().Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  topic_ = input.readBytes();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  producerId_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 34:
				{
				  bitField0_ |= 0x00000008;
				  producerName_ = input.readBytes();
				  break;
				}
				case 40:
				{
				  bitField0_ |= 0x00000010;
				  encrypted_ = input.readBool();
				  break;
				}
				case 50:
				{
				  KeyValue.Builder subBuilder = KeyValue.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addMetadata(subBuilder.buildPartial());
				  break;
				}
				case 58:
				{
				  Schema.Builder subBuilder = Schema.newBuilder();
				  if (hasSchema())
				  {
					subBuilder.mergeFrom(getSchema());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSchema(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 64:
				{
				  bitField0_ |= 0x00000080;
				  epoch_ = input.readUInt64();
				  break;
				}
				case 72:
				{
				  bitField0_ |= 0x00000100;
				  userProvidedProducerName_ = input.readBool();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string topic = 1;
		  internal object topic_ = "";
		  public bool hasTopic()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getTopic()
		  {
			object @ref = topic_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  topic_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setTopic(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			topic_ = value;

			return this;
		  }
		  public Builder clearTopic()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			topic_ = DefaultInstance.Topic;

			return this;
		  }
		  internal void setTopic(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			topic_ = value;

		  }

		  // required uint64 producer_id = 2;
		  internal long producerId_;
		  public bool hasProducerId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long ProducerId
		  {
			  get
			  {
				return producerId_;
			  }
		  }
		  public Builder setProducerId(long value)
		  {
			bitField0_ |= 0x00000002;
			producerId_ = value;

			return this;
		  }
		  public Builder clearProducerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			producerId_ = 0L;

			return this;
		  }

		  // required uint64 request_id = 3;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000004;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			requestId_ = 0L;

			return this;
		  }

		  // optional string producer_name = 4;
		  internal object producerName_ = "";
		  public bool hasProducerName()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public string getProducerName()
		  {
			object @ref = producerName_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  producerName_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setProducerName(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000008;
			producerName_ = value;

			return this;
		  }
		  public Builder clearProducerName()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			producerName_ = DefaultInstance.ProducerName;

			return this;
		  }
		  internal void setProducerName(ByteString value)
		  {
			bitField0_ |= 0x00000008;
			producerName_ = value;

		  }

		  // optional bool encrypted = 5 [default = false];
		  internal bool encrypted_;
		  public bool hasEncrypted()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public bool Encrypted
		  {
			  get
			  {
				return encrypted_;
			  }
		  }
		  public Builder setEncrypted(bool value)
		  {
			bitField0_ |= 0x00000010;
			encrypted_ = value;

			return this;
		  }
		  public Builder clearEncrypted()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			encrypted_ = false;

			return this;
		  }

		  // repeated .pulsar.proto.KeyValue metadata = 6;
		  internal IList<KeyValue> metadata_ = java.util.Collections.emptyList();
		  internal void ensureMetadataIsMutable()
		  {
			if (!((bitField0_ & 0x00000020) == 0x00000020))
			{
			  metadata_ = new List<KeyValue>(metadata_);
			  bitField0_ |= 0x00000020;
			}
		  }

		  public IList<KeyValue> MetadataList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(metadata_);
			  }
		  }
		  public int MetadataCount
		  {
			  get
			  {
				return metadata_.Count;
			  }
		  }
		  public KeyValue getMetadata(int index)
		  {
			return metadata_[index];
		  }
		  public Builder setMetadata(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_[index] = value;

			return this;
		  }
		  public Builder setMetadata(int index, KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addMetadata(KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_.Add(value);

			return this;
		  }
		  public Builder addMetadata(int index, KeyValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMetadataIsMutable();
			metadata_.Insert(index, value);

			return this;
		  }
		  public Builder addMetadata(KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addMetadata(int index, KeyValue.Builder builderForValue)
		  {
			ensureMetadataIsMutable();
			metadata_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllMetadata<T1>(IEnumerable<T1> values) where T1 : KeyValue
		  {
			ensureMetadataIsMutable();
			base.addAll(values, metadata_);

			return this;
		  }
		  public Builder clearMetadata()
		  {
			metadata_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000020);

			return this;
		  }
		  public Builder removeMetadata(int index)
		  {
			ensureMetadataIsMutable();
			metadata_.RemoveAt(index);

			return this;
		  }

		  // optional .pulsar.proto.Schema schema = 7;
		  internal Schema schema_ = Schema.DefaultInstance;
		  public bool hasSchema()
		  {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		  }
		  public Schema getSchema()
		  {
			return schema_;
		  }
		  public Builder setSchema(Schema value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			schema_ = value;

			bitField0_ |= 0x00000040;
			return this;
		  }
		  public Builder setSchema(Schema.Builder builderForValue)
		  {
			schema_ = builderForValue.build();

			bitField0_ |= 0x00000040;
			return this;
		  }
		  public Builder mergeSchema(Schema value)
		  {
			if (((bitField0_ & 0x00000040) == 0x00000040) && schema_ != Schema.DefaultInstance)
			{
			  schema_ = Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
			}
			else
			{
			  schema_ = value;
			}

			bitField0_ |= 0x00000040;
			return this;
		  }
		  public Builder clearSchema()
		  {
			schema_ = Schema.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000040);
			return this;
		  }

		  // optional uint64 epoch = 8 [default = 0];
		  internal long epoch_;
		  public bool hasEpoch()
		  {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		  }
		  public long Epoch
		  {
			  get
			  {
				return epoch_;
			  }
		  }
		  public Builder setEpoch(long value)
		  {
			bitField0_ |= 0x00000080;
			epoch_ = value;

			return this;
		  }
		  public Builder clearEpoch()
		  {
			bitField0_ = (bitField0_ & ~0x00000080);
			epoch_ = 0L;

			return this;
		  }

		  // optional bool user_provided_producer_name = 9 [default = true];
		  internal bool userProvidedProducerName_ = true;
		  public bool hasUserProvidedProducerName()
		  {
			return ((bitField0_ & 0x00000100) == 0x00000100);
		  }
		  public bool UserProvidedProducerName
		  {
			  get
			  {
				return userProvidedProducerName_;
			  }
		  }
		  public Builder setUserProvidedProducerName(bool value)
		  {
			bitField0_ |= 0x00000100;
			userProvidedProducerName_ = value;

			return this;
		  }
		  public Builder clearUserProvidedProducerName()
		  {
			bitField0_ = (bitField0_ & ~0x00000100);
			userProvidedProducerName_ = true;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandProducer)
		}

		static CommandProducer()
		{
		  defaultInstance = new CommandProducer(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandProducer)
	  }

	  public interface CommandSendOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 producer_id = 1;
		bool hasProducerId();
		long ProducerId {get;}

		// required uint64 sequence_id = 2;
		bool hasSequenceId();
		long SequenceId {get;}

		// optional int32 num_messages = 3 [default = 1];
		bool hasNumMessages();
		int NumMessages {get;}

		// optional uint64 txnid_least_bits = 4 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 5 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional uint64 highest_sequence_id = 6 [default = 0];
		bool hasHighestSequenceId();
		long HighestSequenceId {get;}
	  }
	  public sealed class CommandSend : CommandSendOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandSend.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandSend(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandSend> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandSend>
		 {
			 protected internal CommandSend newObject(Handle handle)
			 {
			   return new CommandSend(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandSend(bool noInit)
		{
		}

		internal static readonly CommandSend defaultInstance;
		public static CommandSend DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandSend DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 producer_id = 1;
		public const int PRODUCER_ID_FIELD_NUMBER = 1;
		internal long producerId_;
		public bool hasProducerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ProducerId
		{
			get
			{
			  return producerId_;
			}
		}

		// required uint64 sequence_id = 2;
		public const int SEQUENCE_ID_FIELD_NUMBER = 2;
		internal long sequenceId_;
		public bool hasSequenceId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long SequenceId
		{
			get
			{
			  return sequenceId_;
			}
		}

		// optional int32 num_messages = 3 [default = 1];
		public const int NUM_MESSAGES_FIELD_NUMBER = 3;
		internal int numMessages_;
		public bool hasNumMessages()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public int NumMessages
		{
			get
			{
			  return numMessages_;
			}
		}

		// optional uint64 txnid_least_bits = 4 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 4;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 5 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 5;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional uint64 highest_sequence_id = 6 [default = 0];
		public const int HIGHEST_SEQUENCE_ID_FIELD_NUMBER = 6;
		internal long highestSequenceId_;
		public bool hasHighestSequenceId()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public long HighestSequenceId
		{
			get
			{
			  return highestSequenceId_;
			}
		}

		internal void initFields()
		{
		  producerId_ = 0L;
		  sequenceId_ = 0L;
		  numMessages_ = 1;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  highestSequenceId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasProducerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSequenceId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, producerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, sequenceId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteInt32(3, numMessages_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteUInt64(4, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteUInt64(5, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.WriteUInt64(6, highestSequenceId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(producerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(sequenceId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeInt32Size(3, numMessages_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.ComputeUInt64Size(highestSequenceId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandSend parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSend parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandSend parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSend parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSend parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSend parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSend parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSend parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandSend parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSend parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSend parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandSend prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandSend, Builder>, CommandSendOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandSend.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			producerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			sequenceId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			numMessages_ = 1;
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000008);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000010);
			highestSequenceId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000020);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandSend DefaultInstanceForType
		  {
			  get
			  {
				return CommandSend.DefaultInstance;
			  }
		  }

		  public CommandSend build()
		  {
			CommandSend result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandSend buildParsed() throws InvalidProtocolBufferException
		  internal CommandSend buildParsed()
		  {
			CommandSend result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandSend buildPartial()
		  {
			CommandSend result = CommandSend.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.producerId_ = producerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.sequenceId_ = sequenceId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.numMessages_ = numMessages_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.highestSequenceId_ = highestSequenceId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandSend other)
		  {
			if (other == CommandSend.DefaultInstance)
			{
				return this;
			}
			if (other.hasProducerId())
			{
			  ProducerId = other.ProducerId;
			}
			if (other.hasSequenceId())
			{
			  SequenceId = other.SequenceId;
			}
			if (other.hasNumMessages())
			{
			  NumMessages = other.NumMessages;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasHighestSequenceId())
			{
			  HighestSequenceId = other.HighestSequenceId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasProducerId())
				{
    
				  return false;
				}
				if (!hasSequenceId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  producerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  sequenceId_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  numMessages_ = input.readInt32();
				  break;
				}
				case 32:
				{
				  bitField0_ |= 0x00000008;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 40:
				{
				  bitField0_ |= 0x00000010;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 48:
				{
				  bitField0_ |= 0x00000020;
				  highestSequenceId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 producer_id = 1;
		  internal long producerId_;
		  public bool hasProducerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ProducerId
		  {
			  get
			  {
				return producerId_;
			  }
		  }
		  public Builder setProducerId(long value)
		  {
			bitField0_ |= 0x00000001;
			producerId_ = value;

			return this;
		  }
		  public Builder clearProducerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			producerId_ = 0L;

			return this;
		  }

		  // required uint64 sequence_id = 2;
		  internal long sequenceId_;
		  public bool hasSequenceId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long SequenceId
		  {
			  get
			  {
				return sequenceId_;
			  }
		  }
		  public Builder setSequenceId(long value)
		  {
			bitField0_ |= 0x00000002;
			sequenceId_ = value;

			return this;
		  }
		  public Builder clearSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			sequenceId_ = 0L;

			return this;
		  }

		  // optional int32 num_messages = 3 [default = 1];
		  internal int numMessages_ = 1;
		  public bool hasNumMessages()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public int NumMessages
		  {
			  get
			  {
				return numMessages_;
			  }
		  }
		  public Builder setNumMessages(int value)
		  {
			bitField0_ |= 0x00000004;
			numMessages_ = value;

			return this;
		  }
		  public Builder clearNumMessages()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			numMessages_ = 1;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 4 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000008;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 5 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000010;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional uint64 highest_sequence_id = 6 [default = 0];
		  internal long highestSequenceId_;
		  public bool hasHighestSequenceId()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public long HighestSequenceId
		  {
			  get
			  {
				return highestSequenceId_;
			  }
		  }
		  public Builder setHighestSequenceId(long value)
		  {
			bitField0_ |= 0x00000020;
			highestSequenceId_ = value;

			return this;
		  }
		  public Builder clearHighestSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00000020);
			highestSequenceId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandSend)
		}

		static CommandSend()
		{
		  defaultInstance = new CommandSend(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandSend)
	  }

	  public interface CommandSendReceiptOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 producer_id = 1;
		bool hasProducerId();
		long ProducerId {get;}

		// required uint64 sequence_id = 2;
		bool hasSequenceId();
		long SequenceId {get;}

		// optional .pulsar.proto.MessageIdData message_id = 3;
		bool hasMessageId();
		MessageIdData MessageId {get;}

		// optional uint64 highest_sequence_id = 4 [default = 0];
		bool hasHighestSequenceId();
		long HighestSequenceId {get;}
	  }
	  public sealed class CommandSendReceipt : CommandSendReceiptOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandSendReceipt.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandSendReceipt(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandSendReceipt> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandSendReceipt>
		 {
			 protected internal CommandSendReceipt newObject(Handle handle)
			 {
			   return new CommandSendReceipt(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandSendReceipt(bool noInit)
		{
		}

		internal static readonly CommandSendReceipt defaultInstance;
		public static CommandSendReceipt DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandSendReceipt DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 producer_id = 1;
		public const int PRODUCER_ID_FIELD_NUMBER = 1;
		internal long producerId_;
		public bool hasProducerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ProducerId
		{
			get
			{
			  return producerId_;
			}
		}

		// required uint64 sequence_id = 2;
		public const int SEQUENCE_ID_FIELD_NUMBER = 2;
		internal long sequenceId_;
		public bool hasSequenceId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long SequenceId
		{
			get
			{
			  return sequenceId_;
			}
		}

		// optional .pulsar.proto.MessageIdData message_id = 3;
		public const int MESSAGE_ID_FIELD_NUMBER = 3;
		internal MessageIdData messageId_;
		public bool hasMessageId()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public MessageIdData MessageId
		{
			get
			{
			  return messageId_;
			}
		}

		// optional uint64 highest_sequence_id = 4 [default = 0];
		public const int HIGHEST_SEQUENCE_ID_FIELD_NUMBER = 4;
		internal long highestSequenceId_;
		public bool hasHighestSequenceId()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public long HighestSequenceId
		{
			get
			{
			  return highestSequenceId_;
			}
		}

		internal void initFields()
		{
		  producerId_ = 0L;
		  sequenceId_ = 0L;
		  messageId_ = MessageIdData.DefaultInstance;
		  highestSequenceId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasProducerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSequenceId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (hasMessageId())
			  {
				if (!MessageId.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, producerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, sequenceId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteMessage(3, messageId_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteUInt64(4, highestSequenceId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(producerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(sequenceId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeMessageSize(3, messageId_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.ComputeUInt64Size(highestSequenceId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandSendReceipt parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSendReceipt parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandSendReceipt parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSendReceipt parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSendReceipt parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSendReceipt parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSendReceipt parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSendReceipt parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandSendReceipt parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendReceipt parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSendReceipt parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandSendReceipt prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandSendReceipt, Builder>, CommandSendReceiptOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandSendReceipt.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			producerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			sequenceId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			messageId_ = MessageIdData.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000004);
			highestSequenceId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandSendReceipt DefaultInstanceForType
		  {
			  get
			  {
				return CommandSendReceipt.DefaultInstance;
			  }
		  }

		  public CommandSendReceipt build()
		  {
			CommandSendReceipt result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandSendReceipt buildParsed() throws InvalidProtocolBufferException
		  internal CommandSendReceipt buildParsed()
		  {
			CommandSendReceipt result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandSendReceipt buildPartial()
		  {
			CommandSendReceipt result = CommandSendReceipt.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.producerId_ = producerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.sequenceId_ = sequenceId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.messageId_ = messageId_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.highestSequenceId_ = highestSequenceId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandSendReceipt other)
		  {
			if (other == CommandSendReceipt.DefaultInstance)
			{
				return this;
			}
			if (other.hasProducerId())
			{
			  ProducerId = other.ProducerId;
			}
			if (other.hasSequenceId())
			{
			  SequenceId = other.SequenceId;
			}
			if (other.hasMessageId())
			{
			  mergeMessageId(other.MessageId);
			}
			if (other.hasHighestSequenceId())
			{
			  HighestSequenceId = other.HighestSequenceId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasProducerId())
				{
    
				  return false;
				}
				if (!hasSequenceId())
				{
    
				  return false;
				}
				if (hasMessageId())
				{
				  if (!getMessageId().Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  producerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  sequenceId_ = input.readUInt64();
				  break;
				}
				case 26:
				{
				  MessageIdData.Builder subBuilder = MessageIdData.newBuilder();
				  if (hasMessageId())
				  {
					subBuilder.mergeFrom(getMessageId());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setMessageId(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 32:
				{
				  bitField0_ |= 0x00000008;
				  highestSequenceId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 producer_id = 1;
		  internal long producerId_;
		  public bool hasProducerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ProducerId
		  {
			  get
			  {
				return producerId_;
			  }
		  }
		  public Builder setProducerId(long value)
		  {
			bitField0_ |= 0x00000001;
			producerId_ = value;

			return this;
		  }
		  public Builder clearProducerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			producerId_ = 0L;

			return this;
		  }

		  // required uint64 sequence_id = 2;
		  internal long sequenceId_;
		  public bool hasSequenceId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long SequenceId
		  {
			  get
			  {
				return sequenceId_;
			  }
		  }
		  public Builder setSequenceId(long value)
		  {
			bitField0_ |= 0x00000002;
			sequenceId_ = value;

			return this;
		  }
		  public Builder clearSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			sequenceId_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.MessageIdData message_id = 3;
		  internal MessageIdData messageId_ = MessageIdData.DefaultInstance;
		  public bool hasMessageId()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public MessageIdData getMessageId()
		  {
			return messageId_;
		  }
		  public Builder setMessageId(MessageIdData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			messageId_ = value;

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder setMessageId(MessageIdData.Builder builderForValue)
		  {
			messageId_ = builderForValue.build();

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder mergeMessageId(MessageIdData value)
		  {
			if (((bitField0_ & 0x00000004) == 0x00000004) && messageId_ != MessageIdData.DefaultInstance)
			{
			  messageId_ = MessageIdData.newBuilder(messageId_).mergeFrom(value).buildPartial();
			}
			else
			{
			  messageId_ = value;
			}

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder clearMessageId()
		  {
			messageId_ = MessageIdData.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  // optional uint64 highest_sequence_id = 4 [default = 0];
		  internal long highestSequenceId_;
		  public bool hasHighestSequenceId()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public long HighestSequenceId
		  {
			  get
			  {
				return highestSequenceId_;
			  }
		  }
		  public Builder setHighestSequenceId(long value)
		  {
			bitField0_ |= 0x00000008;
			highestSequenceId_ = value;

			return this;
		  }
		  public Builder clearHighestSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			highestSequenceId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandSendReceipt)
		}

		static CommandSendReceipt()
		{
		  defaultInstance = new CommandSendReceipt(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandSendReceipt)
	  }

	  public interface CommandSendErrorOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 producer_id = 1;
		bool hasProducerId();
		long ProducerId {get;}

		// required uint64 sequence_id = 2;
		bool hasSequenceId();
		long SequenceId {get;}

		// required .pulsar.proto.ServerError error = 3;
		bool hasError();
		ServerError Error {get;}

		// required string message = 4;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandSendError : CommandSendErrorOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandSendError.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandSendError(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandSendError> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandSendError>
		 {
			 protected internal CommandSendError newObject(Handle handle)
			 {
			   return new CommandSendError(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandSendError(bool noInit)
		{
		}

		internal static readonly CommandSendError defaultInstance;
		public static CommandSendError DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandSendError DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 producer_id = 1;
		public const int PRODUCER_ID_FIELD_NUMBER = 1;
		internal long producerId_;
		public bool hasProducerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ProducerId
		{
			get
			{
			  return producerId_;
			}
		}

		// required uint64 sequence_id = 2;
		public const int SEQUENCE_ID_FIELD_NUMBER = 2;
		internal long sequenceId_;
		public bool hasSequenceId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long SequenceId
		{
			get
			{
			  return sequenceId_;
			}
		}

		// required .pulsar.proto.ServerError error = 3;
		public const int ERROR_FIELD_NUMBER = 3;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// required string message = 4;
		public const int MESSAGE_FIELD_NUMBER = 4;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  producerId_ = 0L;
		  sequenceId_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasProducerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSequenceId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasError())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasMessage())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, producerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, sequenceId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.writeEnum(3, error_.Number);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteBytes(4, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(producerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(sequenceId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeEnumSize(3, error_.Number);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeBytesSize(4, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandSendError parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSendError parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandSendError parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSendError parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSendError parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSendError parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSendError parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSendError parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandSendError parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSendError parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSendError parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandSendError prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandSendError, Builder>, CommandSendErrorOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandSendError.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			producerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			sequenceId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000004);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandSendError DefaultInstanceForType
		  {
			  get
			  {
				return CommandSendError.DefaultInstance;
			  }
		  }

		  public CommandSendError build()
		  {
			CommandSendError result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandSendError buildParsed() throws InvalidProtocolBufferException
		  internal CommandSendError buildParsed()
		  {
			CommandSendError result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandSendError buildPartial()
		  {
			CommandSendError result = CommandSendError.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.producerId_ = producerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.sequenceId_ = sequenceId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandSendError other)
		  {
			if (other == CommandSendError.DefaultInstance)
			{
				return this;
			}
			if (other.hasProducerId())
			{
			  ProducerId = other.ProducerId;
			}
			if (other.hasSequenceId())
			{
			  SequenceId = other.SequenceId;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasProducerId())
				{
    
				  return false;
				}
				if (!hasSequenceId())
				{
    
				  return false;
				}
				if (!hasError())
				{
    
				  return false;
				}
				if (!hasMessage())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  producerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  sequenceId_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000004;
					error_ = value;
				  }
				  break;
				}
				case 34:
				{
				  bitField0_ |= 0x00000008;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 producer_id = 1;
		  internal long producerId_;
		  public bool hasProducerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ProducerId
		  {
			  get
			  {
				return producerId_;
			  }
		  }
		  public Builder setProducerId(long value)
		  {
			bitField0_ |= 0x00000001;
			producerId_ = value;

			return this;
		  }
		  public Builder clearProducerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			producerId_ = 0L;

			return this;
		  }

		  // required uint64 sequence_id = 2;
		  internal long sequenceId_;
		  public bool hasSequenceId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long SequenceId
		  {
			  get
			  {
				return sequenceId_;
			  }
		  }
		  public Builder setSequenceId(long value)
		  {
			bitField0_ |= 0x00000002;
			sequenceId_ = value;

			return this;
		  }
		  public Builder clearSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			sequenceId_ = 0L;

			return this;
		  }

		  // required .pulsar.proto.ServerError error = 3;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000004;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // required string message = 4;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000008;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000008;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandSendError)
		}

		static CommandSendError()
		{
		  defaultInstance = new CommandSendError(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandSendError)
	  }

	  public interface CommandMessageOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// required .pulsar.proto.MessageIdData message_id = 2;
		bool hasMessageId();
		MessageIdData MessageId {get;}

		// optional uint32 redelivery_count = 3 [default = 0];
		bool hasRedeliveryCount();
		int RedeliveryCount {get;}
	  }
	  public sealed class CommandMessage : CommandMessageOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandMessage.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandMessage(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandMessage> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandMessage>
		 {
			 protected internal CommandMessage newObject(Handle handle)
			 {
			   return new CommandMessage(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandMessage(bool noInit)
		{
		}

		internal static readonly CommandMessage defaultInstance;
		public static CommandMessage DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandMessage DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// required .pulsar.proto.MessageIdData message_id = 2;
		public const int MESSAGE_ID_FIELD_NUMBER = 2;
		internal MessageIdData messageId_;
		public bool hasMessageId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public MessageIdData MessageId
		{
			get
			{
			  return messageId_;
			}
		}

		// optional uint32 redelivery_count = 3 [default = 0];
		public const int REDELIVERY_COUNT_FIELD_NUMBER = 3;
		internal int redeliveryCount_;
		public bool hasRedeliveryCount()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public int RedeliveryCount
		{
			get
			{
			  return redeliveryCount_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  messageId_ = MessageIdData.DefaultInstance;
		  redeliveryCount_ = 0;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasMessageId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!MessageId.Initialized)
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteMessage(2, messageId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt32(3, redeliveryCount_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeMessageSize(2, messageId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeUInt32Size(3, redeliveryCount_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandMessage parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandMessage parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandMessage parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandMessage parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandMessage parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandMessage parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandMessage parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandMessage parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandMessage parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandMessage parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandMessage parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandMessage prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandMessage, Builder>, CommandMessageOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandMessage.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			messageId_ = MessageIdData.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000002);
			redeliveryCount_ = 0;
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandMessage DefaultInstanceForType
		  {
			  get
			  {
				return CommandMessage.DefaultInstance;
			  }
		  }

		  public CommandMessage build()
		  {
			CommandMessage result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandMessage buildParsed() throws InvalidProtocolBufferException
		  internal CommandMessage buildParsed()
		  {
			CommandMessage result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandMessage buildPartial()
		  {
			CommandMessage result = CommandMessage.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.messageId_ = messageId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.redeliveryCount_ = redeliveryCount_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandMessage other)
		  {
			if (other == CommandMessage.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasMessageId())
			{
			  mergeMessageId(other.MessageId);
			}
			if (other.hasRedeliveryCount())
			{
			  RedeliveryCount = other.RedeliveryCount;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				if (!hasMessageId())
				{
    
				  return false;
				}
				if (!getMessageId().Initialized)
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 18:
				{
				  MessageIdData.Builder subBuilder = MessageIdData.newBuilder();
				  if (hasMessageId())
				  {
					subBuilder.mergeFrom(getMessageId());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setMessageId(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  redeliveryCount_ = input.readUInt32();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // required .pulsar.proto.MessageIdData message_id = 2;
		  internal MessageIdData messageId_ = MessageIdData.DefaultInstance;
		  public bool hasMessageId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public MessageIdData getMessageId()
		  {
			return messageId_;
		  }
		  public Builder setMessageId(MessageIdData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			messageId_ = value;

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder setMessageId(MessageIdData.Builder builderForValue)
		  {
			messageId_ = builderForValue.build();

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder mergeMessageId(MessageIdData value)
		  {
			if (((bitField0_ & 0x00000002) == 0x00000002) && messageId_ != MessageIdData.DefaultInstance)
			{
			  messageId_ = MessageIdData.newBuilder(messageId_).mergeFrom(value).buildPartial();
			}
			else
			{
			  messageId_ = value;
			}

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder clearMessageId()
		  {
			messageId_ = MessageIdData.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  // optional uint32 redelivery_count = 3 [default = 0];
		  internal int redeliveryCount_;
		  public bool hasRedeliveryCount()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public int RedeliveryCount
		  {
			  get
			  {
				return redeliveryCount_;
			  }
		  }
		  public Builder setRedeliveryCount(int value)
		  {
			bitField0_ |= 0x00000004;
			redeliveryCount_ = value;

			return this;
		  }
		  public Builder clearRedeliveryCount()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			redeliveryCount_ = 0;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandMessage)
		}

		static CommandMessage()
		{
		  defaultInstance = new CommandMessage(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandMessage)
	  }

	  public interface CommandAckOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// required .pulsar.proto.CommandAck.AckType ack_type = 2;
		bool hasAckType();
		CommandAck.AckType AckType {get;}

		// repeated .pulsar.proto.MessageIdData message_id = 3;
		IList<MessageIdData> MessageIdList {get;}
		MessageIdData getMessageId(int index);
		int MessageIdCount {get;}

		// optional .pulsar.proto.CommandAck.ValidationError validation_error = 4;
		bool hasValidationError();
		CommandAck.ValidationError ValidationError {get;}

		// repeated .pulsar.proto.KeyLongValue properties = 5;
		IList<KeyLongValue> PropertiesList {get;}
		KeyLongValue getProperties(int index);
		int PropertiesCount {get;}

		// optional uint64 txnid_least_bits = 6 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 7 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}
	  }
	  public sealed class CommandAck : CommandAckOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandAck.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandAck(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandAck> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandAck>
		 {
			 protected internal CommandAck newObject(Handle handle)
			 {
			   return new CommandAck(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandAck(bool noInit)
		{
		}

		internal static readonly CommandAck defaultInstance;
		public static CommandAck DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandAck DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		public sealed class AckType : Internal.EnumLite
		{
		  public static readonly AckType Individual = new AckType("Individual", InnerEnum.Individual, 0, 0);
		  public static readonly AckType Cumulative = new AckType("Cumulative", InnerEnum.Cumulative, 1, 1);

		  private static readonly IList<AckType> valueList = new List<AckType>();

		  static AckType()
		  {
			  valueList.Add(Individual);
			  valueList.Add(Cumulative);
		  }

		  public enum InnerEnum
		  {
			  Individual,
			  Cumulative
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int Individual_VALUE = 0;
		  public const int Cumulative_VALUE = 1;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static AckType valueOf(int value)
		  {
			switch (value)
			{
			  case 0:
				  return Individual;
			  case 1:
				  return Cumulative;
			  default:
				  return null;
			}
		  }

		  public static IList<AckType> internalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<AckType> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal AckType(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<AckType>
	//	  {
	//		  public AckType findValueByNumber(int number)
	//		  {
	//			return AckType.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.CommandAck.AckType)

			public static IList<AckType> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		public sealed class ValidationError : Internal.EnumLite
		{
		  public static readonly ValidationError UncompressedSizeCorruption = new ValidationError("UncompressedSizeCorruption", InnerEnum.UncompressedSizeCorruption, 0, 0);
		  public static readonly ValidationError DecompressionError = new ValidationError("DecompressionError", InnerEnum.DecompressionError, 1, 1);
		  public static readonly ValidationError ChecksumMismatch = new ValidationError("ChecksumMismatch", InnerEnum.ChecksumMismatch, 2, 2);
		  public static readonly ValidationError BatchDeSerializeError = new ValidationError("BatchDeSerializeError", InnerEnum.BatchDeSerializeError, 3, 3);
		  public static readonly ValidationError DecryptionError = new ValidationError("DecryptionError", InnerEnum.DecryptionError, 4, 4);

		  private static readonly IList<ValidationError> valueList = new List<ValidationError>();

		  static ValidationError()
		  {
			  valueList.Add(UncompressedSizeCorruption);
			  valueList.Add(DecompressionError);
			  valueList.Add(ChecksumMismatch);
			  valueList.Add(BatchDeSerializeError);
			  valueList.Add(DecryptionError);
		  }

		  public enum InnerEnum
		  {
			  UncompressedSizeCorruption,
			  DecompressionError,
			  ChecksumMismatch,
			  BatchDeSerializeError,
			  DecryptionError
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int UncompressedSizeCorruption_VALUE = 0;
		  public const int DecompressionError_VALUE = 1;
		  public const int ChecksumMismatch_VALUE = 2;
		  public const int BatchDeSerializeError_VALUE = 3;
		  public const int DecryptionError_VALUE = 4;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static ValidationError valueOf(int value)
		  {
			switch (value)
			{
			  case 0:
				  return UncompressedSizeCorruption;
			  case 1:
				  return DecompressionError;
			  case 2:
				  return ChecksumMismatch;
			  case 3:
				  return BatchDeSerializeError;
			  case 4:
				  return DecryptionError;
			  default:
				  return null;
			}
		  }

		  public static IList<ValidationError> internalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<ValidationError> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal ValidationError(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<ValidationError>
	//	  {
	//		  public ValidationError findValueByNumber(int number)
	//		  {
	//			return ValidationError.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.CommandAck.ValidationError)

			public static IList<ValidationError> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// required .pulsar.proto.CommandAck.AckType ack_type = 2;
		public const int ACK_TYPE_FIELD_NUMBER = 2;
		internal CommandAck.AckType ackType_;
		public bool hasAckType()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public CommandAck.AckType getAckType()
		{
		  return ackType_;
		}

		// repeated .pulsar.proto.MessageIdData message_id = 3;
		public const int MESSAGE_ID_FIELD_NUMBER = 3;
		internal IList<MessageIdData> messageId_;
		public IList<MessageIdData> MessageIdList
		{
			get
			{
			  return messageId_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends MessageIdDataOrBuilder> getMessageIdOrBuilderList()
		public IList<MessageIdDataOrBuilder> MessageIdOrBuilderList
		{
			get
			{
			  return messageId_;
			}
		}
		public int MessageIdCount
		{
			get
			{
			  return messageId_.Count;
			}
		}
		public MessageIdData getMessageId(int index)
		{
		  return messageId_[index];
		}
		public MessageIdDataOrBuilder getMessageIdOrBuilder(int index)
		{
		  return messageId_[index];
		}

		// optional .pulsar.proto.CommandAck.ValidationError validation_error = 4;
		public const int VALIDATION_ERROR_FIELD_NUMBER = 4;
		internal CommandAck.ValidationError validationError_;
		public bool hasValidationError()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public CommandAck.ValidationError getValidationError()
		{
		  return validationError_;
		}

		// repeated .pulsar.proto.KeyLongValue properties = 5;
		public const int PROPERTIES_FIELD_NUMBER = 5;
		internal IList<KeyLongValue> properties_;
		public IList<KeyLongValue> PropertiesList
		{
			get
			{
			  return properties_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends KeyLongValueOrBuilder> getPropertiesOrBuilderList()
		public IList<KeyLongValueOrBuilder> PropertiesOrBuilderList
		{
			get
			{
			  return properties_;
			}
		}
		public int PropertiesCount
		{
			get
			{
			  return properties_.Count;
			}
		}
		public KeyLongValue getProperties(int index)
		{
		  return properties_[index];
		}
		public KeyLongValueOrBuilder getPropertiesOrBuilder(int index)
		{
		  return properties_[index];
		}

		// optional uint64 txnid_least_bits = 6 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 6;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 7 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 7;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  ackType_ = CommandAck.AckType.Individual;
		  messageId_ = java.util.Collections.emptyList();
		  validationError_ = CommandAck.ValidationError.UncompressedSizeCorruption;
		  properties_ = java.util.Collections.emptyList();
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasAckType())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < MessageIdCount; i++)
			  {
				if (!getMessageId(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  for (int i = 0; i < PropertiesCount; i++)
			  {
				if (!getProperties(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.writeEnum(2, ackType_.Number);
		  }
		  for (int i = 0; i < messageId_.Count; i++)
		  {
			output.WriteMessage(3, messageId_[i]);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.writeEnum(4, validationError_.Number);
		  }
		  for (int i = 0; i < properties_.Count; i++)
		  {
			output.WriteMessage(5, properties_[i]);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteUInt64(6, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteUInt64(7, txnidMostBits_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeEnumSize(2, ackType_.Number);
			  }
			  for (int i = 0; i < messageId_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(3, messageId_[i]);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeEnumSize(4, validationError_.Number);
			  }
			  for (int i = 0; i < properties_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(5, properties_[i]);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandAck parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAck parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandAck parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAck parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAck parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAck parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAck parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAck parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandAck parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAck parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAck parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandAck prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandAck, Builder>, CommandAckOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandAck.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass();

		  private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			ackType_ = CommandAck.AckType.Individual;
			bitField0_ = (bitField0_ & ~0x00000002);
			messageId_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000004);
			validationError_ = CommandAck.ValidationError.UncompressedSizeCorruption;
			bitField0_ = (bitField0_ & ~0x00000008);
			properties_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000010);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000020);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000040);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandAck DefaultInstanceForType
		  {
			  get
			  {
				return CommandAck.DefaultInstance;
			  }
		  }

		  public CommandAck build()
		  {
			CommandAck result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandAck buildParsed() throws InvalidProtocolBufferException
		  internal CommandAck buildParsed()
		  {
			CommandAck result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandAck buildPartial()
		  {
			CommandAck result = CommandAck.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.ackType_ = ackType_;
			if (((bitField0_ & 0x00000004) == 0x00000004))
			{
			  messageId_ = java.util.Collections.unmodifiableList(messageId_);
			  bitField0_ = (bitField0_ & ~0x00000004);
			}
			result.messageId_ = messageId_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.validationError_ = validationError_;
			if (((bitField0_ & 0x00000010) == 0x00000010))
			{
			  properties_ = java.util.Collections.unmodifiableList(properties_);
			  bitField0_ = (bitField0_ & ~0x00000010);
			}
			result.properties_ = properties_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000040) == 0x00000040))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.txnidMostBits_ = txnidMostBits_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandAck other)
		  {
			if (other == CommandAck.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasAckType())
			{
			  AckType = other.getAckType();
			}
			if (other.messageId_.Count > 0)
			{
			  if (messageId_.Count == 0)
			  {
				messageId_ = other.messageId_;
				bitField0_ = (bitField0_ & ~0x00000004);
			  }
			  else
			  {
				ensureMessageIdIsMutable();
				((List<MessageIdData>)messageId_).AddRange(other.messageId_);
			  }

			}
			if (other.hasValidationError())
			{
			  ValidationError = other.getValidationError();
			}
			if (other.properties_.Count > 0)
			{
			  if (properties_.Count == 0)
			  {
				properties_ = other.properties_;
				bitField0_ = (bitField0_ & ~0x00000010);
			  }
			  else
			  {
				ensurePropertiesIsMutable();
				((List<KeyLongValue>)properties_).AddRange(other.properties_);
			  }

			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				if (!hasAckType())
				{
    
				  return false;
				}
				for (int i = 0; i < MessageIdCount; i++)
				{
				  if (!getMessageId(i).Initialized)
				  {
    
					return false;
				  }
				}
				for (int i = 0; i < PropertiesCount; i++)
				{
				  if (!getProperties(i).Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  int rawValue = input.readEnum();
				  CommandAck.AckType value = CommandAck.AckType.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000002;
					ackType_ = value;
				  }
				  break;
				}
				case 26:
				{
				  MessageIdData.Builder subBuilder = MessageIdData.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addMessageId(subBuilder.buildPartial());
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  CommandAck.ValidationError value = CommandAck.ValidationError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					validationError_ = value;
				  }
				  break;
				}
				case 42:
				{
				  KeyLongValue.Builder subBuilder = KeyLongValue.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addProperties(subBuilder.buildPartial());
				  break;
				}
				case 48:
				{
				  bitField0_ |= 0x00000020;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 56:
				{
				  bitField0_ |= 0x00000040;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // required .pulsar.proto.CommandAck.AckType ack_type = 2;
		  internal CommandAck.AckType ackType_ = CommandAck.AckType.Individual;
		  public bool hasAckType()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public CommandAck.AckType AckType
		  {
			  get
			  {
				return ackType_;
			  }
		  }
		  public Builder setAckType(CommandAck.AckType value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000002;
			ackType_ = value;

			return this;
		  }
		  public Builder clearAckType()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			ackType_ = CommandAck.AckType.Individual;

			return this;
		  }

		  // repeated .pulsar.proto.MessageIdData message_id = 3;
		  internal IList<MessageIdData> messageId_ = java.util.Collections.emptyList();
		  internal void ensureMessageIdIsMutable()
		  {
			if (!((bitField0_ & 0x00000004) == 0x00000004))
			{
			  messageId_ = new List<MessageIdData>(messageId_);
			  bitField0_ |= 0x00000004;
			}
		  }

		  public IList<MessageIdData> MessageIdList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(messageId_);
			  }
		  }
		  public int MessageIdCount
		  {
			  get
			  {
				return messageId_.Count;
			  }
		  }
		  public MessageIdData getMessageId(int index)
		  {
			return messageId_[index];
		  }
		  public Builder setMessageId(int index, MessageIdData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMessageIdIsMutable();
			messageId_[index] = value;

			return this;
		  }
		  public Builder setMessageId(int index, MessageIdData.Builder builderForValue)
		  {
			ensureMessageIdIsMutable();
			messageId_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addMessageId(MessageIdData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMessageIdIsMutable();
			messageId_.Add(value);

			return this;
		  }
		  public Builder addMessageId(int index, MessageIdData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureMessageIdIsMutable();
			messageId_.Insert(index, value);

			return this;
		  }
		  public Builder addMessageId(MessageIdData.Builder builderForValue)
		  {
			ensureMessageIdIsMutable();
			messageId_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addMessageId(int index, MessageIdData.Builder builderForValue)
		  {
			ensureMessageIdIsMutable();
			messageId_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllMessageId<T1>(IEnumerable<T1> values) where T1 : MessageIdData
		  {
			ensureMessageIdIsMutable();
			base.addAll(values, messageId_);

			return this;
		  }
		  public Builder clearMessageId()
		  {
			messageId_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000004);

			return this;
		  }
		  public Builder removeMessageId(int index)
		  {
			ensureMessageIdIsMutable();
			messageId_.RemoveAt(index);

			return this;
		  }

		  // optional .pulsar.proto.CommandAck.ValidationError validation_error = 4;
		  internal CommandAck.ValidationError validationError_ = CommandAck.ValidationError.UncompressedSizeCorruption;
		  public bool hasValidationError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public CommandAck.ValidationError ValidationError
		  {
			  get
			  {
				return validationError_;
			  }
		  }
		  public Builder setValidationError(CommandAck.ValidationError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			validationError_ = value;

			return this;
		  }
		  public Builder clearValidationError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			validationError_ = CommandAck.ValidationError.UncompressedSizeCorruption;

			return this;
		  }

		  // repeated .pulsar.proto.KeyLongValue properties = 5;
		  internal IList<KeyLongValue> properties_ = java.util.Collections.emptyList();
		  internal void ensurePropertiesIsMutable()
		  {
			if (!((bitField0_ & 0x00000010) == 0x00000010))
			{
			  properties_ = new List<KeyLongValue>(properties_);
			  bitField0_ |= 0x00000010;
			}
		  }

		  public IList<KeyLongValue> PropertiesList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(properties_);
			  }
		  }
		  public int PropertiesCount
		  {
			  get
			  {
				return properties_.Count;
			  }
		  }
		  public KeyLongValue getProperties(int index)
		  {
			return properties_[index];
		  }
		  public Builder setProperties(int index, KeyLongValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_[index] = value;

			return this;
		  }
		  public Builder setProperties(int index, KeyLongValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addProperties(KeyLongValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_.Add(value);

			return this;
		  }
		  public Builder addProperties(int index, KeyLongValue value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensurePropertiesIsMutable();
			properties_.Insert(index, value);

			return this;
		  }
		  public Builder addProperties(KeyLongValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addProperties(int index, KeyLongValue.Builder builderForValue)
		  {
			ensurePropertiesIsMutable();
			properties_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllProperties<T1>(IEnumerable<T1> values) where T1 : KeyLongValue
		  {
			ensurePropertiesIsMutable();
			base.addAll(values, properties_);

			return this;
		  }
		  public Builder clearProperties()
		  {
			properties_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000010);

			return this;
		  }
		  public Builder removeProperties(int index)
		  {
			ensurePropertiesIsMutable();
			properties_.RemoveAt(index);

			return this;
		  }

		  // optional uint64 txnid_least_bits = 6 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000020;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000020);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 7 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000040;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000040);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandAck)
		}

		static CommandAck()
		{
		  defaultInstance = new CommandAck(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandAck)
	  }

	  public interface CommandAckResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.ServerError error = 4;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 5;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandAckResponse : CommandAckResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandAckResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandAckResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandAckResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandAckResponse>
		 {
			 protected internal CommandAckResponse newObject(Handle handle)
			 {
			   return new CommandAckResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandAckResponse(bool noInit)
		{
		}

		internal static readonly CommandAckResponse defaultInstance;
		public static CommandAckResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandAckResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.ServerError error = 4;
		public const int ERROR_FIELD_NUMBER = 4;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 5;
		public const int MESSAGE_FIELD_NUMBER = 5;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, error_.Number);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, error_.Number);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandAckResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAckResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandAckResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAckResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAckResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAckResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAckResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAckResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandAckResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAckResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAckResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandAckResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandAckResponse, Builder>, CommandAckResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandAckResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandAckResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandAckResponse.DefaultInstance;
			  }
		  }

		  public CommandAckResponse build()
		  {
			CommandAckResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandAckResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandAckResponse buildParsed()
		  {
			CommandAckResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandAckResponse buildPartial()
		  {
			CommandAckResponse result = CommandAckResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandAckResponse other)
		  {
			if (other == CommandAckResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					error_ = value;
				  }
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 4;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 5;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandAckResponse)
		}

		static CommandAckResponse()
		{
		  defaultInstance = new CommandAckResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandAckResponse)
	  }

	  public interface CommandActiveConsumerChangeOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// optional bool is_active = 2 [default = false];
		bool hasIsActive();
		bool IsActive {get;}
	  }
	  public sealed class CommandActiveConsumerChange : CommandActiveConsumerChangeOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandActiveConsumerChange.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandActiveConsumerChange(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandActiveConsumerChange> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandActiveConsumerChange>
		 {
			 protected internal CommandActiveConsumerChange newObject(Handle handle)
			 {
			   return new CommandActiveConsumerChange(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandActiveConsumerChange(bool noInit)
		{
		}

		internal static readonly CommandActiveConsumerChange defaultInstance;
		public static CommandActiveConsumerChange DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandActiveConsumerChange DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// optional bool is_active = 2 [default = false];
		public const int IS_ACTIVE_FIELD_NUMBER = 2;
		internal bool isActive_;
		public bool hasIsActive()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public bool IsActive
		{
			get
			{
			  return isActive_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  isActive_ = false;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBool(2, isActive_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBoolSize(2, isActive_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandActiveConsumerChange parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandActiveConsumerChange parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandActiveConsumerChange parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandActiveConsumerChange parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandActiveConsumerChange parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandActiveConsumerChange parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandActiveConsumerChange parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandActiveConsumerChange parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandActiveConsumerChange parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandActiveConsumerChange parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandActiveConsumerChange parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandActiveConsumerChange prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandActiveConsumerChange, Builder>, CommandActiveConsumerChangeOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandActiveConsumerChange.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			isActive_ = false;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandActiveConsumerChange DefaultInstanceForType
		  {
			  get
			  {
				return CommandActiveConsumerChange.DefaultInstance;
			  }
		  }

		  public CommandActiveConsumerChange build()
		  {
			CommandActiveConsumerChange result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandActiveConsumerChange buildParsed() throws InvalidProtocolBufferException
		  internal CommandActiveConsumerChange buildParsed()
		  {
			CommandActiveConsumerChange result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandActiveConsumerChange buildPartial()
		  {
			CommandActiveConsumerChange result = CommandActiveConsumerChange.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.isActive_ = isActive_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandActiveConsumerChange other)
		  {
			if (other == CommandActiveConsumerChange.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasIsActive())
			{
			  IsActive = other.IsActive;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  isActive_ = input.readBool();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // optional bool is_active = 2 [default = false];
		  internal bool isActive_;
		  public bool hasIsActive()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public bool IsActive
		  {
			  get
			  {
				return isActive_;
			  }
		  }
		  public Builder setIsActive(bool value)
		  {
			bitField0_ |= 0x00000002;
			isActive_ = value;

			return this;
		  }
		  public Builder clearIsActive()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			isActive_ = false;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandActiveConsumerChange)
		}

		static CommandActiveConsumerChange()
		{
		  defaultInstance = new CommandActiveConsumerChange(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandActiveConsumerChange)
	  }

	  public interface CommandFlowOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// required uint32 messagePermits = 2;
		bool hasMessagePermits();
		int MessagePermits {get;}
	  }
	  public sealed class CommandFlow : CommandFlowOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandFlow.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandFlow(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandFlow> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandFlow>
		 {
			 protected internal CommandFlow newObject(Handle handle)
			 {
			   return new CommandFlow(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandFlow(bool noInit)
		{
		}

		internal static readonly CommandFlow defaultInstance;
		public static CommandFlow DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandFlow DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// required uint32 messagePermits = 2;
		public const int MESSAGEPERMITS_FIELD_NUMBER = 2;
		internal int messagePermits_;
		public bool hasMessagePermits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public int MessagePermits
		{
			get
			{
			  return messagePermits_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  messagePermits_ = 0;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasMessagePermits())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt32(2, messagePermits_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeUInt32Size(2, messagePermits_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandFlow parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandFlow parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandFlow parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandFlow parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandFlow parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandFlow parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandFlow parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandFlow parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandFlow parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandFlow parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandFlow parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandFlow prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandFlow, Builder>, CommandFlowOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandFlow.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			messagePermits_ = 0;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandFlow DefaultInstanceForType
		  {
			  get
			  {
				return CommandFlow.DefaultInstance;
			  }
		  }

		  public CommandFlow build()
		  {
			CommandFlow result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandFlow buildParsed() throws InvalidProtocolBufferException
		  internal CommandFlow buildParsed()
		  {
			CommandFlow result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandFlow buildPartial()
		  {
			CommandFlow result = CommandFlow.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.messagePermits_ = messagePermits_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandFlow other)
		  {
			if (other == CommandFlow.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasMessagePermits())
			{
			  MessagePermits = other.MessagePermits;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				if (!hasMessagePermits())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  messagePermits_ = input.readUInt32();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // required uint32 messagePermits = 2;
		  internal int messagePermits_;
		  public bool hasMessagePermits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public int MessagePermits
		  {
			  get
			  {
				return messagePermits_;
			  }
		  }
		  public Builder setMessagePermits(int value)
		  {
			bitField0_ |= 0x00000002;
			messagePermits_ = value;

			return this;
		  }
		  public Builder clearMessagePermits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			messagePermits_ = 0;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandFlow)
		}

		static CommandFlow()
		{
		  defaultInstance = new CommandFlow(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandFlow)
	  }

	  public interface CommandUnsubscribeOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}
	  }
	  public sealed class CommandUnsubscribe : CommandUnsubscribeOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandUnsubscribe.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandUnsubscribe(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandUnsubscribe> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandUnsubscribe>
		 {
			 protected internal CommandUnsubscribe newObject(Handle handle)
			 {
			   return new CommandUnsubscribe(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandUnsubscribe(bool noInit)
		{
		}

		internal static readonly CommandUnsubscribe defaultInstance;
		public static CommandUnsubscribe DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandUnsubscribe DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  requestId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandUnsubscribe parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandUnsubscribe parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandUnsubscribe parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandUnsubscribe parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandUnsubscribe parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandUnsubscribe parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandUnsubscribe parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandUnsubscribe parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandUnsubscribe parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandUnsubscribe parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandUnsubscribe parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandUnsubscribe prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandUnsubscribe, Builder>, CommandUnsubscribeOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandUnsubscribe.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandUnsubscribe DefaultInstanceForType
		  {
			  get
			  {
				return CommandUnsubscribe.DefaultInstance;
			  }
		  }

		  public CommandUnsubscribe build()
		  {
			CommandUnsubscribe result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandUnsubscribe buildParsed() throws InvalidProtocolBufferException
		  internal CommandUnsubscribe buildParsed()
		  {
			CommandUnsubscribe result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandUnsubscribe buildPartial()
		  {
			CommandUnsubscribe result = CommandUnsubscribe.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandUnsubscribe other)
		  {
			if (other == CommandUnsubscribe.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandUnsubscribe)
		}

		static CommandUnsubscribe()
		{
		  defaultInstance = new CommandUnsubscribe(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandUnsubscribe)
	  }

	  public interface CommandSeekOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}

		// optional .pulsar.proto.MessageIdData message_id = 3;
		bool hasMessageId();
		MessageIdData MessageId {get;}

		// optional uint64 message_publish_time = 4;
		bool hasMessagePublishTime();
		long MessagePublishTime {get;}
	  }
	  public sealed class CommandSeek : CommandSeekOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandSeek.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandSeek(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandSeek> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandSeek>
		 {
			 protected internal CommandSeek newObject(Handle handle)
			 {
			   return new CommandSeek(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandSeek(bool noInit)
		{
		}

		internal static readonly CommandSeek defaultInstance;
		public static CommandSeek DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandSeek DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional .pulsar.proto.MessageIdData message_id = 3;
		public const int MESSAGE_ID_FIELD_NUMBER = 3;
		internal MessageIdData messageId_;
		public bool hasMessageId()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public MessageIdData MessageId
		{
			get
			{
			  return messageId_;
			}
		}

		// optional uint64 message_publish_time = 4;
		public const int MESSAGE_PUBLISH_TIME_FIELD_NUMBER = 4;
		internal long messagePublishTime_;
		public bool hasMessagePublishTime()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public long MessagePublishTime
		{
			get
			{
			  return messagePublishTime_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  requestId_ = 0L;
		  messageId_ = MessageIdData.DefaultInstance;
		  messagePublishTime_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (hasMessageId())
			  {
				if (!MessageId.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteMessage(3, messageId_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteUInt64(4, messagePublishTime_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeMessageSize(3, messageId_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.ComputeUInt64Size(messagePublishTime_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandSeek parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSeek parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandSeek parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSeek parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSeek parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSeek parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSeek parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSeek parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandSeek parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSeek parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSeek parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandSeek prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandSeek, Builder>, CommandSeekOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandSeek.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			messageId_ = MessageIdData.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000004);
			messagePublishTime_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandSeek DefaultInstanceForType
		  {
			  get
			  {
				return CommandSeek.DefaultInstance;
			  }
		  }

		  public CommandSeek build()
		  {
			CommandSeek result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandSeek buildParsed() throws InvalidProtocolBufferException
		  internal CommandSeek buildParsed()
		  {
			CommandSeek result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandSeek buildPartial()
		  {
			CommandSeek result = CommandSeek.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.messageId_ = messageId_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.messagePublishTime_ = messagePublishTime_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandSeek other)
		  {
			if (other == CommandSeek.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasMessageId())
			{
			  mergeMessageId(other.MessageId);
			}
			if (other.hasMessagePublishTime())
			{
			  MessagePublishTime = other.MessagePublishTime;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (hasMessageId())
				{
				  if (!getMessageId().Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 26:
				{
				  MessageIdData.Builder subBuilder = MessageIdData.newBuilder();
				  if (hasMessageId())
				  {
					subBuilder.mergeFrom(getMessageId());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setMessageId(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 32:
				{
				  bitField0_ |= 0x00000008;
				  messagePublishTime_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.MessageIdData message_id = 3;
		  internal MessageIdData messageId_ = MessageIdData.DefaultInstance;
		  public bool hasMessageId()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public MessageIdData getMessageId()
		  {
			return messageId_;
		  }
		  public Builder setMessageId(MessageIdData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			messageId_ = value;

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder setMessageId(MessageIdData.Builder builderForValue)
		  {
			messageId_ = builderForValue.build();

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder mergeMessageId(MessageIdData value)
		  {
			if (((bitField0_ & 0x00000004) == 0x00000004) && messageId_ != MessageIdData.DefaultInstance)
			{
			  messageId_ = MessageIdData.newBuilder(messageId_).mergeFrom(value).buildPartial();
			}
			else
			{
			  messageId_ = value;
			}

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder clearMessageId()
		  {
			messageId_ = MessageIdData.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  // optional uint64 message_publish_time = 4;
		  internal long messagePublishTime_;
		  public bool hasMessagePublishTime()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public long MessagePublishTime
		  {
			  get
			  {
				return messagePublishTime_;
			  }
		  }
		  public Builder setMessagePublishTime(long value)
		  {
			bitField0_ |= 0x00000008;
			messagePublishTime_ = value;

			return this;
		  }
		  public Builder clearMessagePublishTime()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			messagePublishTime_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandSeek)
		}

		static CommandSeek()
		{
		  defaultInstance = new CommandSeek(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandSeek)
	  }

	  public interface CommandReachedEndOfTopicOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}
	  }
	  public sealed class CommandReachedEndOfTopic : CommandReachedEndOfTopicOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandReachedEndOfTopic.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandReachedEndOfTopic(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandReachedEndOfTopic> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandReachedEndOfTopic>
		 {
			 protected internal CommandReachedEndOfTopic newObject(Handle handle)
			 {
			   return new CommandReachedEndOfTopic(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandReachedEndOfTopic(bool noInit)
		{
		}

		internal static readonly CommandReachedEndOfTopic defaultInstance;
		public static CommandReachedEndOfTopic DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandReachedEndOfTopic DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandReachedEndOfTopic parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandReachedEndOfTopic parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandReachedEndOfTopic parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandReachedEndOfTopic parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandReachedEndOfTopic parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandReachedEndOfTopic parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandReachedEndOfTopic parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandReachedEndOfTopic parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandReachedEndOfTopic parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandReachedEndOfTopic parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandReachedEndOfTopic parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandReachedEndOfTopic prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandReachedEndOfTopic, Builder>, CommandReachedEndOfTopicOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandReachedEndOfTopic.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandReachedEndOfTopic DefaultInstanceForType
		  {
			  get
			  {
				return CommandReachedEndOfTopic.DefaultInstance;
			  }
		  }

		  public CommandReachedEndOfTopic build()
		  {
			CommandReachedEndOfTopic result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandReachedEndOfTopic buildParsed() throws InvalidProtocolBufferException
		  internal CommandReachedEndOfTopic buildParsed()
		  {
			CommandReachedEndOfTopic result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandReachedEndOfTopic buildPartial()
		  {
			CommandReachedEndOfTopic result = CommandReachedEndOfTopic.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandReachedEndOfTopic other)
		  {
			if (other == CommandReachedEndOfTopic.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandReachedEndOfTopic)
		}

		static CommandReachedEndOfTopic()
		{
		  defaultInstance = new CommandReachedEndOfTopic(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandReachedEndOfTopic)
	  }

	  public interface CommandCloseProducerOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 producer_id = 1;
		bool hasProducerId();
		long ProducerId {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}
	  }
	  public sealed class CommandCloseProducer : CommandCloseProducerOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandCloseProducer.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandCloseProducer(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandCloseProducer> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandCloseProducer>
		 {
			 protected internal CommandCloseProducer newObject(Handle handle)
			 {
			   return new CommandCloseProducer(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandCloseProducer(bool noInit)
		{
		}

		internal static readonly CommandCloseProducer defaultInstance;
		public static CommandCloseProducer DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandCloseProducer DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 producer_id = 1;
		public const int PRODUCER_ID_FIELD_NUMBER = 1;
		internal long producerId_;
		public bool hasProducerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ProducerId
		{
			get
			{
			  return producerId_;
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		internal void initFields()
		{
		  producerId_ = 0L;
		  requestId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasProducerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, producerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(producerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandCloseProducer parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandCloseProducer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandCloseProducer parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandCloseProducer parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandCloseProducer parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandCloseProducer parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandCloseProducer parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandCloseProducer parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandCloseProducer parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseProducer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandCloseProducer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandCloseProducer prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandCloseProducer, Builder>, CommandCloseProducerOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandCloseProducer.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			producerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandCloseProducer DefaultInstanceForType
		  {
			  get
			  {
				return CommandCloseProducer.DefaultInstance;
			  }
		  }

		  public CommandCloseProducer build()
		  {
			CommandCloseProducer result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandCloseProducer buildParsed() throws InvalidProtocolBufferException
		  internal CommandCloseProducer buildParsed()
		  {
			CommandCloseProducer result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandCloseProducer buildPartial()
		  {
			CommandCloseProducer result = CommandCloseProducer.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.producerId_ = producerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandCloseProducer other)
		  {
			if (other == CommandCloseProducer.DefaultInstance)
			{
				return this;
			}
			if (other.hasProducerId())
			{
			  ProducerId = other.ProducerId;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasProducerId())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  producerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 producer_id = 1;
		  internal long producerId_;
		  public bool hasProducerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ProducerId
		  {
			  get
			  {
				return producerId_;
			  }
		  }
		  public Builder setProducerId(long value)
		  {
			bitField0_ |= 0x00000001;
			producerId_ = value;

			return this;
		  }
		  public Builder clearProducerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			producerId_ = 0L;

			return this;
		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandCloseProducer)
		}

		static CommandCloseProducer()
		{
		  defaultInstance = new CommandCloseProducer(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandCloseProducer)
	  }

	  public interface CommandCloseConsumerOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}
	  }
	  public sealed class CommandCloseConsumer : CommandCloseConsumerOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandCloseConsumer.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandCloseConsumer(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandCloseConsumer> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandCloseConsumer>
		 {
			 protected internal CommandCloseConsumer newObject(Handle handle)
			 {
			   return new CommandCloseConsumer(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandCloseConsumer(bool noInit)
		{
		}

		internal static readonly CommandCloseConsumer defaultInstance;
		public static CommandCloseConsumer DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandCloseConsumer DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  requestId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandCloseConsumer parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandCloseConsumer parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandCloseConsumer parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandCloseConsumer parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandCloseConsumer parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandCloseConsumer parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandCloseConsumer parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandCloseConsumer parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandCloseConsumer parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandCloseConsumer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandCloseConsumer parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandCloseConsumer prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandCloseConsumer, Builder>, CommandCloseConsumerOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandCloseConsumer.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandCloseConsumer DefaultInstanceForType
		  {
			  get
			  {
				return CommandCloseConsumer.DefaultInstance;
			  }
		  }

		  public CommandCloseConsumer build()
		  {
			CommandCloseConsumer result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandCloseConsumer buildParsed() throws InvalidProtocolBufferException
		  internal CommandCloseConsumer buildParsed()
		  {
			CommandCloseConsumer result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandCloseConsumer buildPartial()
		  {
			CommandCloseConsumer result = CommandCloseConsumer.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandCloseConsumer other)
		  {
			if (other == CommandCloseConsumer.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandCloseConsumer)
		}

		static CommandCloseConsumer()
		{
		  defaultInstance = new CommandCloseConsumer(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandCloseConsumer)
	  }

	  public interface CommandRedeliverUnacknowledgedMessagesOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// repeated .pulsar.proto.MessageIdData message_ids = 2;
		IList<MessageIdData> MessageIdsList {get;}
		MessageIdData getMessageIds(int index);
		int MessageIdsCount {get;}
	  }
	  public sealed class CommandRedeliverUnacknowledgedMessages : CommandRedeliverUnacknowledgedMessagesOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandRedeliverUnacknowledgedMessages.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandRedeliverUnacknowledgedMessages(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandRedeliverUnacknowledgedMessages> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandRedeliverUnacknowledgedMessages>
		 {
			 protected internal CommandRedeliverUnacknowledgedMessages newObject(Handle handle)
			 {
			   return new CommandRedeliverUnacknowledgedMessages(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandRedeliverUnacknowledgedMessages(bool noInit)
		{
		}

		internal static readonly CommandRedeliverUnacknowledgedMessages defaultInstance;
		public static CommandRedeliverUnacknowledgedMessages DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandRedeliverUnacknowledgedMessages DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// repeated .pulsar.proto.MessageIdData message_ids = 2;
		public const int MESSAGE_IDS_FIELD_NUMBER = 2;
		internal IList<MessageIdData> messageIds_;
		public IList<MessageIdData> MessageIdsList
		{
			get
			{
			  return messageIds_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends MessageIdDataOrBuilder> getMessageIdsOrBuilderList()
		public IList<MessageIdDataOrBuilder> MessageIdsOrBuilderList
		{
			get
			{
			  return messageIds_;
			}
		}
		public int MessageIdsCount
		{
			get
			{
			  return messageIds_.Count;
			}
		}
		public MessageIdData getMessageIds(int index)
		{
		  return messageIds_[index];
		}
		public MessageIdDataOrBuilder getMessageIdsOrBuilder(int index)
		{
		  return messageIds_[index];
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  messageIds_ = java.util.Collections.emptyList();
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < MessageIdsCount; i++)
			  {
				if (!getMessageIds(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  for (int i = 0; i < messageIds_.Count; i++)
		  {
			output.WriteMessage(2, messageIds_[i]);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  for (int i = 0; i < messageIds_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(2, messageIds_[i]);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandRedeliverUnacknowledgedMessages parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandRedeliverUnacknowledgedMessages parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandRedeliverUnacknowledgedMessages parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandRedeliverUnacknowledgedMessages parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandRedeliverUnacknowledgedMessages parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandRedeliverUnacknowledgedMessages parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandRedeliverUnacknowledgedMessages parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandRedeliverUnacknowledgedMessages parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandRedeliverUnacknowledgedMessages parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandRedeliverUnacknowledgedMessages parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandRedeliverUnacknowledgedMessages parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandRedeliverUnacknowledgedMessages prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandRedeliverUnacknowledgedMessages, Builder>, CommandRedeliverUnacknowledgedMessagesOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandRedeliverUnacknowledgedMessages.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			messageIds_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandRedeliverUnacknowledgedMessages DefaultInstanceForType
		  {
			  get
			  {
				return CommandRedeliverUnacknowledgedMessages.DefaultInstance;
			  }
		  }

		  public CommandRedeliverUnacknowledgedMessages build()
		  {
			CommandRedeliverUnacknowledgedMessages result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandRedeliverUnacknowledgedMessages buildParsed() throws InvalidProtocolBufferException
		  internal CommandRedeliverUnacknowledgedMessages buildParsed()
		  {
			CommandRedeliverUnacknowledgedMessages result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandRedeliverUnacknowledgedMessages buildPartial()
		  {
			CommandRedeliverUnacknowledgedMessages result = CommandRedeliverUnacknowledgedMessages.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((bitField0_ & 0x00000002) == 0x00000002))
			{
			  messageIds_ = java.util.Collections.unmodifiableList(messageIds_);
			  bitField0_ = (bitField0_ & ~0x00000002);
			}
			result.messageIds_ = messageIds_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandRedeliverUnacknowledgedMessages other)
		  {
			if (other == CommandRedeliverUnacknowledgedMessages.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.messageIds_.Count > 0)
			{
			  if (messageIds_.Count == 0)
			  {
				messageIds_ = other.messageIds_;
				bitField0_ = (bitField0_ & ~0x00000002);
			  }
			  else
			  {
				ensureMessageIdsIsMutable();
				((List<MessageIdData>)messageIds_).AddRange(other.messageIds_);
			  }

			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				for (int i = 0; i < MessageIdsCount; i++)
				{
				  if (!getMessageIds(i).Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 18:
				{
				  MessageIdData.Builder subBuilder = MessageIdData.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addMessageIds(subBuilder.buildPartial());
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // repeated .pulsar.proto.MessageIdData message_ids = 2;
		  internal IList<MessageIdData> messageIds_ = new List<MessageIdData>();
		  internal void ensureMessageIdsIsMutable()
		  {
			if (!((bitField0_ & 0x00000002) == 0x00000002))
			{
			  messageIds_ = new List<MessageIdData>(messageIds_);
			  bitField0_ |= 0x00000002;
			}
		  }

		  public IList<MessageIdData> MessageIdsList
		  {
			  get
			  {
				return messageIds_.ToImmutableList(); 
			  }
		  }
		  public int MessageIdsCount
		  {
			  get
			  {
				return messageIds_.Count;
			  }
		  }
		  public MessageIdData getMessageIds(int index)
		  {
			return messageIds_[index];
		  }
		  public Builder SetMessageIds(int index, MessageIdData value)
		  {
			if (value == null)
			{
			  throw new NullReferenceException();
			}
			ensureMessageIdsIsMutable();
			messageIds_[index] = value;

			return this;
		  }
		  public Builder SetMessageIds(int index, MessageIdData.Builder builderForValue)
		  {
			ensureMessageIdsIsMutable();
			messageIds_[index] = builderForValue.build();

			return this;
		  }
		  public Builder AddMessageIds(MessageIdData value)
		  {
			if (value == null)
			{
			  throw new NullReferenceException();
			}
			ensureMessageIdsIsMutable();
			messageIds_.Add(value);

			return this;
		  }
		  public Builder AddMessageIds(int index, MessageIdData value)
		  {
			if (value == null)
			{
			  throw new NullReferenceException();
			}
			ensureMessageIdsIsMutable();
			messageIds_.Insert(index, value);

			return this;
		  }
		  public Builder AddMessageIds(MessageIdData.Builder builderForValue)
		  {
			ensureMessageIdsIsMutable();
			messageIds_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addMessageIds(int index, MessageIdData.Builder builderForValue)
		  {
			ensureMessageIdsIsMutable();
			messageIds_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllMessageIds<T1>(IEnumerable<T1> values) where T1 : MessageIdData
		  {
			ensureMessageIdsIsMutable();
			base.addAll(values, messageIds_);

			return this;
		  }
		  public Builder clearMessageIds()
		  {
			messageIds_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000002);

			return this;
		  }
		  public Builder removeMessageIds(int index)
		  {
			ensureMessageIdsIsMutable();
			messageIds_.RemoveAt(index);

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandRedeliverUnacknowledgedMessages)
		}

		static CommandRedeliverUnacknowledgedMessages()
		{
		  defaultInstance = new CommandRedeliverUnacknowledgedMessages(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandRedeliverUnacknowledgedMessages)
	  }

	  public interface CommandSuccessOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional .pulsar.proto.Schema schema = 2;
		bool hasSchema();
		Schema Schema {get;}
	  }
	  public sealed class CommandSuccess : CommandSuccessOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandSuccess.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandSuccess(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandSuccess> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandSuccess>
		 {
			 protected internal CommandSuccess newObject(Handle handle)
			 {
			   return new CommandSuccess(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandSuccess(bool noInit)
		{
		}

		internal static readonly CommandSuccess defaultInstance;
		public static CommandSuccess DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandSuccess DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional .pulsar.proto.Schema schema = 2;
		public const int SCHEMA_FIELD_NUMBER = 2;
		internal Schema schema_;
		public bool hasSchema()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public Schema Schema
		{
			get
			{
			  return schema_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  schema_ = Schema.DefaultInstance;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (hasSchema())
			  {
				if (!Schema.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteMessage(2, schema_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeMessageSize(2, schema_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandSuccess parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSuccess parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandSuccess parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandSuccess parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSuccess parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSuccess parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandSuccess parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSuccess parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandSuccess parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandSuccess parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandSuccess parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandSuccess prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandSuccess, Builder>, CommandSuccessOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandSuccess.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			schema_ = Schema.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandSuccess DefaultInstanceForType
		  {
			  get
			  {
				return CommandSuccess.DefaultInstance;
			  }
		  }

		  public CommandSuccess build()
		  {
			CommandSuccess result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandSuccess buildParsed() throws InvalidProtocolBufferException
		  internal CommandSuccess buildParsed()
		  {
			CommandSuccess result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandSuccess buildPartial()
		  {
			CommandSuccess result = CommandSuccess.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.schema_ = schema_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandSuccess other)
		  {
			if (other == CommandSuccess.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasSchema())
			{
			  mergeSchema(other.Schema);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (hasSchema())
				{
				  if (!getSchema().Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 18:
				{
				  Schema.Builder subBuilder = Schema.newBuilder();
				  if (hasSchema())
				  {
					subBuilder.mergeFrom(getSchema());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSchema(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.Schema schema = 2;
		  internal Schema schema_ = Schema.DefaultInstance;
		  public bool hasSchema()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public Schema getSchema()
		  {
			return schema_;
		  }
		  public Builder setSchema(Schema value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			schema_ = value;

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder setSchema(Schema.Builder builderForValue)
		  {
			schema_ = builderForValue.build();

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder mergeSchema(Schema value)
		  {
			if (((bitField0_ & 0x00000002) == 0x00000002) && schema_ != Schema.DefaultInstance)
			{
			  schema_ = Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
			}
			else
			{
			  schema_ = value;
			}

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder clearSchema()
		  {
			schema_ = Schema.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandSuccess)
		}

		static CommandSuccess()
		{
		  defaultInstance = new CommandSuccess(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandSuccess)
	  }

	  public interface CommandProducerSuccessOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// required string producer_name = 2;
		bool hasProducerName();
		string ProducerName {get;}

		// optional int64 last_sequence_id = 3 [default = -1];
		bool hasLastSequenceId();
		long LastSequenceId {get;}

		// optional bytes schema_version = 4;
		bool hasSchemaVersion();
		ByteString SchemaVersion {get;}
	  }
	  public sealed class CommandProducerSuccess : CommandProducerSuccessOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandProducerSuccess.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandProducerSuccess(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandProducerSuccess> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandProducerSuccess>
		 {
			 protected internal CommandProducerSuccess newObject(Handle handle)
			 {
			   return new CommandProducerSuccess(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandProducerSuccess(bool noInit)
		{
		}

		internal static readonly CommandProducerSuccess defaultInstance;
		public static CommandProducerSuccess DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandProducerSuccess DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// required string producer_name = 2;
		public const int PRODUCER_NAME_FIELD_NUMBER = 2;
		internal object producerName_;
		public bool hasProducerName()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public string ProducerName
		{
			get
			{
			  object @ref = producerName_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  producerName_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ProducerNameBytes
		{
			get
			{
			  object @ref = producerName_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				producerName_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional int64 last_sequence_id = 3 [default = -1];
		public const int LAST_SEQUENCE_ID_FIELD_NUMBER = 3;
		internal long lastSequenceId_;
		public bool hasLastSequenceId()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long LastSequenceId
		{
			get
			{
			  return lastSequenceId_;
			}
		}

		// optional bytes schema_version = 4;
		public const int SCHEMA_VERSION_FIELD_NUMBER = 4;
		internal ByteString schemaVersion_;
		public bool hasSchemaVersion()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ByteString SchemaVersion
		{
			get
			{
			  return schemaVersion_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  producerName_ = "";
		  lastSequenceId_ = -1L;
		  schemaVersion_ = ByteString.Empty;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasProducerName())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, ProducerNameBytes);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.writeInt64(3, lastSequenceId_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteBytes(4, schemaVersion_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, ProducerNameBytes);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeInt64Size(3, lastSequenceId_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeBytesSize(4, schemaVersion_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandProducerSuccess parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandProducerSuccess parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandProducerSuccess parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandProducerSuccess parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandProducerSuccess parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandProducerSuccess parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandProducerSuccess parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandProducerSuccess parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandProducerSuccess parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandProducerSuccess parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandProducerSuccess parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandProducerSuccess prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandProducerSuccess, Builder>, CommandProducerSuccessOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandProducerSuccess.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			producerName_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			lastSequenceId_ = -1L;
			bitField0_ = (bitField0_ & ~0x00000004);
			schemaVersion_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandProducerSuccess DefaultInstanceForType
		  {
			  get
			  {
				return CommandProducerSuccess.DefaultInstance;
			  }
		  }

		  public CommandProducerSuccess build()
		  {
			CommandProducerSuccess result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandProducerSuccess buildParsed() throws InvalidProtocolBufferException
		  internal CommandProducerSuccess buildParsed()
		  {
			CommandProducerSuccess result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandProducerSuccess buildPartial()
		  {
			CommandProducerSuccess result = CommandProducerSuccess.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.producerName_ = producerName_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.lastSequenceId_ = lastSequenceId_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.schemaVersion_ = schemaVersion_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandProducerSuccess other)
		  {
			if (other == CommandProducerSuccess.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasProducerName())
			{
			  setProducerName(other.ProducerName);
			}
			if (other.hasLastSequenceId())
			{
			  LastSequenceId = other.LastSequenceId;
			}
			if (other.hasSchemaVersion())
			{
			  SchemaVersion = other.SchemaVersion;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (!hasProducerName())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  producerName_ = input.readBytes();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  lastSequenceId_ = input.readInt64();
				  break;
				}
				case 34:
				{
				  bitField0_ |= 0x00000008;
				  schemaVersion_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // required string producer_name = 2;
		  internal object producerName_ = "";
		  public bool hasProducerName()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getProducerName()
		  {
			object @ref = producerName_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  producerName_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setProducerName(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			producerName_ = value;

			return this;
		  }
		  public Builder clearProducerName()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			producerName_ = DefaultInstance.ProducerName;

			return this;
		  }
		  internal void setProducerName(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			producerName_ = value;

		  }

		  // optional int64 last_sequence_id = 3 [default = -1];
		  internal long lastSequenceId_ = -1L;
		  public bool hasLastSequenceId()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long LastSequenceId
		  {
			  get
			  {
				return lastSequenceId_;
			  }
		  }
		  public Builder setLastSequenceId(long value)
		  {
			bitField0_ |= 0x00000004;
			lastSequenceId_ = value;

			return this;
		  }
		  public Builder clearLastSequenceId()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			lastSequenceId_ = -1L;

			return this;
		  }

		  // optional bytes schema_version = 4;
		  internal ByteString schemaVersion_ = ByteString.Empty;
		  public bool hasSchemaVersion()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ByteString SchemaVersion
		  {
			  get
			  {
				return schemaVersion_;
			  }
		  }
		  public Builder setSchemaVersion(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000008;
			schemaVersion_ = value;

			return this;
		  }
		  public Builder clearSchemaVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			schemaVersion_ = DefaultInstance.SchemaVersion;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandProducerSuccess)
		}

		static CommandProducerSuccess()
		{
		  defaultInstance = new CommandProducerSuccess(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandProducerSuccess)
	  }

	  public interface CommandErrorOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// required .pulsar.proto.ServerError error = 2;
		bool hasError();
		ServerError Error {get;}

		// required string message = 3;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandError : CommandErrorOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandError.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandError(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandError> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandError>
		 {
			 protected internal CommandError newObject(Handle handle)
			 {
			   return new CommandError(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandError(bool noInit)
		{
		}

		internal static readonly CommandError defaultInstance;
		public static CommandError DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandError DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// required .pulsar.proto.ServerError error = 2;
		public const int ERROR_FIELD_NUMBER = 2;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// required string message = 3;
		public const int MESSAGE_FIELD_NUMBER = 3;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasError())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasMessage())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.writeEnum(2, error_.Number);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteBytes(3, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeEnumSize(2, error_.Number);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeBytesSize(3, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandError parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandError parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandError parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandError parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandError parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandError parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandError parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandError parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandError parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandError parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandError parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandError prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandError, Builder>, CommandErrorOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandError.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000002);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandError DefaultInstanceForType
		  {
			  get
			  {
				return CommandError.DefaultInstance;
			  }
		  }

		  public CommandError build()
		  {
			CommandError result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandError buildParsed() throws InvalidProtocolBufferException
		  internal CommandError buildParsed()
		  {
			CommandError result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandError buildPartial()
		  {
			CommandError result = CommandError.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandError other)
		  {
			if (other == CommandError.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (!hasError())
				{
    
				  return false;
				}
				if (!hasMessage())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000002;
					error_ = value;
				  }
				  break;
				}
				case 26:
				{
				  bitField0_ |= 0x00000004;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // required .pulsar.proto.ServerError error = 2;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000002;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // required string message = 3;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000004;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000004;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandError)
		}

		static CommandError()
		{
		  defaultInstance = new CommandError(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandError)
	  }

	  public interface CommandPingOrBuilder : MessageLiteOrBuilder
	  {
	  }
	  public sealed class CommandPing : CommandPingOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandPing.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandPing(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandPing> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandPing>
		 {
			 protected internal CommandPing newObject(Handle handle)
			 {
			   return new CommandPing(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandPing(bool noInit)
		{
		}

		internal static readonly CommandPing defaultInstance;
		public static CommandPing DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandPing DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal void initFields()
		{
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(Google.Protobuf.ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandPing parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandPing parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandPing parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandPing parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandPing parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPing parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandPing parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPing parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandPing parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPing parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPing parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandPing prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandPing, Builder>, CommandPingOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandPing.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandPing DefaultInstanceForType
		  {
			  get
			  {
				return CommandPing.DefaultInstance;
			  }
		  }

		  public CommandPing build()
		  {
			CommandPing result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandPing buildParsed() throws InvalidProtocolBufferException
		  internal CommandPing buildParsed()
		  {
			CommandPing result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandPing buildPartial()
		  {
			CommandPing result = CommandPing.RECYCLER.get();
			return result;
		  }

		  public Builder mergeFrom(CommandPing other)
		  {
			if (other == CommandPing.DefaultInstance)
			{
				return this;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
			  }
			}
		  }


		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandPing)
		}

		static CommandPing()
		{
		  defaultInstance = new CommandPing(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandPing)
	  }

	  public interface CommandPongOrBuilder : MessageLiteOrBuilder
	  {
	  }
	  public sealed class CommandPong : CommandPongOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandPong.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandPong(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandPong> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandPong>
		 {
			 protected internal CommandPong newObject(Handle handle)
			 {
			   return new CommandPong(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandPong(bool noInit)
		{
		}

		internal static readonly CommandPong defaultInstance;
		public static CommandPong DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandPong DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal void initFields()
		{
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandPong parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandPong parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandPong parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandPong parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandPong parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPong parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandPong parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPong parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandPong parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandPong parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandPong parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandPong prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandPong, Builder>, CommandPongOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandPong.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandPong DefaultInstanceForType
		  {
			  get
			  {
				return CommandPong.DefaultInstance;
			  }
		  }

		  public CommandPong build()
		  {
			CommandPong result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandPong buildParsed() throws InvalidProtocolBufferException
		  internal CommandPong buildParsed()
		  {
			CommandPong result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandPong buildPartial()
		  {
			CommandPong result = CommandPong.RECYCLER.get();
			return result;
		  }

		  public Builder mergeFrom(CommandPong other)
		  {
			if (other == CommandPong.DefaultInstance)
			{
				return this;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
			  }
			}
		  }


		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandPong)
		}

		static CommandPong()
		{
		  defaultInstance = new CommandPong(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandPong)
	  }

	  public interface CommandConsumerStatsOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// required uint64 consumer_id = 4;
		bool hasConsumerId();
		long ConsumerId {get;}
	  }
	  public sealed class CommandConsumerStats : CommandConsumerStatsOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandConsumerStats.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandConsumerStats(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandConsumerStats> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandConsumerStats>
		 {
			 protected internal CommandConsumerStats newObject(Handle handle)
			 {
			   return new CommandConsumerStats(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandConsumerStats(bool noInit)
		{
		}

		internal static readonly CommandConsumerStats defaultInstance;
		public static CommandConsumerStats DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandConsumerStats DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// required uint64 consumer_id = 4;
		public const int CONSUMER_ID_FIELD_NUMBER = 4;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  consumerId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(4, consumerId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += Google.Protobuf.CodedOutputStream.ComputeUInt64Size((ulong)consumerId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStats parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandConsumerStats parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStats parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandConsumerStats parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStats parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandConsumerStats parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStats parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandConsumerStats parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
		public static CommandConsumerStats ParseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
		public static CommandConsumerStats ParseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
		public static CommandConsumerStats parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStats parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandConsumerStats parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStats parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandConsumerStats parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStats parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandConsumerStats parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandConsumerStats prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandConsumerStats, Builder>, CommandConsumerStatsOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandConsumerStats.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandConsumerStats DefaultInstanceForType
		  {
			  get
			  {
				return CommandConsumerStats.DefaultInstance;
			  }
		  }

		  public CommandConsumerStats build()
		  {
			CommandConsumerStats result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandConsumerStats buildParsed() throws InvalidProtocolBufferException
		  internal CommandConsumerStats buildParsed()
		  {
			CommandConsumerStats result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandConsumerStats buildPartial()
		  {
			CommandConsumerStats result = CommandConsumerStats.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.consumerId_ = consumerId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandConsumerStats other)
		  {
			if (other == CommandConsumerStats.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (!hasConsumerId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  bitField0_ |= 0x00000002;
				  consumerId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // required uint64 consumer_id = 4;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000002;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			consumerId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandConsumerStats)
		}

		static CommandConsumerStats()
		{
		  defaultInstance = new CommandConsumerStats(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandConsumerStats)
	  }

	  public interface CommandConsumerStatsResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional .pulsar.proto.ServerError error_code = 2;
		bool hasErrorCode();
		ServerError ErrorCode {get;}

		// optional string error_message = 3;
		bool hasErrorMessage();
		string ErrorMessage {get;}

		// optional double msgRateOut = 4;
		bool hasMsgRateOut();
		double MsgRateOut {get;}

		// optional double msgThroughputOut = 5;
		bool hasMsgThroughputOut();
		double MsgThroughputOut {get;}

		// optional double msgRateRedeliver = 6;
		bool hasMsgRateRedeliver();
		double MsgRateRedeliver {get;}

		// optional string consumerName = 7;
		bool hasConsumerName();
		string ConsumerName {get;}

		// optional uint64 availablePermits = 8;
		bool hasAvailablePermits();
		long AvailablePermits {get;}

		// optional uint64 unackedMessages = 9;
		bool hasUnackedMessages();
		long UnackedMessages {get;}

		// optional bool blockedConsumerOnUnackedMsgs = 10;
		bool hasBlockedConsumerOnUnackedMsgs();
		bool BlockedConsumerOnUnackedMsgs {get;}

		// optional string address = 11;
		bool hasAddress();
		string Address {get;}

		// optional string connectedSince = 12;
		bool hasConnectedSince();
		string ConnectedSince {get;}

		// optional string type = 13;
		bool hasType();
		string Type {get;}

		// optional double msgRateExpired = 14;
		bool hasMsgRateExpired();
		double MsgRateExpired {get;}

		// optional uint64 msgBacklog = 15;
		bool hasMsgBacklog();
		long MsgBacklog {get;}
	  }
	  public sealed class CommandConsumerStatsResponse : CommandConsumerStatsResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandConsumerStatsResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandConsumerStatsResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandConsumerStatsResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandConsumerStatsResponse>
		 {
			 protected internal CommandConsumerStatsResponse newObject(Handle handle)
			 {
			   return new CommandConsumerStatsResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandConsumerStatsResponse(bool noInit)
		{
		}

		internal static readonly CommandConsumerStatsResponse defaultInstance;
		public static CommandConsumerStatsResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandConsumerStatsResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional .pulsar.proto.ServerError error_code = 2;
		public const int ERROR_CODE_FIELD_NUMBER = 2;
		internal ServerError errorCode_;
		public bool hasErrorCode()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public ServerError ErrorCode
		{
			get
			{
			  return errorCode_;
			}
		}

		// optional string error_message = 3;
		public const int ERROR_MESSAGE_FIELD_NUMBER = 3;
		internal object errorMessage_;
		public bool hasErrorMessage()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public string ErrorMessage
		{
			get
			{
			  object @ref = errorMessage_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  errorMessage_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ErrorMessageBytes
		{
			get
			{
			  object @ref = errorMessage_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				errorMessage_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional double msgRateOut = 4;
		public const int MSGRATEOUT_FIELD_NUMBER = 4;
		internal double msgRateOut_;
		public bool hasMsgRateOut()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public double MsgRateOut
		{
			get
			{
			  return msgRateOut_;
			}
		}

		// optional double msgThroughputOut = 5;
		public const int MSGTHROUGHPUTOUT_FIELD_NUMBER = 5;
		internal double msgThroughputOut_;
		public bool hasMsgThroughputOut()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public double MsgThroughputOut
		{
			get
			{
			  return msgThroughputOut_;
			}
		}

		// optional double msgRateRedeliver = 6;
		public const int MSGRATEREDELIVER_FIELD_NUMBER = 6;
		internal double msgRateRedeliver_;
		public bool hasMsgRateRedeliver()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public double MsgRateRedeliver
		{
			get
			{
			  return msgRateRedeliver_;
			}
		}

		// optional string consumerName = 7;
		public const int CONSUMERNAME_FIELD_NUMBER = 7;
		internal object consumerName_;
		public bool hasConsumerName()
		{
		  return ((bitField0_ & 0x00000040) == 0x00000040);
		}
		public string ConsumerName
		{
			get
			{
			  object @ref = consumerName_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  consumerName_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ConsumerNameBytes
		{
			get
			{
			  object @ref = consumerName_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				consumerName_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional uint64 availablePermits = 8;
		public const int AVAILABLEPERMITS_FIELD_NUMBER = 8;
		internal long availablePermits_;
		public bool hasAvailablePermits()
		{
		  return ((bitField0_ & 0x00000080) == 0x00000080);
		}
		public long AvailablePermits
		{
			get
			{
			  return availablePermits_;
			}
		}

		// optional uint64 unackedMessages = 9;
		public const int UNACKEDMESSAGES_FIELD_NUMBER = 9;
		internal long unackedMessages_;
		public bool hasUnackedMessages()
		{
		  return ((bitField0_ & 0x00000100) == 0x00000100);
		}
		public long UnackedMessages
		{
			get
			{
			  return unackedMessages_;
			}
		}

		// optional bool blockedConsumerOnUnackedMsgs = 10;
		public const int BLOCKEDCONSUMERONUNACKEDMSGS_FIELD_NUMBER = 10;
		internal bool blockedConsumerOnUnackedMsgs_;
		public bool hasBlockedConsumerOnUnackedMsgs()
		{
		  return ((bitField0_ & 0x00000200) == 0x00000200);
		}
		public bool BlockedConsumerOnUnackedMsgs
		{
			get
			{
			  return blockedConsumerOnUnackedMsgs_;
			}
		}

		// optional string address = 11;
		public const int ADDRESS_FIELD_NUMBER = 11;
		internal object address_;
		public bool hasAddress()
		{
		  return ((bitField0_ & 0x00000400) == 0x00000400);
		}
		public string Address
		{
			get
			{
			  object @ref = address_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  address_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString AddressBytes
		{
			get
			{
			  object @ref = address_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				address_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional string connectedSince = 12;
		public const int CONNECTEDSINCE_FIELD_NUMBER = 12;
		internal object connectedSince_;
		public bool hasConnectedSince()
		{
		  return ((bitField0_ & 0x00000800) == 0x00000800);
		}
		public string ConnectedSince
		{
			get
			{
			  object @ref = connectedSince_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  connectedSince_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ConnectedSinceBytes
		{
			get
			{
			  object @ref = connectedSince_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				connectedSince_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional string type = 13;
		public const int TYPE_FIELD_NUMBER = 13;
		internal object type_;
		public bool hasType()
		{
		  return ((bitField0_ & 0x00001000) == 0x00001000);
		}
		public string Type
		{
			get
			{
			  object @ref = type_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  type_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TypeBytes
		{
			get
			{
			  object @ref = type_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				type_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional double msgRateExpired = 14;
		public const int MSGRATEEXPIRED_FIELD_NUMBER = 14;
		internal double msgRateExpired_;
		public bool hasMsgRateExpired()
		{
		  return ((bitField0_ & 0x00002000) == 0x00002000);
		}
		public double MsgRateExpired
		{
			get
			{
			  return msgRateExpired_;
			}
		}

		// optional uint64 msgBacklog = 15;
		public const int MSGBACKLOG_FIELD_NUMBER = 15;
		internal long msgBacklog_;
		public bool hasMsgBacklog()
		{
		  return ((bitField0_ & 0x00004000) == 0x00004000);
		}
		public long MsgBacklog
		{
			get
			{
			  return msgBacklog_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  errorCode_ = ServerError.UnknownError;
		  errorMessage_ = "";
		  msgRateOut_ = 0D;
		  msgThroughputOut_ = 0D;
		  msgRateRedeliver_ = 0D;
		  consumerName_ = "";
		  availablePermits_ = 0L;
		  unackedMessages_ = 0L;
		  blockedConsumerOnUnackedMsgs_ = false;
		  address_ = "";
		  connectedSince_ = "";
		  type_ = "";
		  msgRateExpired_ = 0D;
		  msgBacklog_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteEnum(2, errorCode_.Number);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteBytes(3, ErrorMessageBytes);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteDouble(4, msgRateOut_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteDouble(5, msgThroughputOut_);
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.WriteDouble(6, msgRateRedeliver_);
		  }
		  if (((bitField0_ & 0x00000040) == 0x00000040))
		  {
			output.WriteBytes(7, ConsumerNameBytes);
		  }
		  if (((bitField0_ & 0x00000080) == 0x00000080))
		  {
			output.WriteUInt64(8, availablePermits_);
		  }
		  if (((bitField0_ & 0x00000100) == 0x00000100))
		  {
			output.WriteUInt64(9, unackedMessages_);
		  }
		  if (((bitField0_ & 0x00000200) == 0x00000200))
		  {
			output.WriteBool(10, blockedConsumerOnUnackedMsgs_);
		  }
		  if (((bitField0_ & 0x00000400) == 0x00000400))
		  {
			output.WriteBytes(11, AddressBytes);
		  }
		  if (((bitField0_ & 0x00000800) == 0x00000800))
		  {
			output.WriteBytes(12, ConnectedSinceBytes);
		  }
		  if (((bitField0_ & 0x00001000) == 0x00001000))
		  {
			output.WriteBytes(13, TypeBytes);
		  }
		  if (((bitField0_ & 0x00002000) == 0x00002000))
		  {
			output.WriteDouble(14, msgRateExpired_);
		  }
		  if (((bitField0_ & 0x00004000) == 0x00004000))
		  {
			output.WriteUInt64(15, msgBacklog_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeEnumSize(2, errorCode_.Number);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeBytesSize(3, ErrorMessageBytes);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeDoubleSize(4, msgRateOut_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeDoubleSize(5, msgThroughputOut_);
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.computeDoubleSize(6, msgRateRedeliver_);
			  }
			  if (((bitField0_ & 0x00000040) == 0x00000040))
			  {
				size += CodedOutputStream.computeBytesSize(7, ConsumerNameBytes);
			  }
			  if (((bitField0_ & 0x00000080) == 0x00000080))
			  {
				size += CodedOutputStream.ComputeUInt64Size(availablePermits_);
			  }
			  if (((bitField0_ & 0x00000100) == 0x00000100))
			  {
				size += CodedOutputStream.ComputeUInt64Size(unackedMessages_);
			  }
			  if (((bitField0_ & 0x00000200) == 0x00000200))
			  {
				size += CodedOutputStream.computeBoolSize(10, blockedConsumerOnUnackedMsgs_);
			  }
			  if (((bitField0_ & 0x00000400) == 0x00000400))
			  {
				size += CodedOutputStream.computeBytesSize(11, AddressBytes);
			  }
			  if (((bitField0_ & 0x00000800) == 0x00000800))
			  {
				size += CodedOutputStream.computeBytesSize(12, ConnectedSinceBytes);
			  }
			  if (((bitField0_ & 0x00001000) == 0x00001000))
			  {
				size += CodedOutputStream.computeBytesSize(13, TypeBytes);
			  }
			  if (((bitField0_ & 0x00002000) == 0x00002000))
			  {
				size += CodedOutputStream.computeDoubleSize(14, msgRateExpired_);
			  }
			  if (((bitField0_ & 0x00004000) == 0x00004000))
			  {
				size += CodedOutputStream.computeUInt64Size(15, msgBacklog_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandConsumerStatsResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandConsumerStatsResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandConsumerStatsResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandConsumerStatsResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandConsumerStatsResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandConsumerStatsResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandConsumerStatsResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandConsumerStatsResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandConsumerStatsResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandConsumerStatsResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandConsumerStatsResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandConsumerStatsResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandConsumerStatsResponse, Builder>, CommandConsumerStatsResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandConsumerStatsResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			errorCode_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000002);
			errorMessage_ = "";
			bitField0_ = (bitField0_ & ~0x00000004);
			msgRateOut_ = 0D;
			bitField0_ = (bitField0_ & ~0x00000008);
			msgThroughputOut_ = 0D;
			bitField0_ = (bitField0_ & ~0x00000010);
			msgRateRedeliver_ = 0D;
			bitField0_ = (bitField0_ & ~0x00000020);
			consumerName_ = "";
			bitField0_ = (bitField0_ & ~0x00000040);
			availablePermits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000080);
			unackedMessages_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000100);
			blockedConsumerOnUnackedMsgs_ = false;
			bitField0_ = (bitField0_ & ~0x00000200);
			address_ = "";
			bitField0_ = (bitField0_ & ~0x00000400);
			connectedSince_ = "";
			bitField0_ = (bitField0_ & ~0x00000800);
			type_ = "";
			bitField0_ = (bitField0_ & ~0x00001000);
			msgRateExpired_ = 0D;
			bitField0_ = (bitField0_ & ~0x00002000);
			msgBacklog_ = 0L;
			bitField0_ = (bitField0_ & ~0x00004000);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandConsumerStatsResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandConsumerStatsResponse.DefaultInstance;
			  }
		  }

		  public CommandConsumerStatsResponse build()
		  {
			CommandConsumerStatsResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandConsumerStatsResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandConsumerStatsResponse buildParsed()
		  {
			CommandConsumerStatsResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandConsumerStatsResponse buildPartial()
		  {
			CommandConsumerStatsResponse result = CommandConsumerStatsResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.errorCode_ = errorCode_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.errorMessage_ = errorMessage_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.msgRateOut_ = msgRateOut_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.msgThroughputOut_ = msgThroughputOut_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.msgRateRedeliver_ = msgRateRedeliver_;
			if (((from_bitField0_ & 0x00000040) == 0x00000040))
			{
			  to_bitField0_ |= 0x00000040;
			}
			result.consumerName_ = consumerName_;
			if (((from_bitField0_ & 0x00000080) == 0x00000080))
			{
			  to_bitField0_ |= 0x00000080;
			}
			result.availablePermits_ = availablePermits_;
			if (((from_bitField0_ & 0x00000100) == 0x00000100))
			{
			  to_bitField0_ |= 0x00000100;
			}
			result.unackedMessages_ = unackedMessages_;
			if (((from_bitField0_ & 0x00000200) == 0x00000200))
			{
			  to_bitField0_ |= 0x00000200;
			}
			result.blockedConsumerOnUnackedMsgs_ = blockedConsumerOnUnackedMsgs_;
			if (((from_bitField0_ & 0x00000400) == 0x00000400))
			{
			  to_bitField0_ |= 0x00000400;
			}
			result.address_ = address_;
			if (((from_bitField0_ & 0x00000800) == 0x00000800))
			{
			  to_bitField0_ |= 0x00000800;
			}
			result.connectedSince_ = connectedSince_;
			if (((from_bitField0_ & 0x00001000) == 0x00001000))
			{
			  to_bitField0_ |= 0x00001000;
			}
			result.type_ = type_;
			if (((from_bitField0_ & 0x00002000) == 0x00002000))
			{
			  to_bitField0_ |= 0x00002000;
			}
			result.msgRateExpired_ = msgRateExpired_;
			if (((from_bitField0_ & 0x00004000) == 0x00004000))
			{
			  to_bitField0_ |= 0x00004000;
			}
			result.msgBacklog_ = msgBacklog_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandConsumerStatsResponse other)
		  {
			if (other == CommandConsumerStatsResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasErrorCode())
			{
			  ErrorCode = other.ErrorCode;
			}
			if (other.hasErrorMessage())
			{
			  setErrorMessage(other.ErrorMessage);
			}
			if (other.hasMsgRateOut())
			{
			  MsgRateOut = other.MsgRateOut;
			}
			if (other.hasMsgThroughputOut())
			{
			  MsgThroughputOut = other.MsgThroughputOut;
			}
			if (other.hasMsgRateRedeliver())
			{
			  MsgRateRedeliver = other.MsgRateRedeliver;
			}
			if (other.hasConsumerName())
			{
			  setConsumerName(other.ConsumerName);
			}
			if (other.hasAvailablePermits())
			{
			  AvailablePermits = other.AvailablePermits;
			}
			if (other.hasUnackedMessages())
			{
			  UnackedMessages = other.UnackedMessages;
			}
			if (other.hasBlockedConsumerOnUnackedMsgs())
			{
			  BlockedConsumerOnUnackedMsgs = other.BlockedConsumerOnUnackedMsgs;
			}
			if (other.hasAddress())
			{
			  setAddress(other.Address);
			}
			if (other.hasConnectedSince())
			{
			  setConnectedSince(other.ConnectedSince);
			}
			if (other.hasType())
			{
			  setType(other.Type);
			}
			if (other.hasMsgRateExpired())
			{
			  MsgRateExpired = other.MsgRateExpired;
			}
			if (other.hasMsgBacklog())
			{
			  MsgBacklog = other.MsgBacklog;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000002;
					errorCode_ = value;
				  }
				  break;
				}
				case 26:
				{
				  bitField0_ |= 0x00000004;
				  errorMessage_ = input.readBytes();
				  break;
				}
				case 33:
				{
				  bitField0_ |= 0x00000008;
				  msgRateOut_ = input.readDouble();
				  break;
				}
				case 41:
				{
				  bitField0_ |= 0x00000010;
				  msgThroughputOut_ = input.readDouble();
				  break;
				}
				case 49:
				{
				  bitField0_ |= 0x00000020;
				  msgRateRedeliver_ = input.readDouble();
				  break;
				}
				case 58:
				{
				  bitField0_ |= 0x00000040;
				  consumerName_ = input.readBytes();
				  break;
				}
				case 64:
				{
				  bitField0_ |= 0x00000080;
				  availablePermits_ = input.readUInt64();
				  break;
				}
				case 72:
				{
				  bitField0_ |= 0x00000100;
				  unackedMessages_ = input.readUInt64();
				  break;
				}
				case 80:
				{
				  bitField0_ |= 0x00000200;
				  blockedConsumerOnUnackedMsgs_ = input.readBool();
				  break;
				}
				case 90:
				{
				  bitField0_ |= 0x00000400;
				  address_ = input.readBytes();
				  break;
				}
				case 98:
				{
				  bitField0_ |= 0x00000800;
				  connectedSince_ = input.readBytes();
				  break;
				}
				case 106:
				{
				  bitField0_ |= 0x00001000;
				  type_ = input.readBytes();
				  break;
				}
				case 113:
				{
				  bitField0_ |= 0x00002000;
				  msgRateExpired_ = input.readDouble();
				  break;
				}
				case 120:
				{
				  bitField0_ |= 0x00004000;
				  msgBacklog_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error_code = 2;
		  internal ServerError errorCode_ = ServerError.UnknownError;
		  public bool hasErrorCode()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public ServerError ErrorCode
		  {
			  get
			  {
				return errorCode_;
			  }
		  }
		  public Builder setErrorCode(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000002;
			errorCode_ = value;

			return this;
		  }
		  public Builder clearErrorCode()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			errorCode_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string error_message = 3;
		  internal object errorMessage_ = "";
		  public bool hasErrorMessage()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public string getErrorMessage()
		  {
			object @ref = errorMessage_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  errorMessage_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setErrorMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000004;
			errorMessage_ = value;

			return this;
		  }
		  public Builder clearErrorMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			errorMessage_ = DefaultInstance.ErrorMessage;

			return this;
		  }
		  internal void setErrorMessage(ByteString value)
		  {
			bitField0_ |= 0x00000004;
			errorMessage_ = value;

		  }

		  // optional double msgRateOut = 4;
		  internal double msgRateOut_;
		  public bool hasMsgRateOut()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public double MsgRateOut
		  {
			  get
			  {
				return msgRateOut_;
			  }
		  }
		  public Builder setMsgRateOut(double value)
		  {
			bitField0_ |= 0x00000008;
			msgRateOut_ = value;

			return this;
		  }
		  public Builder clearMsgRateOut()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			msgRateOut_ = 0D;

			return this;
		  }

		  // optional double msgThroughputOut = 5;
		  internal double msgThroughputOut_;
		  public bool hasMsgThroughputOut()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public double MsgThroughputOut
		  {
			  get
			  {
				return msgThroughputOut_;
			  }
		  }
		  public Builder setMsgThroughputOut(double value)
		  {
			bitField0_ |= 0x00000010;
			msgThroughputOut_ = value;

			return this;
		  }
		  public Builder clearMsgThroughputOut()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			msgThroughputOut_ = 0D;

			return this;
		  }

		  // optional double msgRateRedeliver = 6;
		  internal double msgRateRedeliver_;
		  public bool hasMsgRateRedeliver()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public double MsgRateRedeliver
		  {
			  get
			  {
				return msgRateRedeliver_;
			  }
		  }
		  public Builder setMsgRateRedeliver(double value)
		  {
			bitField0_ |= 0x00000020;
			msgRateRedeliver_ = value;

			return this;
		  }
		  public Builder clearMsgRateRedeliver()
		  {
			bitField0_ = (bitField0_ & ~0x00000020);
			msgRateRedeliver_ = 0D;

			return this;
		  }

		  // optional string consumerName = 7;
		  internal object consumerName_ = "";
		  public bool hasConsumerName()
		  {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		  }
		  public string getConsumerName()
		  {
			object @ref = consumerName_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  consumerName_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setConsumerName(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000040;
			consumerName_ = value;

			return this;
		  }
		  public Builder clearConsumerName()
		  {
			bitField0_ = (bitField0_ & ~0x00000040);
			consumerName_ = DefaultInstance.ConsumerName;

			return this;
		  }
		  internal void setConsumerName(ByteString value)
		  {
			bitField0_ |= 0x00000040;
			consumerName_ = value;

		  }

		  // optional uint64 availablePermits = 8;
		  internal long availablePermits_;
		  public bool hasAvailablePermits()
		  {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		  }
		  public long AvailablePermits
		  {
			  get
			  {
				return availablePermits_;
			  }
		  }
		  public Builder setAvailablePermits(long value)
		  {
			bitField0_ |= 0x00000080;
			availablePermits_ = value;

			return this;
		  }
		  public Builder clearAvailablePermits()
		  {
			bitField0_ = (bitField0_ & ~0x00000080);
			availablePermits_ = 0L;

			return this;
		  }

		  // optional uint64 unackedMessages = 9;
		  internal long unackedMessages_;
		  public bool hasUnackedMessages()
		  {
			return ((bitField0_ & 0x00000100) == 0x00000100);
		  }
		  public long UnackedMessages
		  {
			  get
			  {
				return unackedMessages_;
			  }
		  }
		  public Builder setUnackedMessages(long value)
		  {
			bitField0_ |= 0x00000100;
			unackedMessages_ = value;

			return this;
		  }
		  public Builder clearUnackedMessages()
		  {
			bitField0_ = (bitField0_ & ~0x00000100);
			unackedMessages_ = 0L;

			return this;
		  }

		  // optional bool blockedConsumerOnUnackedMsgs = 10;
		  internal bool blockedConsumerOnUnackedMsgs_;
		  public bool hasBlockedConsumerOnUnackedMsgs()
		  {
			return ((bitField0_ & 0x00000200) == 0x00000200);
		  }
		  public bool BlockedConsumerOnUnackedMsgs
		  {
			  get
			  {
				return blockedConsumerOnUnackedMsgs_;
			  }
		  }
		  public Builder setBlockedConsumerOnUnackedMsgs(bool value)
		  {
			bitField0_ |= 0x00000200;
			blockedConsumerOnUnackedMsgs_ = value;

			return this;
		  }
		  public Builder clearBlockedConsumerOnUnackedMsgs()
		  {
			bitField0_ = (bitField0_ & ~0x00000200);
			blockedConsumerOnUnackedMsgs_ = false;

			return this;
		  }

		  // optional string address = 11;
		  internal object address_ = "";
		  public bool hasAddress()
		  {
			return ((bitField0_ & 0x00000400) == 0x00000400);
		  }
		  public string getAddress()
		  {
			object @ref = address_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  address_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setAddress(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000400;
			address_ = value;

			return this;
		  }
		  public Builder clearAddress()
		  {
			bitField0_ = (bitField0_ & ~0x00000400);
			address_ = DefaultInstance.Address;

			return this;
		  }
		  internal void setAddress(ByteString value)
		  {
			bitField0_ |= 0x00000400;
			address_ = value;

		  }

		  // optional string connectedSince = 12;
		  internal object connectedSince_ = "";
		  public bool hasConnectedSince()
		  {
			return ((bitField0_ & 0x00000800) == 0x00000800);
		  }
		  public string getConnectedSince()
		  {
			object @ref = connectedSince_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  connectedSince_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setConnectedSince(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000800;
			connectedSince_ = value;

			return this;
		  }
		  public Builder clearConnectedSince()
		  {
			bitField0_ = (bitField0_ & ~0x00000800);
			connectedSince_ = DefaultInstance.ConnectedSince;

			return this;
		  }
		  internal void setConnectedSince(ByteString value)
		  {
			bitField0_ |= 0x00000800;
			connectedSince_ = value;

		  }

		  // optional string type = 13;
		  internal object type_ = "";
		  public bool hasType()
		  {
			return ((bitField0_ & 0x00001000) == 0x00001000);
		  }
		  public string getType()
		  {
			object @ref = type_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  type_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setType(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00001000;
			type_ = value;

			return this;
		  }
		  public Builder clearType()
		  {
			bitField0_ = (bitField0_ & ~0x00001000);
			type_ = DefaultInstance.Type;

			return this;
		  }
		  internal void setType(ByteString value)
		  {
			bitField0_ |= 0x00001000;
			type_ = value;

		  }

		  // optional double msgRateExpired = 14;
		  internal double msgRateExpired_;
		  public bool hasMsgRateExpired()
		  {
			return ((bitField0_ & 0x00002000) == 0x00002000);
		  }
		  public double MsgRateExpired
		  {
			  get
			  {
				return msgRateExpired_;
			  }
		  }
		  public Builder setMsgRateExpired(double value)
		  {
			bitField0_ |= 0x00002000;
			msgRateExpired_ = value;

			return this;
		  }
		  public Builder clearMsgRateExpired()
		  {
			bitField0_ = (bitField0_ & ~0x00002000);
			msgRateExpired_ = 0D;

			return this;
		  }

		  // optional uint64 msgBacklog = 15;
		  internal long msgBacklog_;
		  public bool hasMsgBacklog()
		  {
			return ((bitField0_ & 0x00004000) == 0x00004000);
		  }
		  public long MsgBacklog
		  {
			  get
			  {
				return msgBacklog_;
			  }
		  }
		  public Builder setMsgBacklog(long value)
		  {
			bitField0_ |= 0x00004000;
			msgBacklog_ = value;

			return this;
		  }
		  public Builder clearMsgBacklog()
		  {
			bitField0_ = (bitField0_ & ~0x00004000);
			msgBacklog_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandConsumerStatsResponse)
		}

		static CommandConsumerStatsResponse()
		{
		  defaultInstance = new CommandConsumerStatsResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandConsumerStatsResponse)
	  }

	  public interface CommandGetLastMessageIdOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 consumer_id = 1;
		bool hasConsumerId();
		long ConsumerId {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}
	  }
	  public sealed class CommandGetLastMessageId : CommandGetLastMessageIdOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandGetLastMessageId.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandGetLastMessageId(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandGetLastMessageId> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandGetLastMessageId>
		 {
			 protected internal CommandGetLastMessageId newObject(Handle handle)
			 {
			   return new CommandGetLastMessageId(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandGetLastMessageId(bool noInit)
		{
		}

		internal static readonly CommandGetLastMessageId defaultInstance;
		public static CommandGetLastMessageId DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandGetLastMessageId DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 consumer_id = 1;
		public const int CONSUMER_ID_FIELD_NUMBER = 1;
		internal long consumerId_;
		public bool hasConsumerId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long ConsumerId
		{
			get
			{
			  return consumerId_;
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		internal void initFields()
		{
		  consumerId_ = 0L;
		  requestId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasConsumerId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, consumerId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(consumerId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandGetLastMessageId parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetLastMessageId parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandGetLastMessageId parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetLastMessageId parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetLastMessageId parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetLastMessageId parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetLastMessageId parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetLastMessageId parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandGetLastMessageId parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageId parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetLastMessageId parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandGetLastMessageId prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandGetLastMessageId, Builder>, CommandGetLastMessageIdOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandGetLastMessageId.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			consumerId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandGetLastMessageId DefaultInstanceForType
		  {
			  get
			  {
				return CommandGetLastMessageId.DefaultInstance;
			  }
		  }

		  public CommandGetLastMessageId build()
		  {
			CommandGetLastMessageId result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandGetLastMessageId buildParsed() throws InvalidProtocolBufferException
		  internal CommandGetLastMessageId buildParsed()
		  {
			CommandGetLastMessageId result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandGetLastMessageId buildPartial()
		  {
			CommandGetLastMessageId result = CommandGetLastMessageId.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.consumerId_ = consumerId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandGetLastMessageId other)
		  {
			if (other == CommandGetLastMessageId.DefaultInstance)
			{
				return this;
			}
			if (other.hasConsumerId())
			{
			  ConsumerId = other.ConsumerId;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasConsumerId())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  consumerId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 consumer_id = 1;
		  internal long consumerId_;
		  public bool hasConsumerId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long ConsumerId
		  {
			  get
			  {
				return consumerId_;
			  }
		  }
		  public Builder setConsumerId(long value)
		  {
			bitField0_ |= 0x00000001;
			consumerId_ = value;

			return this;
		  }
		  public Builder clearConsumerId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			consumerId_ = 0L;

			return this;
		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandGetLastMessageId)
		}

		static CommandGetLastMessageId()
		{
		  defaultInstance = new CommandGetLastMessageId(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandGetLastMessageId)
	  }

	  public interface CommandGetLastMessageIdResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required .pulsar.proto.MessageIdData last_message_id = 1;
		bool hasLastMessageId();
		MessageIdData LastMessageId {get;}

		// required uint64 request_id = 2;
		bool hasRequestId();
		long RequestId {get;}
	  }
	  public sealed class CommandGetLastMessageIdResponse : CommandGetLastMessageIdResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandGetLastMessageIdResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandGetLastMessageIdResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandGetLastMessageIdResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandGetLastMessageIdResponse>
		 {
			 protected internal CommandGetLastMessageIdResponse newObject(Handle handle)
			 {
			   return new CommandGetLastMessageIdResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandGetLastMessageIdResponse(bool noInit)
		{
		}

		internal static readonly CommandGetLastMessageIdResponse defaultInstance;
		public static CommandGetLastMessageIdResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandGetLastMessageIdResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required .pulsar.proto.MessageIdData last_message_id = 1;
		public const int LAST_MESSAGE_ID_FIELD_NUMBER = 1;
		internal MessageIdData lastMessageId_;
		public bool hasLastMessageId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public MessageIdData LastMessageId
		{
			get
			{
			  return lastMessageId_;
			}
		}

		// required uint64 request_id = 2;
		public const int REQUEST_ID_FIELD_NUMBER = 2;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		internal void initFields()
		{
		  lastMessageId_ = MessageIdData.DefaultInstance;
		  requestId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasLastMessageId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!LastMessageId.Initialized)
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteMessage(1, lastMessageId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, requestId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeMessageSize(1, lastMessageId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandGetLastMessageIdResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetLastMessageIdResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandGetLastMessageIdResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetLastMessageIdResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetLastMessageIdResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetLastMessageIdResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetLastMessageIdResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetLastMessageIdResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandGetLastMessageIdResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetLastMessageIdResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetLastMessageIdResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandGetLastMessageIdResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandGetLastMessageIdResponse, Builder>, CommandGetLastMessageIdResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandGetLastMessageIdResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			lastMessageId_ = MessageIdData.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandGetLastMessageIdResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandGetLastMessageIdResponse.DefaultInstance;
			  }
		  }

		  public CommandGetLastMessageIdResponse build()
		  {
			CommandGetLastMessageIdResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandGetLastMessageIdResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandGetLastMessageIdResponse buildParsed()
		  {
			CommandGetLastMessageIdResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandGetLastMessageIdResponse buildPartial()
		  {
			CommandGetLastMessageIdResponse result = CommandGetLastMessageIdResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.lastMessageId_ = lastMessageId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.requestId_ = requestId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandGetLastMessageIdResponse other)
		  {
			if (other == CommandGetLastMessageIdResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasLastMessageId())
			{
			  mergeLastMessageId(other.LastMessageId);
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasLastMessageId())
				{
    
				  return false;
				}
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (!getLastMessageId().Initialized)
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  MessageIdData.Builder subBuilder = MessageIdData.newBuilder();
				  if (hasLastMessageId())
				  {
					subBuilder.mergeFrom(getLastMessageId());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setLastMessageId(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  requestId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required .pulsar.proto.MessageIdData last_message_id = 1;
		  internal MessageIdData lastMessageId_ = MessageIdData.DefaultInstance;
		  public bool hasLastMessageId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public MessageIdData getLastMessageId()
		  {
			return lastMessageId_;
		  }
		  public Builder setLastMessageId(MessageIdData value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			lastMessageId_ = value;

			bitField0_ |= 0x00000001;
			return this;
		  }
		  public Builder setLastMessageId(MessageIdData.Builder builderForValue)
		  {
			lastMessageId_ = builderForValue.build();

			bitField0_ |= 0x00000001;
			return this;
		  }
		  public Builder mergeLastMessageId(MessageIdData value)
		  {
			if (((bitField0_ & 0x00000001) == 0x00000001) && lastMessageId_ != MessageIdData.DefaultInstance)
			{
			  lastMessageId_ = MessageIdData.newBuilder(lastMessageId_).mergeFrom(value).buildPartial();
			}
			else
			{
			  lastMessageId_ = value;
			}

			bitField0_ |= 0x00000001;
			return this;
		  }
		  public Builder clearLastMessageId()
		  {
			lastMessageId_ = MessageIdData.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000001);
			return this;
		  }

		  // required uint64 request_id = 2;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000002;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			requestId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandGetLastMessageIdResponse)
		}

		static CommandGetLastMessageIdResponse()
		{
		  defaultInstance = new CommandGetLastMessageIdResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandGetLastMessageIdResponse)
	  }

	  public interface CommandGetTopicsOfNamespaceOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// required string namespace = 2;
		bool hasNamespace();
		string Namespace {get;}

		// optional .pulsar.proto.CommandGetTopicsOfNamespace.Mode mode = 3 [default = PERSISTENT];
		bool hasMode();
		CommandGetTopicsOfNamespace.Mode Mode {get;}
	  }
	  public sealed class CommandGetTopicsOfNamespace : CommandGetTopicsOfNamespaceOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandGetTopicsOfNamespace.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandGetTopicsOfNamespace(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandGetTopicsOfNamespace> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandGetTopicsOfNamespace>
		 {
			 protected internal CommandGetTopicsOfNamespace newObject(Handle handle)
			 {
			   return new CommandGetTopicsOfNamespace(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandGetTopicsOfNamespace(bool noInit)
		{
		}

		internal static readonly CommandGetTopicsOfNamespace defaultInstance;
		public static CommandGetTopicsOfNamespace DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandGetTopicsOfNamespace DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		public sealed class Mode : Internal.EnumLite
		{
		  public static readonly Mode PERSISTENT = new Mode("PERSISTENT", InnerEnum.PERSISTENT, 0, 0);
		  public static readonly Mode NON_PERSISTENT = new Mode("NON_PERSISTENT", InnerEnum.NON_PERSISTENT, 1, 1);
		  public static readonly Mode ALL = new Mode("ALL", InnerEnum.ALL, 2, 2);

		  private static readonly IList<Mode> valueList = new List<Mode>();

		  static Mode()
		  {
			  valueList.Add(PERSISTENT);
			  valueList.Add(NON_PERSISTENT);
			  valueList.Add(ALL);
		  }

		  public enum InnerEnum
		  {
			  PERSISTENT,
			  NON_PERSISTENT,
			  ALL
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int PERSISTENT_VALUE = 0;
		  public const int NON_PERSISTENT_VALUE = 1;
		  public const int ALL_VALUE = 2;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static Mode valueOf(int value)
		  {
			switch (value)
			{
			  case 0:
				  return PERSISTENT;
			  case 1:
				  return NON_PERSISTENT;
			  case 2:
				  return ALL;
			  default:
				  return null;
			}
		  }

		  public static IList<Mode> internalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<Mode> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal Mode(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<Mode>
	//	  {
	//		  public Mode findValueByNumber(int number)
	//		  {
	//			return Mode.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.CommandGetTopicsOfNamespace.Mode)

			public static IList<Mode> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// required string namespace = 2;
		public const int NAMESPACE_FIELD_NUMBER = 2;
		internal object namespace_;
		public bool hasNamespace()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public string Namespace
		{
			get
			{
			  object @ref = namespace_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  namespace_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString NamespaceBytes
		{
			get
			{
			  object @ref = namespace_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				namespace_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional .pulsar.proto.CommandGetTopicsOfNamespace.Mode mode = 3 [default = PERSISTENT];
		public const int MODE_FIELD_NUMBER = 3;
		internal CommandGetTopicsOfNamespace.Mode mode_;
		public bool hasMode()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public CommandGetTopicsOfNamespace.Mode getMode()
		{
		  return mode_;
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  namespace_ = "";
		  mode_ = CommandGetTopicsOfNamespace.Mode.PERSISTENT;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasNamespace())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, NamespaceBytes);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.writeEnum(3, mode_.Number);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, NamespaceBytes);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeEnumSize(3, mode_.Number);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandGetTopicsOfNamespace parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetTopicsOfNamespace parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandGetTopicsOfNamespace parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetTopicsOfNamespace parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetTopicsOfNamespace parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetTopicsOfNamespace parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetTopicsOfNamespace parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetTopicsOfNamespace parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandGetTopicsOfNamespace parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespace parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetTopicsOfNamespace parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandGetTopicsOfNamespace prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandGetTopicsOfNamespace, Builder>, CommandGetTopicsOfNamespaceOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandGetTopicsOfNamespace.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass();

		  private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			namespace_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			mode_ = CommandGetTopicsOfNamespace.Mode.PERSISTENT;
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandGetTopicsOfNamespace DefaultInstanceForType
		  {
			  get
			  {
				return CommandGetTopicsOfNamespace.DefaultInstance;
			  }
		  }

		  public CommandGetTopicsOfNamespace build()
		  {
			CommandGetTopicsOfNamespace result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandGetTopicsOfNamespace buildParsed() throws InvalidProtocolBufferException
		  internal CommandGetTopicsOfNamespace buildParsed()
		  {
			CommandGetTopicsOfNamespace result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandGetTopicsOfNamespace buildPartial()
		  {
			CommandGetTopicsOfNamespace result = CommandGetTopicsOfNamespace.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.namespace_ = namespace_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.mode_ = mode_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandGetTopicsOfNamespace other)
		  {
			if (other == CommandGetTopicsOfNamespace.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasNamespace())
			{
			  setNamespace(other.Namespace);
			}
			if (other.hasMode())
			{
			  Mode = other.getMode();
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (!hasNamespace())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  namespace_ = input.readBytes();
				  break;
				}
				case 24:
				{
				  int rawValue = input.readEnum();
				  CommandGetTopicsOfNamespace.Mode value = CommandGetTopicsOfNamespace.Mode.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000004;
					mode_ = value;
				  }
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // required string namespace = 2;
		  internal object namespace_ = "";
		  public bool hasNamespace()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getNamespace()
		  {
			object @ref = namespace_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  namespace_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setNamespace(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			namespace_ = value;

			return this;
		  }
		  public Builder clearNamespace()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			namespace_ = DefaultInstance.Namespace;

			return this;
		  }
		  internal void setNamespace(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			namespace_ = value;

		  }

		  // optional .pulsar.proto.CommandGetTopicsOfNamespace.Mode mode = 3 [default = PERSISTENT];
		  internal CommandGetTopicsOfNamespace.Mode mode_ = CommandGetTopicsOfNamespace.Mode.PERSISTENT;
		  public bool hasMode()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public CommandGetTopicsOfNamespace.Mode Mode
		  {
			  get
			  {
				return mode_;
			  }
		  }
		  public Builder setMode(CommandGetTopicsOfNamespace.Mode value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000004;
			mode_ = value;

			return this;
		  }
		  public Builder clearMode()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			mode_ = CommandGetTopicsOfNamespace.Mode.PERSISTENT;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandGetTopicsOfNamespace)
		}

		static CommandGetTopicsOfNamespace()
		{
		  defaultInstance = new CommandGetTopicsOfNamespace(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandGetTopicsOfNamespace)
	  }

	  public interface CommandGetTopicsOfNamespaceResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// repeated string topics = 2;
		IList<string> TopicsList {get;}
		int TopicsCount {get;}
		string getTopics(int index);
	  }
	  public sealed class CommandGetTopicsOfNamespaceResponse : CommandGetTopicsOfNamespaceResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandGetTopicsOfNamespaceResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandGetTopicsOfNamespaceResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandGetTopicsOfNamespaceResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandGetTopicsOfNamespaceResponse>
		 {
			 protected internal CommandGetTopicsOfNamespaceResponse newObject(Handle handle)
			 {
			   return new CommandGetTopicsOfNamespaceResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandGetTopicsOfNamespaceResponse(bool noInit)
		{
		}

		internal static readonly CommandGetTopicsOfNamespaceResponse defaultInstance;
		public static CommandGetTopicsOfNamespaceResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandGetTopicsOfNamespaceResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// repeated string topics = 2;
		public const int TOPICS_FIELD_NUMBER = 2;
		internal LazyStringList topics_;
		public IList<string> TopicsList
		{
			get
			{
			  return topics_;
			}
		}
		public int TopicsCount
		{
			get
			{
			  return topics_.size();
			}
		}
		public string getTopics(int index)
		{
		  return topics_.get(index);
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  topics_ = LazyStringArrayList.EMPTY;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  for (int i = 0; i < topics_.size(); i++)
		  {
			output.WriteBytes(2, topics_.getByteString(i));
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  {
				int dataSize = 0;
				for (int i = 0; i < topics_.size(); i++)
				{
				  dataSize += CodedOutputStream.computeBytesSizeNoTag(topics_.getByteString(i));
				}
				size += dataSize;
				size += 1 * TopicsList.Count;
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandGetTopicsOfNamespaceResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetTopicsOfNamespaceResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandGetTopicsOfNamespaceResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetTopicsOfNamespaceResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetTopicsOfNamespaceResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetTopicsOfNamespaceResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetTopicsOfNamespaceResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetTopicsOfNamespaceResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandGetTopicsOfNamespaceResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetTopicsOfNamespaceResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetTopicsOfNamespaceResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandGetTopicsOfNamespaceResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandGetTopicsOfNamespaceResponse, Builder>, CommandGetTopicsOfNamespaceResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandGetTopicsOfNamespaceResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			topics_ = LazyStringArrayList.EMPTY;
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandGetTopicsOfNamespaceResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandGetTopicsOfNamespaceResponse.DefaultInstance;
			  }
		  }

		  public CommandGetTopicsOfNamespaceResponse build()
		  {
			CommandGetTopicsOfNamespaceResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandGetTopicsOfNamespaceResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandGetTopicsOfNamespaceResponse buildParsed()
		  {
			CommandGetTopicsOfNamespaceResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandGetTopicsOfNamespaceResponse buildPartial()
		  {
			CommandGetTopicsOfNamespaceResponse result = CommandGetTopicsOfNamespaceResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((bitField0_ & 0x00000002) == 0x00000002))
			{
			  topics_ = new UnmodifiableLazyStringList(topics_);
			  bitField0_ = (bitField0_ & ~0x00000002);
			}
			result.topics_ = topics_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandGetTopicsOfNamespaceResponse other)
		  {
			if (other == CommandGetTopicsOfNamespaceResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (!other.topics_.Empty)
			{
			  if (topics_.Empty)
			  {
				topics_ = other.topics_;
				bitField0_ = (bitField0_ & ~0x00000002);
			  }
			  else
			  {
				ensureTopicsIsMutable();
				topics_.addAll(other.topics_);
			  }

			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 18:
				{
				  ensureTopicsIsMutable();
				  topics_.add(input.readBytes());
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // repeated string topics = 2;
		  internal LazyStringList topics_ = LazyStringArrayList.EMPTY;
		  internal void ensureTopicsIsMutable()
		  {
			if (!((bitField0_ & 0x00000002) == 0x00000002))
			{
			  topics_ = new LazyStringArrayList(topics_);
			  bitField0_ |= 0x00000002;
			}
		  }
		  public IList<string> TopicsList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(topics_);
			  }
		  }
		  public int TopicsCount
		  {
			  get
			  {
				return topics_.size();
			  }
		  }
		  public string getTopics(int index)
		  {
			return topics_.get(index);
		  }
		  public Builder setTopics(int index, string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  ensureTopicsIsMutable();
			topics_.set(index, value);

			return this;
		  }
		  public Builder addTopics(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  ensureTopicsIsMutable();
			topics_.add(value);

			return this;
		  }
		  public Builder addAllTopics(IEnumerable<string> values)
		  {
			ensureTopicsIsMutable();
			base.addAll(values, topics_);

			return this;
		  }
		  public Builder clearTopics()
		  {
			topics_ = LazyStringArrayList.EMPTY;
			bitField0_ = (bitField0_ & ~0x00000002);

			return this;
		  }
		  internal void addTopics(ByteString value)
		  {
			ensureTopicsIsMutable();
			topics_.add(value);

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandGetTopicsOfNamespaceResponse)
		}

		static CommandGetTopicsOfNamespaceResponse()
		{
		  defaultInstance = new CommandGetTopicsOfNamespaceResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandGetTopicsOfNamespaceResponse)
	  }

	  public interface CommandGetSchemaOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// required string topic = 2;
		bool hasTopic();
		string Topic {get;}

		// optional bytes schema_version = 3;
		bool hasSchemaVersion();
		ByteString SchemaVersion {get;}
	  }
	  public sealed class CommandGetSchema : CommandGetSchemaOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandGetSchema.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandGetSchema(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandGetSchema> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandGetSchema>
		 {
			 protected internal CommandGetSchema newObject(Handle handle)
			 {
			   return new CommandGetSchema(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandGetSchema(bool noInit)
		{
		}

		internal static readonly CommandGetSchema defaultInstance;
		public static CommandGetSchema DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandGetSchema DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// required string topic = 2;
		public const int TOPIC_FIELD_NUMBER = 2;
		internal object topic_;
		public bool hasTopic()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public string Topic
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  topic_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TopicBytes
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				topic_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional bytes schema_version = 3;
		public const int SCHEMA_VERSION_FIELD_NUMBER = 3;
		internal ByteString schemaVersion_;
		public bool hasSchemaVersion()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public ByteString SchemaVersion
		{
			get
			{
			  return schemaVersion_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  topic_ = "";
		  schemaVersion_ = ByteString.Empty;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasTopic())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, TopicBytes);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteBytes(3, schemaVersion_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, TopicBytes);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeBytesSize(3, schemaVersion_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandGetSchema parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetSchema parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandGetSchema parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetSchema parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetSchema parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetSchema parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetSchema parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetSchema parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandGetSchema parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchema parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetSchema parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandGetSchema prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandGetSchema, Builder>, CommandGetSchemaOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandGetSchema.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			topic_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			schemaVersion_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandGetSchema DefaultInstanceForType
		  {
			  get
			  {
				return CommandGetSchema.DefaultInstance;
			  }
		  }

		  public CommandGetSchema build()
		  {
			CommandGetSchema result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandGetSchema buildParsed() throws InvalidProtocolBufferException
		  internal CommandGetSchema buildParsed()
		  {
			CommandGetSchema result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandGetSchema buildPartial()
		  {
			CommandGetSchema result = CommandGetSchema.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.topic_ = topic_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.schemaVersion_ = schemaVersion_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandGetSchema other)
		  {
			if (other == CommandGetSchema.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTopic())
			{
			  setTopic(other.Topic);
			}
			if (other.hasSchemaVersion())
			{
			  SchemaVersion = other.SchemaVersion;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (!hasTopic())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  topic_ = input.readBytes();
				  break;
				}
				case 26:
				{
				  bitField0_ |= 0x00000004;
				  schemaVersion_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // required string topic = 2;
		  internal object topic_ = "";
		  public bool hasTopic()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getTopic()
		  {
			object @ref = topic_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  topic_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setTopic(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			topic_ = value;

			return this;
		  }
		  public Builder clearTopic()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			topic_ = DefaultInstance.Topic;

			return this;
		  }
		  internal void setTopic(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			topic_ = value;

		  }

		  // optional bytes schema_version = 3;
		  internal ByteString schemaVersion_ = ByteString.Empty;
		  public bool hasSchemaVersion()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public ByteString SchemaVersion
		  {
			  get
			  {
				return schemaVersion_;
			  }
		  }
		  public Builder setSchemaVersion(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000004;
			schemaVersion_ = value;

			return this;
		  }
		  public Builder clearSchemaVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			schemaVersion_ = DefaultInstance.SchemaVersion;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandGetSchema)
		}

		static CommandGetSchema()
		{
		  defaultInstance = new CommandGetSchema(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandGetSchema)
	  }

	  public interface CommandGetSchemaResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional .pulsar.proto.ServerError error_code = 2;
		bool hasErrorCode();
		ServerError ErrorCode {get;}

		// optional string error_message = 3;
		bool hasErrorMessage();
		string ErrorMessage {get;}

		// optional .pulsar.proto.Schema schema = 4;
		bool hasSchema();
		Schema Schema {get;}

		// optional bytes schema_version = 5;
		bool hasSchemaVersion();
		ByteString SchemaVersion {get;}
	  }
	  public sealed class CommandGetSchemaResponse : CommandGetSchemaResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandGetSchemaResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandGetSchemaResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandGetSchemaResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandGetSchemaResponse>
		 {
			 protected internal CommandGetSchemaResponse newObject(Handle handle)
			 {
			   return new CommandGetSchemaResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandGetSchemaResponse(bool noInit)
		{
		}

		internal static readonly CommandGetSchemaResponse defaultInstance;
		public static CommandGetSchemaResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandGetSchemaResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional .pulsar.proto.ServerError error_code = 2;
		public const int ERROR_CODE_FIELD_NUMBER = 2;
		internal ServerError errorCode_;
		public bool hasErrorCode()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public ServerError ErrorCode
		{
			get
			{
			  return errorCode_;
			}
		}

		// optional string error_message = 3;
		public const int ERROR_MESSAGE_FIELD_NUMBER = 3;
		internal object errorMessage_;
		public bool hasErrorMessage()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public string ErrorMessage
		{
			get
			{
			  object @ref = errorMessage_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  errorMessage_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ErrorMessageBytes
		{
			get
			{
			  object @ref = errorMessage_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				errorMessage_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional .pulsar.proto.Schema schema = 4;
		public const int SCHEMA_FIELD_NUMBER = 4;
		internal Schema schema_;
		public bool hasSchema()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public Schema Schema
		{
			get
			{
			  return schema_;
			}
		}

		// optional bytes schema_version = 5;
		public const int SCHEMA_VERSION_FIELD_NUMBER = 5;
		internal ByteString schemaVersion_;
		public bool hasSchemaVersion()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public ByteString SchemaVersion
		{
			get
			{
			  return schemaVersion_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  errorCode_ = ServerError.UnknownError;
		  errorMessage_ = "";
		  schema_ = Schema.DefaultInstance;
		  schemaVersion_ = ByteString.Empty;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (hasSchema())
			  {
				if (!Schema.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.writeEnum(2, errorCode_.Number);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteBytes(3, ErrorMessageBytes);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteMessage(4, schema_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, schemaVersion_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeEnumSize(2, errorCode_.Number);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeBytesSize(3, ErrorMessageBytes);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeMessageSize(4, schema_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, schemaVersion_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandGetSchemaResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetSchemaResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandGetSchemaResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetSchemaResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetSchemaResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetSchemaResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetSchemaResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetSchemaResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandGetSchemaResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetSchemaResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetSchemaResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandGetSchemaResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandGetSchemaResponse, Builder>, CommandGetSchemaResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandGetSchemaResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			errorCode_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000002);
			errorMessage_ = "";
			bitField0_ = (bitField0_ & ~0x00000004);
			schema_ = Schema.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000008);
			schemaVersion_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandGetSchemaResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandGetSchemaResponse.DefaultInstance;
			  }
		  }

		  public CommandGetSchemaResponse build()
		  {
			CommandGetSchemaResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandGetSchemaResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandGetSchemaResponse buildParsed()
		  {
			CommandGetSchemaResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandGetSchemaResponse buildPartial()
		  {
			CommandGetSchemaResponse result = CommandGetSchemaResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.errorCode_ = errorCode_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.errorMessage_ = errorMessage_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.schema_ = schema_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.schemaVersion_ = schemaVersion_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandGetSchemaResponse other)
		  {
			if (other == CommandGetSchemaResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasErrorCode())
			{
			  ErrorCode = other.ErrorCode;
			}
			if (other.hasErrorMessage())
			{
			  setErrorMessage(other.ErrorMessage);
			}
			if (other.hasSchema())
			{
			  mergeSchema(other.Schema);
			}
			if (other.hasSchemaVersion())
			{
			  SchemaVersion = other.SchemaVersion;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (hasSchema())
				{
				  if (!getSchema().Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000002;
					errorCode_ = value;
				  }
				  break;
				}
				case 26:
				{
				  bitField0_ |= 0x00000004;
				  errorMessage_ = input.readBytes();
				  break;
				}
				case 34:
				{
				  Schema.Builder subBuilder = Schema.newBuilder();
				  if (hasSchema())
				  {
					subBuilder.mergeFrom(getSchema());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSchema(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  schemaVersion_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error_code = 2;
		  internal ServerError errorCode_ = ServerError.UnknownError;
		  public bool hasErrorCode()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public ServerError ErrorCode
		  {
			  get
			  {
				return errorCode_;
			  }
		  }
		  public Builder setErrorCode(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000002;
			errorCode_ = value;

			return this;
		  }
		  public Builder clearErrorCode()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			errorCode_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string error_message = 3;
		  internal object errorMessage_ = "";
		  public bool hasErrorMessage()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public string getErrorMessage()
		  {
			object @ref = errorMessage_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  errorMessage_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setErrorMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000004;
			errorMessage_ = value;

			return this;
		  }
		  public Builder clearErrorMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			errorMessage_ = DefaultInstance.ErrorMessage;

			return this;
		  }
		  internal void setErrorMessage(ByteString value)
		  {
			bitField0_ |= 0x00000004;
			errorMessage_ = value;

		  }

		  // optional .pulsar.proto.Schema schema = 4;
		  internal Schema schema_ = Schema.DefaultInstance;
		  public bool hasSchema()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public Schema getSchema()
		  {
			return schema_;
		  }
		  public Builder setSchema(Schema value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			schema_ = value;

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder setSchema(Schema.Builder builderForValue)
		  {
			schema_ = builderForValue.build();

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder mergeSchema(Schema value)
		  {
			if (((bitField0_ & 0x00000008) == 0x00000008) && schema_ != Schema.DefaultInstance)
			{
			  schema_ = Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
			}
			else
			{
			  schema_ = value;
			}

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder clearSchema()
		  {
			schema_ = Schema.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  // optional bytes schema_version = 5;
		  internal ByteString schemaVersion_ = ByteString.Empty;
		  public bool hasSchemaVersion()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public ByteString SchemaVersion
		  {
			  get
			  {
				return schemaVersion_;
			  }
		  }
		  public Builder setSchemaVersion(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			schemaVersion_ = value;

			return this;
		  }
		  public Builder clearSchemaVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			schemaVersion_ = DefaultInstance.SchemaVersion;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandGetSchemaResponse)
		}

		static CommandGetSchemaResponse()
		{
		  defaultInstance = new CommandGetSchemaResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandGetSchemaResponse)
	  }

	  public interface CommandGetOrCreateSchemaOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// required string topic = 2;
		bool hasTopic();
		string Topic {get;}

		// required .pulsar.proto.Schema schema = 3;
		bool hasSchema();
		Schema Schema {get;}
	  }
	  public sealed class CommandGetOrCreateSchema : CommandGetOrCreateSchemaOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandGetOrCreateSchema.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandGetOrCreateSchema(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandGetOrCreateSchema> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandGetOrCreateSchema>
		 {
			 protected internal CommandGetOrCreateSchema newObject(Handle handle)
			 {
			   return new CommandGetOrCreateSchema(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandGetOrCreateSchema(bool noInit)
		{
		}

		internal static readonly CommandGetOrCreateSchema defaultInstance;
		public static CommandGetOrCreateSchema DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandGetOrCreateSchema DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// required string topic = 2;
		public const int TOPIC_FIELD_NUMBER = 2;
		internal object topic_;
		public bool hasTopic()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public string Topic
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  topic_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TopicBytes
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				topic_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required .pulsar.proto.Schema schema = 3;
		public const int SCHEMA_FIELD_NUMBER = 3;
		internal Schema schema_;
		public bool hasSchema()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public Schema Schema
		{
			get
			{
			  return schema_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  topic_ = "";
		  schema_ = Schema.DefaultInstance;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasTopic())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSchema())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!Schema.Initialized)
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, TopicBytes);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteMessage(3, schema_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, TopicBytes);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeMessageSize(3, schema_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandGetOrCreateSchema parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetOrCreateSchema parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandGetOrCreateSchema parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetOrCreateSchema parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetOrCreateSchema parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetOrCreateSchema parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetOrCreateSchema parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetOrCreateSchema parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandGetOrCreateSchema parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchema parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetOrCreateSchema parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandGetOrCreateSchema prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandGetOrCreateSchema, Builder>, CommandGetOrCreateSchemaOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandGetOrCreateSchema.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			topic_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			schema_ = Schema.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandGetOrCreateSchema DefaultInstanceForType
		  {
			  get
			  {
				return CommandGetOrCreateSchema.DefaultInstance;
			  }
		  }

		  public CommandGetOrCreateSchema build()
		  {
			CommandGetOrCreateSchema result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandGetOrCreateSchema buildParsed() throws InvalidProtocolBufferException
		  internal CommandGetOrCreateSchema buildParsed()
		  {
			CommandGetOrCreateSchema result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandGetOrCreateSchema buildPartial()
		  {
			CommandGetOrCreateSchema result = CommandGetOrCreateSchema.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.topic_ = topic_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.schema_ = schema_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandGetOrCreateSchema other)
		  {
			if (other == CommandGetOrCreateSchema.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTopic())
			{
			  setTopic(other.Topic);
			}
			if (other.hasSchema())
			{
			  mergeSchema(other.Schema);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (!hasTopic())
				{
    
				  return false;
				}
				if (!hasSchema())
				{
    
				  return false;
				}
				if (!getSchema().Initialized)
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  topic_ = input.readBytes();
				  break;
				}
				case 26:
				{
				  Schema.Builder subBuilder = Schema.newBuilder();
				  if (hasSchema())
				  {
					subBuilder.mergeFrom(getSchema());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSchema(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // required string topic = 2;
		  internal object topic_ = "";
		  public bool hasTopic()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getTopic()
		  {
			object @ref = topic_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  topic_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setTopic(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			topic_ = value;

			return this;
		  }
		  public Builder clearTopic()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			topic_ = DefaultInstance.Topic;

			return this;
		  }
		  internal void setTopic(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			topic_ = value;

		  }

		  // required .pulsar.proto.Schema schema = 3;
		  internal Schema schema_ = Schema.DefaultInstance;
		  public bool hasSchema()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public Schema getSchema()
		  {
			return schema_;
		  }
		  public Builder setSchema(Schema value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			schema_ = value;

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder setSchema(Schema.Builder builderForValue)
		  {
			schema_ = builderForValue.build();

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder mergeSchema(Schema value)
		  {
			if (((bitField0_ & 0x00000004) == 0x00000004) && schema_ != Schema.DefaultInstance)
			{
			  schema_ = Schema.newBuilder(schema_).mergeFrom(value).buildPartial();
			}
			else
			{
			  schema_ = value;
			}

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder clearSchema()
		  {
			schema_ = Schema.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandGetOrCreateSchema)
		}

		static CommandGetOrCreateSchema()
		{
		  defaultInstance = new CommandGetOrCreateSchema(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandGetOrCreateSchema)
	  }

	  public interface CommandGetOrCreateSchemaResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional .pulsar.proto.ServerError error_code = 2;
		bool hasErrorCode();
		ServerError ErrorCode {get;}

		// optional string error_message = 3;
		bool hasErrorMessage();
		string ErrorMessage {get;}

		// optional bytes schema_version = 4;
		bool hasSchemaVersion();
		ByteString SchemaVersion {get;}
	  }
	  public sealed class CommandGetOrCreateSchemaResponse : CommandGetOrCreateSchemaResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandGetOrCreateSchemaResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandGetOrCreateSchemaResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandGetOrCreateSchemaResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandGetOrCreateSchemaResponse>
		 {
			 protected internal CommandGetOrCreateSchemaResponse newObject(Handle handle)
			 {
			   return new CommandGetOrCreateSchemaResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandGetOrCreateSchemaResponse(bool noInit)
		{
		}

		internal static readonly CommandGetOrCreateSchemaResponse defaultInstance;
		public static CommandGetOrCreateSchemaResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandGetOrCreateSchemaResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional .pulsar.proto.ServerError error_code = 2;
		public const int ERROR_CODE_FIELD_NUMBER = 2;
		internal ServerError errorCode_;
		public bool hasErrorCode()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public ServerError ErrorCode
		{
			get
			{
			  return errorCode_;
			}
		}

		// optional string error_message = 3;
		public const int ERROR_MESSAGE_FIELD_NUMBER = 3;
		internal object errorMessage_;
		public bool hasErrorMessage()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public string ErrorMessage
		{
			get
			{
			  object @ref = errorMessage_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  errorMessage_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString ErrorMessageBytes
		{
			get
			{
			  object @ref = errorMessage_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				errorMessage_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional bytes schema_version = 4;
		public const int SCHEMA_VERSION_FIELD_NUMBER = 4;
		internal ByteString schemaVersion_;
		public bool hasSchemaVersion()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ByteString SchemaVersion
		{
			get
			{
			  return schemaVersion_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  errorCode_ = ServerError.UnknownError;
		  errorMessage_ = "";
		  schemaVersion_ = ByteString.Empty;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.writeEnum(2, errorCode_.Number);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteBytes(3, ErrorMessageBytes);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteBytes(4, schemaVersion_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeEnumSize(2, errorCode_.Number);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeBytesSize(3, ErrorMessageBytes);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeBytesSize(4, schemaVersion_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandGetOrCreateSchemaResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetOrCreateSchemaResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandGetOrCreateSchemaResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandGetOrCreateSchemaResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetOrCreateSchemaResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetOrCreateSchemaResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandGetOrCreateSchemaResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetOrCreateSchemaResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandGetOrCreateSchemaResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandGetOrCreateSchemaResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandGetOrCreateSchemaResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandGetOrCreateSchemaResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandGetOrCreateSchemaResponse, Builder>, CommandGetOrCreateSchemaResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandGetOrCreateSchemaResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			errorCode_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000002);
			errorMessage_ = "";
			bitField0_ = (bitField0_ & ~0x00000004);
			schemaVersion_ = ByteString.Empty;
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandGetOrCreateSchemaResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandGetOrCreateSchemaResponse.DefaultInstance;
			  }
		  }

		  public CommandGetOrCreateSchemaResponse build()
		  {
			CommandGetOrCreateSchemaResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandGetOrCreateSchemaResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandGetOrCreateSchemaResponse buildParsed()
		  {
			CommandGetOrCreateSchemaResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandGetOrCreateSchemaResponse buildPartial()
		  {
			CommandGetOrCreateSchemaResponse result = CommandGetOrCreateSchemaResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.errorCode_ = errorCode_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.errorMessage_ = errorMessage_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.schemaVersion_ = schemaVersion_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandGetOrCreateSchemaResponse other)
		  {
			if (other == CommandGetOrCreateSchemaResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasErrorCode())
			{
			  ErrorCode = other.ErrorCode;
			}
			if (other.hasErrorMessage())
			{
			  setErrorMessage(other.ErrorMessage);
			}
			if (other.hasSchemaVersion())
			{
			  SchemaVersion = other.SchemaVersion;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000002;
					errorCode_ = value;
				  }
				  break;
				}
				case 26:
				{
				  bitField0_ |= 0x00000004;
				  errorMessage_ = input.readBytes();
				  break;
				}
				case 34:
				{
				  bitField0_ |= 0x00000008;
				  schemaVersion_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error_code = 2;
		  internal ServerError errorCode_ = ServerError.UnknownError;
		  public bool hasErrorCode()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public ServerError ErrorCode
		  {
			  get
			  {
				return errorCode_;
			  }
		  }
		  public Builder setErrorCode(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000002;
			errorCode_ = value;

			return this;
		  }
		  public Builder clearErrorCode()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			errorCode_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string error_message = 3;
		  internal object errorMessage_ = "";
		  public bool hasErrorMessage()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public string getErrorMessage()
		  {
			object @ref = errorMessage_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  errorMessage_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setErrorMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000004;
			errorMessage_ = value;

			return this;
		  }
		  public Builder clearErrorMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			errorMessage_ = DefaultInstance.ErrorMessage;

			return this;
		  }
		  internal void setErrorMessage(ByteString value)
		  {
			bitField0_ |= 0x00000004;
			errorMessage_ = value;

		  }

		  // optional bytes schema_version = 4;
		  internal ByteString schemaVersion_ = ByteString.Empty;
		  public bool hasSchemaVersion()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ByteString SchemaVersion
		  {
			  get
			  {
				return schemaVersion_;
			  }
		  }
		  public Builder setSchemaVersion(ByteString value)
		  {
			if (value == null)
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000008;
			schemaVersion_ = value;

			return this;
		  }
		  public Builder clearSchemaVersion()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			schemaVersion_ = DefaultInstance.SchemaVersion;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandGetOrCreateSchemaResponse)
		}

		static CommandGetOrCreateSchemaResponse()
		{
		  defaultInstance = new CommandGetOrCreateSchemaResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandGetOrCreateSchemaResponse)
	  }

	  public interface CommandNewTxnOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txn_ttl_seconds = 2 [default = 0];
		bool hasTxnTtlSeconds();
		long TxnTtlSeconds {get;}

		// optional uint64 tc_id = 3 [default = 0];
		bool hasTcId();
		long TcId {get;}
	  }
	  public sealed class CommandNewTxn : CommandNewTxnOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandNewTxn.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandNewTxn(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandNewTxn> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandNewTxn>
		 {
			 protected internal CommandNewTxn newObject(Handle handle)
			 {
			   return new CommandNewTxn(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandNewTxn(bool noInit)
		{
		}

		internal static readonly CommandNewTxn defaultInstance;
		public static CommandNewTxn DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandNewTxn DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txn_ttl_seconds = 2 [default = 0];
		public const int TXN_TTL_SECONDS_FIELD_NUMBER = 2;
		internal long txnTtlSeconds_;
		public bool hasTxnTtlSeconds()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnTtlSeconds
		{
			get
			{
			  return txnTtlSeconds_;
			}
		}

		// optional uint64 tc_id = 3 [default = 0];
		public const int TC_ID_FIELD_NUMBER = 3;
		internal long tcId_;
		public bool hasTcId()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TcId
		{
			get
			{
			  return tcId_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnTtlSeconds_ = 0L;
		  tcId_ = 0L;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnTtlSeconds_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, tcId_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnTtlSeconds_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(tcId_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandNewTxn parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandNewTxn parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandNewTxn parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandNewTxn parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandNewTxn parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandNewTxn parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandNewTxn parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandNewTxn parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandNewTxn parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxn parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandNewTxn parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandNewTxn prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandNewTxn, Builder>, CommandNewTxnOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandNewTxn.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnTtlSeconds_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			tcId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandNewTxn DefaultInstanceForType
		  {
			  get
			  {
				return CommandNewTxn.DefaultInstance;
			  }
		  }

		  public CommandNewTxn build()
		  {
			CommandNewTxn result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandNewTxn buildParsed() throws InvalidProtocolBufferException
		  internal CommandNewTxn buildParsed()
		  {
			CommandNewTxn result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandNewTxn buildPartial()
		  {
			CommandNewTxn result = CommandNewTxn.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnTtlSeconds_ = txnTtlSeconds_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.tcId_ = tcId_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandNewTxn other)
		  {
			if (other == CommandNewTxn.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnTtlSeconds())
			{
			  TxnTtlSeconds = other.TxnTtlSeconds;
			}
			if (other.hasTcId())
			{
			  TcId = other.TcId;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnTtlSeconds_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  tcId_ = input.readUInt64();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txn_ttl_seconds = 2 [default = 0];
		  internal long txnTtlSeconds_;
		  public bool hasTxnTtlSeconds()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnTtlSeconds
		  {
			  get
			  {
				return txnTtlSeconds_;
			  }
		  }
		  public Builder setTxnTtlSeconds(long value)
		  {
			bitField0_ |= 0x00000002;
			txnTtlSeconds_ = value;

			return this;
		  }
		  public Builder clearTxnTtlSeconds()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnTtlSeconds_ = 0L;

			return this;
		  }

		  // optional uint64 tc_id = 3 [default = 0];
		  internal long tcId_;
		  public bool hasTcId()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TcId
		  {
			  get
			  {
				return tcId_;
			  }
		  }
		  public Builder setTcId(long value)
		  {
			bitField0_ |= 0x00000004;
			tcId_ = value;

			return this;
		  }
		  public Builder clearTcId()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			tcId_ = 0L;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandNewTxn)
		}

		static CommandNewTxn()
		{
		  defaultInstance = new CommandNewTxn(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandNewTxn)
	  }

	  public interface CommandNewTxnResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.ServerError error = 4;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 5;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandNewTxnResponse : CommandNewTxnResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandNewTxnResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandNewTxnResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandNewTxnResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandNewTxnResponse>
		 {
			 protected internal CommandNewTxnResponse newObject(Handle handle)
			 {
			   return new CommandNewTxnResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandNewTxnResponse(bool noInit)
		{
		}

		internal static readonly CommandNewTxnResponse defaultInstance;
		public static CommandNewTxnResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandNewTxnResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.ServerError error = 4;
		public const int ERROR_FIELD_NUMBER = 4;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 5;
		public const int MESSAGE_FIELD_NUMBER = 5;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, error_.Number);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, error_.Number);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandNewTxnResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandNewTxnResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandNewTxnResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandNewTxnResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandNewTxnResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandNewTxnResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandNewTxnResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandNewTxnResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandNewTxnResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandNewTxnResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandNewTxnResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandNewTxnResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandNewTxnResponse, Builder>, CommandNewTxnResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandNewTxnResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandNewTxnResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandNewTxnResponse.DefaultInstance;
			  }
		  }

		  public CommandNewTxnResponse build()
		  {
			CommandNewTxnResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandNewTxnResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandNewTxnResponse buildParsed()
		  {
			CommandNewTxnResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandNewTxnResponse buildPartial()
		  {
			CommandNewTxnResponse result = CommandNewTxnResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandNewTxnResponse other)
		  {
			if (other == CommandNewTxnResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					error_ = value;
				  }
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 4;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 5;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandNewTxnResponse)
		}

		static CommandNewTxnResponse()
		{
		  defaultInstance = new CommandNewTxnResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandNewTxnResponse)
	  }

	  public interface CommandAddPartitionToTxnOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// repeated string partitions = 4;
		IList<string> PartitionsList {get;}
		int PartitionsCount {get;}
		string getPartitions(int index);
	  }
	  public sealed class CommandAddPartitionToTxn : CommandAddPartitionToTxnOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandAddPartitionToTxn.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandAddPartitionToTxn(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandAddPartitionToTxn> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandAddPartitionToTxn>
		 {
			 protected internal CommandAddPartitionToTxn newObject(Handle handle)
			 {
			   return new CommandAddPartitionToTxn(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandAddPartitionToTxn(bool noInit)
		{
		}

		internal static readonly CommandAddPartitionToTxn defaultInstance;
		public static CommandAddPartitionToTxn DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandAddPartitionToTxn DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// repeated string partitions = 4;
		public const int PARTITIONS_FIELD_NUMBER = 4;
		internal LazyStringList partitions_;
		public IList<string> PartitionsList
		{
			get
			{
			  return partitions_;
			}
		}
		public int PartitionsCount
		{
			get
			{
			  return partitions_.size();
			}
		}
		public string getPartitions(int index)
		{
		  return partitions_.get(index);
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  partitions_ = LazyStringArrayList.EMPTY;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  for (int i = 0; i < partitions_.size(); i++)
		  {
			output.WriteBytes(4, partitions_.getByteString(i));
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  {
				int dataSize = 0;
				for (int i = 0; i < partitions_.size(); i++)
				{
				  dataSize += CodedOutputStream.computeBytesSizeNoTag(partitions_.getByteString(i));
				}
				size += dataSize;
				size += 1 * PartitionsList.Count;
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandAddPartitionToTxn parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAddPartitionToTxn parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandAddPartitionToTxn parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAddPartitionToTxn parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAddPartitionToTxn parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddPartitionToTxn parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAddPartitionToTxn parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddPartitionToTxn parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandAddPartitionToTxn parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxn parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddPartitionToTxn parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandAddPartitionToTxn prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandAddPartitionToTxn, Builder>, CommandAddPartitionToTxnOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandAddPartitionToTxn.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			partitions_ = LazyStringArrayList.EMPTY;
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandAddPartitionToTxn DefaultInstanceForType
		  {
			  get
			  {
				return CommandAddPartitionToTxn.DefaultInstance;
			  }
		  }

		  public CommandAddPartitionToTxn build()
		  {
			CommandAddPartitionToTxn result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandAddPartitionToTxn buildParsed() throws InvalidProtocolBufferException
		  internal CommandAddPartitionToTxn buildParsed()
		  {
			CommandAddPartitionToTxn result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandAddPartitionToTxn buildPartial()
		  {
			CommandAddPartitionToTxn result = CommandAddPartitionToTxn.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((bitField0_ & 0x00000008) == 0x00000008))
			{
			  partitions_ = new UnmodifiableLazyStringList(partitions_);
			  bitField0_ = (bitField0_ & ~0x00000008);
			}
			result.partitions_ = partitions_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandAddPartitionToTxn other)
		  {
			if (other == CommandAddPartitionToTxn.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (!other.partitions_.Empty)
			{
			  if (partitions_.Empty)
			  {
				partitions_ = other.partitions_;
				bitField0_ = (bitField0_ & ~0x00000008);
			  }
			  else
			  {
				ensurePartitionsIsMutable();
				partitions_.addAll(other.partitions_);
			  }

			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 34:
				{
				  ensurePartitionsIsMutable();
				  partitions_.add(input.readBytes());
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // repeated string partitions = 4;
		  internal LazyStringList partitions_ = LazyStringArrayList.EMPTY;
		  internal void ensurePartitionsIsMutable()
		  {
			if (!((bitField0_ & 0x00000008) == 0x00000008))
			{
			  partitions_ = new LazyStringArrayList(partitions_);
			  bitField0_ |= 0x00000008;
			}
		  }
		  public IList<string> PartitionsList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(partitions_);
			  }
		  }
		  public int PartitionsCount
		  {
			  get
			  {
				return partitions_.size();
			  }
		  }
		  public string getPartitions(int index)
		  {
			return partitions_.get(index);
		  }
		  public Builder setPartitions(int index, string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  ensurePartitionsIsMutable();
			partitions_.set(index, value);

			return this;
		  }
		  public Builder addPartitions(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  ensurePartitionsIsMutable();
			partitions_.add(value);

			return this;
		  }
		  public Builder addAllPartitions(IEnumerable<string> values)
		  {
			ensurePartitionsIsMutable();
			base.addAll(values, partitions_);

			return this;
		  }
		  public Builder clearPartitions()
		  {
			partitions_ = LazyStringArrayList.EMPTY;
			bitField0_ = (bitField0_ & ~0x00000008);

			return this;
		  }
		  internal void addPartitions(ByteString value)
		  {
			ensurePartitionsIsMutable();
			partitions_.add(value);

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandAddPartitionToTxn)
		}

		static CommandAddPartitionToTxn()
		{
		  defaultInstance = new CommandAddPartitionToTxn(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandAddPartitionToTxn)
	  }

	  public interface CommandAddPartitionToTxnResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.ServerError error = 4;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 5;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandAddPartitionToTxnResponse : CommandAddPartitionToTxnResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandAddPartitionToTxnResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandAddPartitionToTxnResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandAddPartitionToTxnResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandAddPartitionToTxnResponse>
		 {
			 protected internal CommandAddPartitionToTxnResponse newObject(Handle handle)
			 {
			   return new CommandAddPartitionToTxnResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandAddPartitionToTxnResponse(bool noInit)
		{
		}

		internal static readonly CommandAddPartitionToTxnResponse defaultInstance;
		public static CommandAddPartitionToTxnResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandAddPartitionToTxnResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.ServerError error = 4;
		public const int ERROR_FIELD_NUMBER = 4;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 5;
		public const int MESSAGE_FIELD_NUMBER = 5;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, error_.Number);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, error_.Number);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandAddPartitionToTxnResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAddPartitionToTxnResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandAddPartitionToTxnResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAddPartitionToTxnResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAddPartitionToTxnResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddPartitionToTxnResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAddPartitionToTxnResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddPartitionToTxnResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandAddPartitionToTxnResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddPartitionToTxnResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddPartitionToTxnResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandAddPartitionToTxnResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandAddPartitionToTxnResponse, Builder>, CommandAddPartitionToTxnResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandAddPartitionToTxnResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandAddPartitionToTxnResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandAddPartitionToTxnResponse.DefaultInstance;
			  }
		  }

		  public CommandAddPartitionToTxnResponse build()
		  {
			CommandAddPartitionToTxnResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandAddPartitionToTxnResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandAddPartitionToTxnResponse buildParsed()
		  {
			CommandAddPartitionToTxnResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandAddPartitionToTxnResponse buildPartial()
		  {
			CommandAddPartitionToTxnResponse result = CommandAddPartitionToTxnResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandAddPartitionToTxnResponse other)
		  {
			if (other == CommandAddPartitionToTxnResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					error_ = value;
				  }
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 4;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 5;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandAddPartitionToTxnResponse)
		}

		static CommandAddPartitionToTxnResponse()
		{
		  defaultInstance = new CommandAddPartitionToTxnResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandAddPartitionToTxnResponse)
	  }

	  public interface SubscriptionOrBuilder : MessageLiteOrBuilder
	  {

		// required string topic = 1;
		bool hasTopic();
		string Topic {get;}

		// required string subscription = 2;
		bool hasSubscription();
		string Subscription {get;}
	  }
	  public sealed class Subscription : SubscriptionOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use Subscription.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal Subscription(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<Subscription> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Subscription>
		 {
			 protected internal Subscription newObject(Handle handle)
			 {
			   return new Subscription(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal Subscription(bool noInit)
		{
		}

		internal static readonly Subscription defaultInstance;
		public static Subscription DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public Subscription DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required string topic = 1;
		public const int TOPIC_FIELD_NUMBER = 1;
		internal object topic_;
		public bool hasTopic()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public string Topic
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  topic_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TopicBytes
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				topic_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// required string subscription = 2;
		public const int SUBSCRIPTION_FIELD_NUMBER = 2;
		internal object subscription_;
		public bool hasSubscription()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public string getSubscription()
		{
		  object @ref = subscription_;
		  if (@ref is string)
		  {
			return (string) @ref;
		  }
		  else
		  {
			ByteString bs = (ByteString) @ref;
			string s = bs.ToStringUtf8();
			if (Internal.isValidUtf8(bs))
			{
			  subscription_ = s;
			}
			return s;
		  }
		}
		internal ByteString SubscriptionBytes
		{
			get
			{
			  object @ref = subscription_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				subscription_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  topic_ = "";
		  subscription_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasTopic())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (!hasSubscription())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteBytes(1, TopicBytes);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteBytes(2, SubscriptionBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeBytesSize(1, TopicBytes);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeBytesSize(2, SubscriptionBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static Subscription parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static Subscription parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static Subscription parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static Subscription parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseFrom(java.io.InputStream input) throws java.io.IOException
		public static Subscription parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static Subscription parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static Subscription parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static Subscription parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseFrom(CodedInputStream input) throws java.io.IOException
		public static Subscription parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static Subscription parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static Subscription parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(Subscription prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<Subscription, Builder>, SubscriptionOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using Subscription.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			topic_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			subscription_ = "";
			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public Subscription DefaultInstanceForType
		  {
			  get
			  {
				return Subscription.DefaultInstance;
			  }
		  }

		  public Subscription build()
		  {
			Subscription result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private Subscription buildParsed() throws InvalidProtocolBufferException
		  internal Subscription buildParsed()
		  {
			Subscription result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public Subscription buildPartial()
		  {
			Subscription result = Subscription.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.topic_ = topic_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.subscription_ = subscription_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(Subscription other)
		  {
			if (other == Subscription.DefaultInstance)
			{
				return this;
			}
			if (other.hasTopic())
			{
			  setTopic(other.Topic);
			}
			if (other.hasSubscription())
			{
			  setSubscription(other.getSubscription());
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasTopic())
				{
    
				  return false;
				}
				if (!hasSubscription())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 10:
				{
				  bitField0_ |= 0x00000001;
				  topic_ = input.readBytes();
				  break;
				}
				case 18:
				{
				  bitField0_ |= 0x00000002;
				  subscription_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required string topic = 1;
		  internal object topic_ = "";
		  public bool hasTopic()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public string getTopic()
		  {
			object @ref = topic_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  topic_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setTopic(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000001;
			topic_ = value;

			return this;
		  }
		  public Builder clearTopic()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			topic_ = DefaultInstance.Topic;

			return this;
		  }
		  internal void setTopic(ByteString value)
		  {
			bitField0_ |= 0x00000001;
			topic_ = value;

		  }

		  // required string subscription = 2;
		  internal object subscription_ = "";
		  public bool hasSubscription()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public string getSubscription()
		  {
			object @ref = subscription_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  subscription_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setSubscription(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000002;
			subscription_ = value;

			return this;
		  }
		  public Builder clearSubscription()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			subscription_ = DefaultInstance.getSubscription();

			return this;
		  }
		  internal void setSubscription(ByteString value)
		  {
			bitField0_ |= 0x00000002;
			subscription_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.Subscription)
		}

		static Subscription()
		{
		  defaultInstance = new Subscription(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.Subscription)
	  }

	  public interface CommandAddSubscriptionToTxnOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// repeated .pulsar.proto.Subscription subscription = 4;
		IList<Subscription> SubscriptionList {get;}
		Subscription getSubscription(int index);
		int SubscriptionCount {get;}
	  }
	  public sealed class CommandAddSubscriptionToTxn : CommandAddSubscriptionToTxnOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandAddSubscriptionToTxn.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandAddSubscriptionToTxn(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandAddSubscriptionToTxn> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandAddSubscriptionToTxn>
		 {
			 protected internal CommandAddSubscriptionToTxn newObject(Handle handle)
			 {
			   return new CommandAddSubscriptionToTxn(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandAddSubscriptionToTxn(bool noInit)
		{
		}

		internal static readonly CommandAddSubscriptionToTxn defaultInstance;
		public static CommandAddSubscriptionToTxn DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandAddSubscriptionToTxn DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// repeated .pulsar.proto.Subscription subscription = 4;
		public const int SUBSCRIPTION_FIELD_NUMBER = 4;
		internal IList<Subscription> subscription_;
		public IList<Subscription> SubscriptionList
		{
			get
			{
			  return subscription_;
			}
		}
//JAVA TO C# CONVERTER WARNING: Java wildcard generics have no direct equivalent in .NET:
//ORIGINAL LINE: public java.util.List<? extends SubscriptionOrBuilder> getSubscriptionOrBuilderList()
		public IList<SubscriptionOrBuilder> SubscriptionOrBuilderList
		{
			get
			{
			  return subscription_;
			}
		}
		public int SubscriptionCount
		{
			get
			{
			  return subscription_.Count;
			}
		}
		public Subscription getSubscription(int index)
		{
		  return subscription_[index];
		}
		public SubscriptionOrBuilder getSubscriptionOrBuilder(int index)
		{
		  return subscription_[index];
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  subscription_ = java.util.Collections.emptyList();
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  for (int i = 0; i < SubscriptionCount; i++)
			  {
				if (!getSubscription(i).Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  for (int i = 0; i < subscription_.Count; i++)
		  {
			output.WriteMessage(4, subscription_[i]);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  for (int i = 0; i < subscription_.Count; i++)
			  {
				size += CodedOutputStream.computeMessageSize(4, subscription_[i]);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandAddSubscriptionToTxn parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAddSubscriptionToTxn parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandAddSubscriptionToTxn parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAddSubscriptionToTxn parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAddSubscriptionToTxn parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddSubscriptionToTxn parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAddSubscriptionToTxn parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddSubscriptionToTxn parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandAddSubscriptionToTxn parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxn parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddSubscriptionToTxn parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandAddSubscriptionToTxn prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandAddSubscriptionToTxn, Builder>, CommandAddSubscriptionToTxnOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandAddSubscriptionToTxn.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			subscription_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandAddSubscriptionToTxn DefaultInstanceForType
		  {
			  get
			  {
				return CommandAddSubscriptionToTxn.DefaultInstance;
			  }
		  }

		  public CommandAddSubscriptionToTxn build()
		  {
			CommandAddSubscriptionToTxn result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandAddSubscriptionToTxn buildParsed() throws InvalidProtocolBufferException
		  internal CommandAddSubscriptionToTxn buildParsed()
		  {
			CommandAddSubscriptionToTxn result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandAddSubscriptionToTxn buildPartial()
		  {
			CommandAddSubscriptionToTxn result = CommandAddSubscriptionToTxn.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((bitField0_ & 0x00000008) == 0x00000008))
			{
			  subscription_ = java.util.Collections.unmodifiableList(subscription_);
			  bitField0_ = (bitField0_ & ~0x00000008);
			}
			result.subscription_ = subscription_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandAddSubscriptionToTxn other)
		  {
			if (other == CommandAddSubscriptionToTxn.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.subscription_.Count > 0)
			{
			  if (subscription_.Count == 0)
			  {
				subscription_ = other.subscription_;
				bitField0_ = (bitField0_ & ~0x00000008);
			  }
			  else
			  {
				ensureSubscriptionIsMutable();
				((List<Subscription>)subscription_).AddRange(other.subscription_);
			  }

			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				for (int i = 0; i < SubscriptionCount; i++)
				{
				  if (!getSubscription(i).Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 34:
				{
				  Subscription.Builder subBuilder = Subscription.newBuilder();
				  input.readMessage(subBuilder, extensionRegistry);
				  addSubscription(subBuilder.buildPartial());
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // repeated .pulsar.proto.Subscription subscription = 4;
		  internal IList<Subscription> subscription_ = java.util.Collections.emptyList();
		  internal void ensureSubscriptionIsMutable()
		  {
			if (!((bitField0_ & 0x00000008) == 0x00000008))
			{
			  subscription_ = new List<Subscription>(subscription_);
			  bitField0_ |= 0x00000008;
			}
		  }

		  public IList<Subscription> SubscriptionList
		  {
			  get
			  {
				return java.util.Collections.unmodifiableList(subscription_);
			  }
		  }
		  public int SubscriptionCount
		  {
			  get
			  {
				return subscription_.Count;
			  }
		  }
		  public Subscription getSubscription(int index)
		  {
			return subscription_[index];
		  }
		  public Builder setSubscription(int index, Subscription value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureSubscriptionIsMutable();
			subscription_[index] = value;

			return this;
		  }
		  public Builder setSubscription(int index, Subscription.Builder builderForValue)
		  {
			ensureSubscriptionIsMutable();
			subscription_[index] = builderForValue.build();

			return this;
		  }
		  public Builder addSubscription(Subscription value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureSubscriptionIsMutable();
			subscription_.Add(value);

			return this;
		  }
		  public Builder addSubscription(int index, Subscription value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ensureSubscriptionIsMutable();
			subscription_.Insert(index, value);

			return this;
		  }
		  public Builder addSubscription(Subscription.Builder builderForValue)
		  {
			ensureSubscriptionIsMutable();
			subscription_.Add(builderForValue.build());

			return this;
		  }
		  public Builder addSubscription(int index, Subscription.Builder builderForValue)
		  {
			ensureSubscriptionIsMutable();
			subscription_.Insert(index, builderForValue.build());

			return this;
		  }
		  public Builder addAllSubscription<T1>(IEnumerable<T1> values) where T1 : Subscription
		  {
			ensureSubscriptionIsMutable();
			base.addAll(values, subscription_);

			return this;
		  }
		  public Builder clearSubscription()
		  {
			subscription_ = java.util.Collections.emptyList();
			bitField0_ = (bitField0_ & ~0x00000008);

			return this;
		  }
		  public Builder removeSubscription(int index)
		  {
			ensureSubscriptionIsMutable();
			subscription_.RemoveAt(index);

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandAddSubscriptionToTxn)
		}

		static CommandAddSubscriptionToTxn()
		{
		  defaultInstance = new CommandAddSubscriptionToTxn(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandAddSubscriptionToTxn)
	  }

	  public interface CommandAddSubscriptionToTxnResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.ServerError error = 4;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 5;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandAddSubscriptionToTxnResponse : CommandAddSubscriptionToTxnResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandAddSubscriptionToTxnResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandAddSubscriptionToTxnResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandAddSubscriptionToTxnResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandAddSubscriptionToTxnResponse>
		 {
			 protected internal CommandAddSubscriptionToTxnResponse newObject(Handle handle)
			 {
			   return new CommandAddSubscriptionToTxnResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandAddSubscriptionToTxnResponse(bool noInit)
		{
		}

		internal static readonly CommandAddSubscriptionToTxnResponse defaultInstance;
		public static CommandAddSubscriptionToTxnResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandAddSubscriptionToTxnResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.ServerError error = 4;
		public const int ERROR_FIELD_NUMBER = 4;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 5;
		public const int MESSAGE_FIELD_NUMBER = 5;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, error_.Number);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, error_.Number);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandAddSubscriptionToTxnResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAddSubscriptionToTxnResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandAddSubscriptionToTxnResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandAddSubscriptionToTxnResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAddSubscriptionToTxnResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddSubscriptionToTxnResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandAddSubscriptionToTxnResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddSubscriptionToTxnResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandAddSubscriptionToTxnResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandAddSubscriptionToTxnResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandAddSubscriptionToTxnResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandAddSubscriptionToTxnResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandAddSubscriptionToTxnResponse, Builder>, CommandAddSubscriptionToTxnResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandAddSubscriptionToTxnResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandAddSubscriptionToTxnResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandAddSubscriptionToTxnResponse.DefaultInstance;
			  }
		  }

		  public CommandAddSubscriptionToTxnResponse build()
		  {
			CommandAddSubscriptionToTxnResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandAddSubscriptionToTxnResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandAddSubscriptionToTxnResponse buildParsed()
		  {
			CommandAddSubscriptionToTxnResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandAddSubscriptionToTxnResponse buildPartial()
		  {
			CommandAddSubscriptionToTxnResponse result = CommandAddSubscriptionToTxnResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandAddSubscriptionToTxnResponse other)
		  {
			if (other == CommandAddSubscriptionToTxnResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					error_ = value;
				  }
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 4;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 5;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandAddSubscriptionToTxnResponse)
		}

		static CommandAddSubscriptionToTxnResponse()
		{
		  defaultInstance = new CommandAddSubscriptionToTxnResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandAddSubscriptionToTxnResponse)
	  }

	  public interface CommandEndTxnOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.TxnAction txn_action = 4;
		bool hasTxnAction();
		TxnAction TxnAction {get;}
	  }
	  public sealed class CommandEndTxn : CommandEndTxnOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandEndTxn.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandEndTxn(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandEndTxn> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandEndTxn>
		 {
			 protected internal CommandEndTxn newObject(Handle handle)
			 {
			   return new CommandEndTxn(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandEndTxn(bool noInit)
		{
		}

		internal static readonly CommandEndTxn defaultInstance;
		public static CommandEndTxn DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandEndTxn DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.TxnAction txn_action = 4;
		public const int TXN_ACTION_FIELD_NUMBER = 4;
		internal TxnAction txnAction_;
		public bool hasTxnAction()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public TxnAction TxnAction
		{
			get
			{
			  return txnAction_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  txnAction_ = TxnAction.COMMIT;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, txnAction_.Number);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, txnAction_.Number);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandEndTxn parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxn parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandEndTxn parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxn parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxn parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxn parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxn parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxn parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandEndTxn parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxn parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxn parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandEndTxn prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandEndTxn, Builder>, CommandEndTxnOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandEndTxn.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			txnAction_ = TxnAction.COMMIT;
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandEndTxn DefaultInstanceForType
		  {
			  get
			  {
				return CommandEndTxn.DefaultInstance;
			  }
		  }

		  public CommandEndTxn build()
		  {
			CommandEndTxn result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandEndTxn buildParsed() throws InvalidProtocolBufferException
		  internal CommandEndTxn buildParsed()
		  {
			CommandEndTxn result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandEndTxn buildPartial()
		  {
			CommandEndTxn result = CommandEndTxn.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.txnAction_ = txnAction_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandEndTxn other)
		  {
			if (other == CommandEndTxn.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasTxnAction())
			{
			  TxnAction = other.TxnAction;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  TxnAction value = TxnAction.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					txnAction_ = value;
				  }
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.TxnAction txn_action = 4;
		  internal TxnAction txnAction_ = TxnAction.COMMIT;
		  public bool hasTxnAction()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public TxnAction TxnAction
		  {
			  get
			  {
				return txnAction_;
			  }
		  }
		  public Builder setTxnAction(TxnAction value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			txnAction_ = value;

			return this;
		  }
		  public Builder clearTxnAction()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			txnAction_ = TxnAction.COMMIT;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandEndTxn)
		}

		static CommandEndTxn()
		{
		  defaultInstance = new CommandEndTxn(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandEndTxn)
	  }

	  public interface CommandEndTxnResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.ServerError error = 4;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 5;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandEndTxnResponse : CommandEndTxnResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandEndTxnResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandEndTxnResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandEndTxnResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandEndTxnResponse>
		 {
			 protected internal CommandEndTxnResponse newObject(Handle handle)
			 {
			   return new CommandEndTxnResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandEndTxnResponse(bool noInit)
		{
		}

		internal static readonly CommandEndTxnResponse defaultInstance;
		public static CommandEndTxnResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandEndTxnResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.ServerError error = 4;
		public const int ERROR_FIELD_NUMBER = 4;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 5;
		public const int MESSAGE_FIELD_NUMBER = 5;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, error_.Number);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, error_.Number);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandEndTxnResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandEndTxnResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandEndTxnResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandEndTxnResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandEndTxnResponse, Builder>, CommandEndTxnResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandEndTxnResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandEndTxnResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandEndTxnResponse.DefaultInstance;
			  }
		  }

		  public CommandEndTxnResponse build()
		  {
			CommandEndTxnResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandEndTxnResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandEndTxnResponse buildParsed()
		  {
			CommandEndTxnResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandEndTxnResponse buildPartial()
		  {
			CommandEndTxnResponse result = CommandEndTxnResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandEndTxnResponse other)
		  {
			if (other == CommandEndTxnResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					error_ = value;
				  }
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 4;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 5;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandEndTxnResponse)
		}

		static CommandEndTxnResponse()
		{
		  defaultInstance = new CommandEndTxnResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandEndTxnResponse)
	  }

	  public interface CommandEndTxnOnPartitionOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional string topic = 4;
		bool hasTopic();
		string Topic {get;}

		// optional .pulsar.proto.TxnAction txn_action = 5;
		bool hasTxnAction();
		TxnAction TxnAction {get;}
	  }
	  public sealed class CommandEndTxnOnPartition : CommandEndTxnOnPartitionOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandEndTxnOnPartition.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandEndTxnOnPartition(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandEndTxnOnPartition> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandEndTxnOnPartition>
		 {
			 protected internal CommandEndTxnOnPartition newObject(Handle handle)
			 {
			   return new CommandEndTxnOnPartition(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandEndTxnOnPartition(bool noInit)
		{
		}

		internal static readonly CommandEndTxnOnPartition defaultInstance;
		public static CommandEndTxnOnPartition DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandEndTxnOnPartition DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional string topic = 4;
		public const int TOPIC_FIELD_NUMBER = 4;
		internal object topic_;
		public bool hasTopic()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public string Topic
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  topic_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString TopicBytes
		{
			get
			{
			  object @ref = topic_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				topic_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		// optional .pulsar.proto.TxnAction txn_action = 5;
		public const int TXN_ACTION_FIELD_NUMBER = 5;
		internal TxnAction txnAction_;
		public bool hasTxnAction()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public TxnAction TxnAction
		{
			get
			{
			  return txnAction_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  topic_ = "";
		  txnAction_ = TxnAction.COMMIT;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteBytes(4, TopicBytes);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.writeEnum(5, txnAction_.Number);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeBytesSize(4, TopicBytes);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeEnumSize(5, txnAction_.Number);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandEndTxnOnPartition parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnOnPartition parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandEndTxnOnPartition parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnOnPartition parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnOnPartition parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnPartition parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnOnPartition parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnPartition parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandEndTxnOnPartition parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartition parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnPartition parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandEndTxnOnPartition prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandEndTxnOnPartition, Builder>, CommandEndTxnOnPartitionOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandEndTxnOnPartition.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			topic_ = "";
			bitField0_ = (bitField0_ & ~0x00000008);
			txnAction_ = TxnAction.COMMIT;
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandEndTxnOnPartition DefaultInstanceForType
		  {
			  get
			  {
				return CommandEndTxnOnPartition.DefaultInstance;
			  }
		  }

		  public CommandEndTxnOnPartition build()
		  {
			CommandEndTxnOnPartition result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandEndTxnOnPartition buildParsed() throws InvalidProtocolBufferException
		  internal CommandEndTxnOnPartition buildParsed()
		  {
			CommandEndTxnOnPartition result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandEndTxnOnPartition buildPartial()
		  {
			CommandEndTxnOnPartition result = CommandEndTxnOnPartition.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.topic_ = topic_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.txnAction_ = txnAction_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandEndTxnOnPartition other)
		  {
			if (other == CommandEndTxnOnPartition.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasTopic())
			{
			  setTopic(other.Topic);
			}
			if (other.hasTxnAction())
			{
			  TxnAction = other.TxnAction;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 34:
				{
				  bitField0_ |= 0x00000008;
				  topic_ = input.readBytes();
				  break;
				}
				case 40:
				{
				  int rawValue = input.readEnum();
				  TxnAction value = TxnAction.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000010;
					txnAction_ = value;
				  }
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional string topic = 4;
		  internal object topic_ = "";
		  public bool hasTopic()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public string getTopic()
		  {
			object @ref = topic_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  topic_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setTopic(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000008;
			topic_ = value;

			return this;
		  }
		  public Builder clearTopic()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			topic_ = DefaultInstance.Topic;

			return this;
		  }
		  internal void setTopic(ByteString value)
		  {
			bitField0_ |= 0x00000008;
			topic_ = value;

		  }

		  // optional .pulsar.proto.TxnAction txn_action = 5;
		  internal TxnAction txnAction_ = TxnAction.COMMIT;
		  public bool hasTxnAction()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public TxnAction TxnAction
		  {
			  get
			  {
				return txnAction_;
			  }
		  }
		  public Builder setTxnAction(TxnAction value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000010;
			txnAction_ = value;

			return this;
		  }
		  public Builder clearTxnAction()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			txnAction_ = TxnAction.COMMIT;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandEndTxnOnPartition)
		}

		static CommandEndTxnOnPartition()
		{
		  defaultInstance = new CommandEndTxnOnPartition(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandEndTxnOnPartition)
	  }

	  public interface CommandEndTxnOnPartitionResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.ServerError error = 4;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 5;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandEndTxnOnPartitionResponse : CommandEndTxnOnPartitionResponseOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandEndTxnOnPartitionResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandEndTxnOnPartitionResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandEndTxnOnPartitionResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandEndTxnOnPartitionResponse>
		 {
			 protected internal CommandEndTxnOnPartitionResponse newObject(Handle handle)
			 {
			   return new CommandEndTxnOnPartitionResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandEndTxnOnPartitionResponse(bool noInit)
		{
		}

		internal static readonly CommandEndTxnOnPartitionResponse defaultInstance;
		public static CommandEndTxnOnPartitionResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandEndTxnOnPartitionResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.ServerError error = 4;
		public const int ERROR_FIELD_NUMBER = 4;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 5;
		public const int MESSAGE_FIELD_NUMBER = 5;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, error_.Number);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, error_.Number);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandEndTxnOnPartitionResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnOnPartitionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandEndTxnOnPartitionResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnOnPartitionResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnOnPartitionResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnPartitionResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnOnPartitionResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnPartitionResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandEndTxnOnPartitionResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnPartitionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnPartitionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandEndTxnOnPartitionResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandEndTxnOnPartitionResponse, Builder>, CommandEndTxnOnPartitionResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandEndTxnOnPartitionResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandEndTxnOnPartitionResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandEndTxnOnPartitionResponse.DefaultInstance;
			  }
		  }

		  public CommandEndTxnOnPartitionResponse build()
		  {
			CommandEndTxnOnPartitionResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandEndTxnOnPartitionResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandEndTxnOnPartitionResponse buildParsed()
		  {
			CommandEndTxnOnPartitionResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandEndTxnOnPartitionResponse buildPartial()
		  {
			CommandEndTxnOnPartitionResponse result = CommandEndTxnOnPartitionResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandEndTxnOnPartitionResponse other)
		  {
			if (other == CommandEndTxnOnPartitionResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					error_ = value;
				  }
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 4;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 5;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandEndTxnOnPartitionResponse)
		}

		static CommandEndTxnOnPartitionResponse()
		{
		  defaultInstance = new CommandEndTxnOnPartitionResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandEndTxnOnPartitionResponse)
	  }

	  public interface CommandEndTxnOnSubscriptionOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.Subscription subscription = 4;
		bool hasSubscription();
		Subscription Subscription {get;}

		// optional .pulsar.proto.TxnAction txn_action = 5;
		bool hasTxnAction();
		TxnAction TxnAction {get;}
	  }
	  public sealed class CommandEndTxnOnSubscription : CommandEndTxnOnSubscriptionOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandEndTxnOnSubscription.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandEndTxnOnSubscription(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandEndTxnOnSubscription> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandEndTxnOnSubscription>
		 {
			 protected internal CommandEndTxnOnSubscription newObject(Handle handle)
			 {
			   return new CommandEndTxnOnSubscription(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandEndTxnOnSubscription(bool noInit)
		{
		}

		internal static readonly CommandEndTxnOnSubscription defaultInstance;
		public static CommandEndTxnOnSubscription DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandEndTxnOnSubscription DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.Subscription subscription = 4;
		public const int SUBSCRIPTION_FIELD_NUMBER = 4;
		internal Subscription subscription_;
		public bool hasSubscription()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public Subscription Subscription
		{
			get
			{
			  return subscription_;
			}
		}

		// optional .pulsar.proto.TxnAction txn_action = 5;
		public const int TXN_ACTION_FIELD_NUMBER = 5;
		internal TxnAction txnAction_;
		public bool hasTxnAction()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public TxnAction TxnAction
		{
			get
			{
			  return txnAction_;
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  subscription_ = Subscription.DefaultInstance;
		  txnAction_ = TxnAction.COMMIT;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (hasSubscription())
			  {
				if (!Subscription.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteMessage(4, subscription_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.writeEnum(5, txnAction_.Number);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeMessageSize(4, subscription_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeEnumSize(5, txnAction_.Number);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandEndTxnOnSubscription parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnOnSubscription parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandEndTxnOnSubscription parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnOnSubscription parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnOnSubscription parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnSubscription parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnOnSubscription parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnSubscription parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandEndTxnOnSubscription parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscription parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnSubscription parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandEndTxnOnSubscription prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandEndTxnOnSubscription, Builder>, CommandEndTxnOnSubscriptionOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandEndTxnOnSubscription.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			subscription_ = Subscription.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000008);
			txnAction_ = TxnAction.COMMIT;
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandEndTxnOnSubscription DefaultInstanceForType
		  {
			  get
			  {
				return CommandEndTxnOnSubscription.DefaultInstance;
			  }
		  }

		  public CommandEndTxnOnSubscription build()
		  {
			CommandEndTxnOnSubscription result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandEndTxnOnSubscription buildParsed() throws InvalidProtocolBufferException
		  internal CommandEndTxnOnSubscription buildParsed()
		  {
			CommandEndTxnOnSubscription result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandEndTxnOnSubscription buildPartial()
		  {
			CommandEndTxnOnSubscription result = CommandEndTxnOnSubscription.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.subscription_ = subscription_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.txnAction_ = txnAction_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandEndTxnOnSubscription other)
		  {
			if (other == CommandEndTxnOnSubscription.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasSubscription())
			{
			  mergeSubscription(other.Subscription);
			}
			if (other.hasTxnAction())
			{
			  TxnAction = other.TxnAction;
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				if (hasSubscription())
				{
				  if (!getSubscription().Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 34:
				{
				  Subscription.Builder subBuilder = Subscription.newBuilder();
				  if (hasSubscription())
				  {
					subBuilder.mergeFrom(getSubscription());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSubscription(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 40:
				{
				  int rawValue = input.readEnum();
				  TxnAction value = TxnAction.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000010;
					txnAction_ = value;
				  }
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.Subscription subscription = 4;
		  internal Subscription subscription_ = Subscription.DefaultInstance;
		  public bool hasSubscription()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public Subscription getSubscription()
		  {
			return subscription_;
		  }
		  public Builder setSubscription(Subscription value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			subscription_ = value;

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder setSubscription(Subscription.Builder builderForValue)
		  {
			subscription_ = builderForValue.build();

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder mergeSubscription(Subscription value)
		  {
			if (((bitField0_ & 0x00000008) == 0x00000008) && subscription_ != Subscription.DefaultInstance)
			{
			  subscription_ = Subscription.newBuilder(subscription_).mergeFrom(value).buildPartial();
			}
			else
			{
			  subscription_ = value;
			}

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder clearSubscription()
		  {
			subscription_ = Subscription.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  // optional .pulsar.proto.TxnAction txn_action = 5;
		  internal TxnAction txnAction_ = TxnAction.COMMIT;
		  public bool hasTxnAction()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public TxnAction TxnAction
		  {
			  get
			  {
				return txnAction_;
			  }
		  }
		  public Builder setTxnAction(TxnAction value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000010;
			txnAction_ = value;

			return this;
		  }
		  public Builder clearTxnAction()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			txnAction_ = TxnAction.COMMIT;

			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandEndTxnOnSubscription)
		}

		static CommandEndTxnOnSubscription()
		{
		  defaultInstance = new CommandEndTxnOnSubscription(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandEndTxnOnSubscription)
	  }

	  public interface CommandEndTxnOnSubscriptionResponseOrBuilder : MessageLiteOrBuilder
	  {

		// required uint64 request_id = 1;
		bool hasRequestId();
		long RequestId {get;}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		bool hasTxnidLeastBits();
		long TxnidLeastBits {get;}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		bool hasTxnidMostBits();
		long TxnidMostBits {get;}

		// optional .pulsar.proto.ServerError error = 4;
		bool hasError();
		ServerError Error {get;}

		// optional string message = 5;
		bool hasMessage();
		string Message {get;}
	  }
	  public sealed class CommandEndTxnOnSubscriptionResponse : ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use CommandEndTxnOnSubscriptionResponse.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal CommandEndTxnOnSubscriptionResponse(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<CommandEndTxnOnSubscriptionResponse> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<CommandEndTxnOnSubscriptionResponse>
		 {
			 protected internal CommandEndTxnOnSubscriptionResponse newObject(Handle handle)
			 {
			   return new CommandEndTxnOnSubscriptionResponse(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal CommandEndTxnOnSubscriptionResponse(bool noInit)
		{
		}

		internal static readonly CommandEndTxnOnSubscriptionResponse defaultInstance;
		public static CommandEndTxnOnSubscriptionResponse DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public CommandEndTxnOnSubscriptionResponse DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		internal int bitField0_;
		// required uint64 request_id = 1;
		public const int REQUEST_ID_FIELD_NUMBER = 1;
		internal long requestId_;
		public bool hasRequestId()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public long RequestId
		{
			get
			{
			  return requestId_;
			}
		}

		// optional uint64 txnid_least_bits = 2 [default = 0];
		public const int TXNID_LEAST_BITS_FIELD_NUMBER = 2;
		internal long txnidLeastBits_;
		public bool hasTxnidLeastBits()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public long TxnidLeastBits
		{
			get
			{
			  return txnidLeastBits_;
			}
		}

		// optional uint64 txnid_most_bits = 3 [default = 0];
		public const int TXNID_MOST_BITS_FIELD_NUMBER = 3;
		internal long txnidMostBits_;
		public bool hasTxnidMostBits()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public long TxnidMostBits
		{
			get
			{
			  return txnidMostBits_;
			}
		}

		// optional .pulsar.proto.ServerError error = 4;
		public const int ERROR_FIELD_NUMBER = 4;
		internal ServerError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public ServerError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional string message = 5;
		public const int MESSAGE_FIELD_NUMBER = 5;
		internal object message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public string Message
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				return (string) @ref;
			  }
			  else
			  {
				ByteString bs = (ByteString) @ref;
				string s = bs.ToStringUtf8();
				if (Internal.isValidUtf8(bs))
				{
				  message_ = s;
				}
				return s;
			  }
			}
		}
		internal ByteString MessageBytes
		{
			get
			{
			  object @ref = message_;
			  if (@ref is string)
			  {
				ByteString b = ByteString.CopyFromUtf8((string) @ref);
				message_ = b;
				return b;
			  }
			  else
			  {
				return (ByteString) @ref;
			  }
			}
		}

		internal void initFields()
		{
		  requestId_ = 0L;
		  txnidLeastBits_ = 0L;
		  txnidMostBits_ = 0L;
		  error_ = ServerError.UnknownError;
		  message_ = "";
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasRequestId())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.WriteUInt64(1, requestId_);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteUInt64(2, txnidLeastBits_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteUInt64(3, txnidMostBits_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.writeEnum(4, error_.Number);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteBytes(5, MessageBytes);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.ComputeUInt64Size(requestId_);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidLeastBits_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.ComputeUInt64Size(txnidMostBits_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeEnumSize(4, error_.Number);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeBytesSize(5, MessageBytes);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static CommandEndTxnOnSubscriptionResponse parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnOnSubscriptionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static CommandEndTxnOnSubscriptionResponse parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static CommandEndTxnOnSubscriptionResponse parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnOnSubscriptionResponse parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnSubscriptionResponse parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static CommandEndTxnOnSubscriptionResponse parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnSubscriptionResponse parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseFrom(CodedInputStream input) throws java.io.IOException
		public static CommandEndTxnOnSubscriptionResponse parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static CommandEndTxnOnSubscriptionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static CommandEndTxnOnSubscriptionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(CommandEndTxnOnSubscriptionResponse prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<CommandEndTxnOnSubscriptionResponse, Builder>, CommandEndTxnOnSubscriptionResponseOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using CommandEndTxnOnSubscriptionResponse.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass2();

		  private class RecyclerAnonymousInnerClass2 : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			requestId_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000001);
			txnidLeastBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidMostBits_ = 0L;
			bitField0_ = (bitField0_ & ~0x00000004);
			error_ = ServerError.UnknownError;
			bitField0_ = (bitField0_ & ~0x00000008);
			message_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public CommandEndTxnOnSubscriptionResponse DefaultInstanceForType
		  {
			  get
			  {
				return CommandEndTxnOnSubscriptionResponse.DefaultInstance;
			  }
		  }

		  public CommandEndTxnOnSubscriptionResponse build()
		  {
			CommandEndTxnOnSubscriptionResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private CommandEndTxnOnSubscriptionResponse buildParsed() throws InvalidProtocolBufferException
		  internal CommandEndTxnOnSubscriptionResponse buildParsed()
		  {
			CommandEndTxnOnSubscriptionResponse result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public CommandEndTxnOnSubscriptionResponse buildPartial()
		  {
			CommandEndTxnOnSubscriptionResponse result = CommandEndTxnOnSubscriptionResponse.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.requestId_ = requestId_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.txnidLeastBits_ = txnidLeastBits_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.txnidMostBits_ = txnidMostBits_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.message_ = message_;
			result.bitField0_ = to_bitField0_;
			return result;
		  }

		  public Builder mergeFrom(CommandEndTxnOnSubscriptionResponse other)
		  {
			if (other == CommandEndTxnOnSubscriptionResponse.DefaultInstance)
			{
				return this;
			}
			if (other.hasRequestId())
			{
			  RequestId = other.RequestId;
			}
			if (other.hasTxnidLeastBits())
			{
			  TxnidLeastBits = other.TxnidLeastBits;
			}
			if (other.hasTxnidMostBits())
			{
			  TxnidMostBits = other.TxnidMostBits;
			}
			if (other.hasError())
			{
			  Error = other.Error;
			}
			if (other.hasMessage())
			{
			  setMessage(other.Message);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasRequestId())
				{
    
				  return false;
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  bitField0_ |= 0x00000001;
				  requestId_ = input.readUInt64();
				  break;
				}
				case 16:
				{
				  bitField0_ |= 0x00000002;
				  txnidLeastBits_ = input.readUInt64();
				  break;
				}
				case 24:
				{
				  bitField0_ |= 0x00000004;
				  txnidMostBits_ = input.readUInt64();
				  break;
				}
				case 32:
				{
				  int rawValue = input.readEnum();
				  ServerError value = ServerError.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000008;
					error_ = value;
				  }
				  break;
				}
				case 42:
				{
				  bitField0_ |= 0x00000010;
				  message_ = input.readBytes();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;

		  // required uint64 request_id = 1;
		  internal long requestId_;
		  public bool hasRequestId()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public long RequestId
		  {
			  get
			  {
				return requestId_;
			  }
		  }
		  public Builder setRequestId(long value)
		  {
			bitField0_ |= 0x00000001;
			requestId_ = value;

			return this;
		  }
		  public Builder clearRequestId()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			requestId_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_least_bits = 2 [default = 0];
		  internal long txnidLeastBits_;
		  public bool hasTxnidLeastBits()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public long TxnidLeastBits
		  {
			  get
			  {
				return txnidLeastBits_;
			  }
		  }
		  public Builder setTxnidLeastBits(long value)
		  {
			bitField0_ |= 0x00000002;
			txnidLeastBits_ = value;

			return this;
		  }
		  public Builder clearTxnidLeastBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000002);
			txnidLeastBits_ = 0L;

			return this;
		  }

		  // optional uint64 txnid_most_bits = 3 [default = 0];
		  internal long txnidMostBits_;
		  public bool hasTxnidMostBits()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public long TxnidMostBits
		  {
			  get
			  {
				return txnidMostBits_;
			  }
		  }
		  public Builder setTxnidMostBits(long value)
		  {
			bitField0_ |= 0x00000004;
			txnidMostBits_ = value;

			return this;
		  }
		  public Builder clearTxnidMostBits()
		  {
			bitField0_ = (bitField0_ & ~0x00000004);
			txnidMostBits_ = 0L;

			return this;
		  }

		  // optional .pulsar.proto.ServerError error = 4;
		  internal ServerError error_ = ServerError.UnknownError;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public ServerError Error
		  {
			  get
			  {
				return error_;
			  }
		  }
		  public Builder setError(ServerError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000008;
			error_ = value;

			return this;
		  }
		  public Builder clearError()
		  {
			bitField0_ = (bitField0_ & ~0x00000008);
			error_ = ServerError.UnknownError;

			return this;
		  }

		  // optional string message = 5;
		  internal object message_ = "";
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public string getMessage()
		  {
			object @ref = message_;
			if (!(@ref is string))
			{
			  string s = ((ByteString) @ref).ToStringUtf8();
			  message_ = s;
			  return s;
			}
			else
			{
			  return (string) @ref;
			}
		  }
		  public Builder setMessage(string value)
		  {
			if (string.ReferenceEquals(value, null))
			{
		throw new System.NullReferenceException();
			}
	  bitField0_ |= 0x00000010;
			message_ = value;

			return this;
		  }
		  public Builder clearMessage()
		  {
			bitField0_ = (bitField0_ & ~0x00000010);
			message_ = DefaultInstance.Message;

			return this;
		  }
		  internal void setMessage(ByteString value)
		  {
			bitField0_ |= 0x00000010;
			message_ = value;

		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.CommandEndTxnOnSubscriptionResponse)
		}

		static CommandEndTxnOnSubscriptionResponse()
		{
		  defaultInstance = new CommandEndTxnOnSubscriptionResponse(true);
		  defaultInstance.initFields();
		}

		// @@protoc_insertion_point(class_scope:pulsar.proto.CommandEndTxnOnSubscriptionResponse)
	  }

	  public interface BaseCommandOrBuilder : MessageLiteOrBuilder
	  {

		// required .pulsar.proto.BaseCommand.Type type = 1;
		bool hasType();
		BaseCommand.Type Type {get;}

		// optional .pulsar.proto.CommandConnect connect = 2;
		bool hasConnect();
		CommandConnect Connect {get;}

		// optional .pulsar.proto.CommandConnected connected = 3;
		bool hasConnected();
		CommandConnected Connected {get;}

		// optional .pulsar.proto.CommandSubscribe subscribe = 4;
		bool hasSubscribe();
		CommandSubscribe Subscribe {get;}

		// optional .pulsar.proto.CommandProducer producer = 5;
		bool hasProducer();
		CommandProducer Producer {get;}

		// optional .pulsar.proto.CommandSend send = 6;
		bool hasSend();
		CommandSend Send {get;}

		// optional .pulsar.proto.CommandSendReceipt send_receipt = 7;
		bool hasSendReceipt();
		CommandSendReceipt SendReceipt {get;}

		// optional .pulsar.proto.CommandSendError send_error = 8;
		bool hasSendError();
		CommandSendError SendError {get;}

		// optional .pulsar.proto.CommandMessage message = 9;
		bool hasMessage();
		CommandMessage Message {get;}

		// optional .pulsar.proto.CommandAck ack = 10;
		bool hasAck();
		CommandAck Ack {get;}

		// optional .pulsar.proto.CommandFlow flow = 11;
		bool hasFlow();
		CommandFlow Flow {get;}

		// optional .pulsar.proto.CommandUnsubscribe unsubscribe = 12;
		bool hasUnsubscribe();
		CommandUnsubscribe Unsubscribe {get;}

		// optional .pulsar.proto.CommandSuccess success = 13;
		bool hasSuccess();
		CommandSuccess Success {get;}

		// optional .pulsar.proto.CommandError error = 14;
		bool hasError();
		CommandError Error {get;}

		// optional .pulsar.proto.CommandCloseProducer close_producer = 15;
		bool hasCloseProducer();
		CommandCloseProducer CloseProducer {get;}

		// optional .pulsar.proto.CommandCloseConsumer close_consumer = 16;
		bool hasCloseConsumer();
		CommandCloseConsumer CloseConsumer {get;}

		// optional .pulsar.proto.CommandProducerSuccess producer_success = 17;
		bool hasProducerSuccess();
		CommandProducerSuccess ProducerSuccess {get;}

		// optional .pulsar.proto.CommandPing ping = 18;
		bool hasPing();
		CommandPing Ping {get;}

		// optional .pulsar.proto.CommandPong pong = 19;
		bool hasPong();
		CommandPong Pong {get;}

		// optional .pulsar.proto.CommandRedeliverUnacknowledgedMessages redeliverUnacknowledgedMessages = 20;
		bool hasRedeliverUnacknowledgedMessages();
		CommandRedeliverUnacknowledgedMessages RedeliverUnacknowledgedMessages {get;}

		// optional .pulsar.proto.CommandPartitionedTopicMetadata partitionMetadata = 21;
		bool hasPartitionMetadata();
		CommandPartitionedTopicMetadata PartitionMetadata {get;}

		// optional .pulsar.proto.CommandPartitionedTopicMetadataResponse partitionMetadataResponse = 22;
		bool hasPartitionMetadataResponse();
		CommandPartitionedTopicMetadataResponse PartitionMetadataResponse {get;}

		// optional .pulsar.proto.CommandLookupTopic lookupTopic = 23;
		bool hasLookupTopic();
		CommandLookupTopic LookupTopic {get;}

		// optional .pulsar.proto.CommandLookupTopicResponse lookupTopicResponse = 24;
		bool hasLookupTopicResponse();
		CommandLookupTopicResponse LookupTopicResponse {get;}

		// optional .pulsar.proto.CommandConsumerStats consumerStats = 25;
		bool hasConsumerStats();
		CommandConsumerStats ConsumerStats {get;}

		// optional .pulsar.proto.CommandConsumerStatsResponse consumerStatsResponse = 26;
		bool hasConsumerStatsResponse();
		CommandConsumerStatsResponse ConsumerStatsResponse {get;}

		// optional .pulsar.proto.CommandReachedEndOfTopic reachedEndOfTopic = 27;
		bool hasReachedEndOfTopic();
		CommandReachedEndOfTopic ReachedEndOfTopic {get;}

		// optional .pulsar.proto.CommandSeek seek = 28;
		bool hasSeek();
		CommandSeek Seek {get;}

		// optional .pulsar.proto.CommandGetLastMessageId getLastMessageId = 29;
		bool hasGetLastMessageId();
		CommandGetLastMessageId GetLastMessageId {get;}

		// optional .pulsar.proto.CommandGetLastMessageIdResponse getLastMessageIdResponse = 30;
		bool hasGetLastMessageIdResponse();
		CommandGetLastMessageIdResponse GetLastMessageIdResponse {get;}

		// optional .pulsar.proto.CommandActiveConsumerChange active_consumer_change = 31;
		bool hasActiveConsumerChange();
		CommandActiveConsumerChange ActiveConsumerChange {get;}

		// optional .pulsar.proto.CommandGetTopicsOfNamespace getTopicsOfNamespace = 32;
		bool hasGetTopicsOfNamespace();
		CommandGetTopicsOfNamespace GetTopicsOfNamespace {get;}

		// optional .pulsar.proto.CommandGetTopicsOfNamespaceResponse getTopicsOfNamespaceResponse = 33;
		bool hasGetTopicsOfNamespaceResponse();
		CommandGetTopicsOfNamespaceResponse GetTopicsOfNamespaceResponse {get;}

		// optional .pulsar.proto.CommandGetSchema getSchema = 34;
		bool hasGetSchema();
		CommandGetSchema GetSchema {get;}

		// optional .pulsar.proto.CommandGetSchemaResponse getSchemaResponse = 35;
		bool hasGetSchemaResponse();
		CommandGetSchemaResponse GetSchemaResponse {get;}

		// optional .pulsar.proto.CommandAuthChallenge authChallenge = 36;
		bool hasAuthChallenge();
		CommandAuthChallenge AuthChallenge {get;}

		// optional .pulsar.proto.CommandAuthResponse authResponse = 37;
		bool hasAuthResponse();
		CommandAuthResponse AuthResponse {get;}

		// optional .pulsar.proto.CommandAckResponse ackResponse = 38;
		bool hasAckResponse();
		CommandAckResponse AckResponse {get;}

		// optional .pulsar.proto.CommandGetOrCreateSchema getOrCreateSchema = 39;
		bool hasGetOrCreateSchema();
		CommandGetOrCreateSchema GetOrCreateSchema {get;}

		// optional .pulsar.proto.CommandGetOrCreateSchemaResponse getOrCreateSchemaResponse = 40;
		bool hasGetOrCreateSchemaResponse();
		CommandGetOrCreateSchemaResponse GetOrCreateSchemaResponse {get;}

		// optional .pulsar.proto.CommandNewTxn newTxn = 50;
		bool hasNewTxn();
		CommandNewTxn NewTxn {get;}

		// optional .pulsar.proto.CommandNewTxnResponse newTxnResponse = 51;
		bool hasNewTxnResponse();
		CommandNewTxnResponse NewTxnResponse {get;}

		// optional .pulsar.proto.CommandAddPartitionToTxn addPartitionToTxn = 52;
		bool hasAddPartitionToTxn();
		CommandAddPartitionToTxn AddPartitionToTxn {get;}

		// optional .pulsar.proto.CommandAddPartitionToTxnResponse addPartitionToTxnResponse = 53;
		bool hasAddPartitionToTxnResponse();
		CommandAddPartitionToTxnResponse AddPartitionToTxnResponse {get;}

		// optional .pulsar.proto.CommandAddSubscriptionToTxn addSubscriptionToTxn = 54;
		bool hasAddSubscriptionToTxn();
		CommandAddSubscriptionToTxn AddSubscriptionToTxn {get;}

		// optional .pulsar.proto.CommandAddSubscriptionToTxnResponse addSubscriptionToTxnResponse = 55;
		bool hasAddSubscriptionToTxnResponse();
		CommandAddSubscriptionToTxnResponse AddSubscriptionToTxnResponse {get;}

		// optional .pulsar.proto.CommandEndTxn endTxn = 56;
		bool hasEndTxn();
		CommandEndTxn EndTxn {get;}

		// optional .pulsar.proto.CommandEndTxnResponse endTxnResponse = 57;
		bool hasEndTxnResponse();
		CommandEndTxnResponse EndTxnResponse {get;}

		// optional .pulsar.proto.CommandEndTxnOnPartition endTxnOnPartition = 58;
		bool hasEndTxnOnPartition();
		CommandEndTxnOnPartition EndTxnOnPartition {get;}

		// optional .pulsar.proto.CommandEndTxnOnPartitionResponse endTxnOnPartitionResponse = 59;
		bool hasEndTxnOnPartitionResponse();
		CommandEndTxnOnPartitionResponse EndTxnOnPartitionResponse {get;}

		// optional .pulsar.proto.CommandEndTxnOnSubscription endTxnOnSubscription = 60;
		bool hasEndTxnOnSubscription();
		CommandEndTxnOnSubscription EndTxnOnSubscription {get;}

		// optional .pulsar.proto.CommandEndTxnOnSubscriptionResponse endTxnOnSubscriptionResponse = 61;
		bool hasEndTxnOnSubscriptionResponse();
		CommandEndTxnOnSubscriptionResponse EndTxnOnSubscriptionResponse {get;}
	  }
	  public sealed class BaseCommand : BaseCommandOrBuilder, ByteBufCodedOutputStream.ByteBufGeneratedMessage
	  {
		// Use BaseCommand.newBuilder() to construct.
		internal io.netty.util.Recycler.Handle handle;
		internal BaseCommand(io.netty.util.Recycler.Handle handle)
		{
		  this.handle = handle;
		}

		 internal static readonly io.netty.util.Recycler<BaseCommand> RECYCLER = new RecyclerAnonymousInnerClass();

		 private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<BaseCommand>
		 {
			 protected internal BaseCommand newObject(Handle handle)
			 {
			   return new BaseCommand(handle);
			 }
		 }

			public void recycle()
			{
				this.initFields();
				this.memoizedIsInitialized = -1;
				this.bitField0_ = 0;
				this.bitField1_ = 0;
				this.memoizedSerializedSize = -1;
				if (handle != null)
				{
					RECYCLER.recycle(this, handle);
				}
			}

		internal BaseCommand(bool noInit)
		{
		}

		internal static readonly BaseCommand defaultInstance;
		public static BaseCommand DefaultInstance
		{
			get
			{
			  return defaultInstance;
			}
		}

		public BaseCommand DefaultInstanceForType
		{
			get
			{
			  return defaultInstance;
			}
		}

		public sealed class Type : Internal.EnumLite
		{
		  public static readonly Type CONNECT = new Type("CONNECT", InnerEnum.CONNECT, 0, 2);
		  public static readonly Type CONNECTED = new Type("CONNECTED", InnerEnum.CONNECTED, 1, 3);
		  public static readonly Type SUBSCRIBE = new Type("SUBSCRIBE", InnerEnum.SUBSCRIBE, 2, 4);
		  public static readonly Type PRODUCER = new Type("PRODUCER", InnerEnum.PRODUCER, 3, 5);
		  public static readonly Type SEND = new Type("SEND", InnerEnum.SEND, 4, 6);
		  public static readonly Type SEND_RECEIPT = new Type("SEND_RECEIPT", InnerEnum.SEND_RECEIPT, 5, 7);
		  public static readonly Type SEND_ERROR = new Type("SEND_ERROR", InnerEnum.SEND_ERROR, 6, 8);
		  public static readonly Type MESSAGE = new Type("MESSAGE", InnerEnum.MESSAGE, 7, 9);
		  public static readonly Type ACK = new Type("ACK", InnerEnum.ACK, 8, 10);
		  public static readonly Type FLOW = new Type("FLOW", InnerEnum.FLOW, 9, 11);
		  public static readonly Type UNSUBSCRIBE = new Type("UNSUBSCRIBE", InnerEnum.UNSUBSCRIBE, 10, 12);
		  public static readonly Type SUCCESS = new Type("SUCCESS", InnerEnum.SUCCESS, 11, 13);
		  public static readonly Type ERROR = new Type("ERROR", InnerEnum.ERROR, 12, 14);
		  public static readonly Type CLOSE_PRODUCER = new Type("CLOSE_PRODUCER", InnerEnum.CLOSE_PRODUCER, 13, 15);
		  public static readonly Type CLOSE_CONSUMER = new Type("CLOSE_CONSUMER", InnerEnum.CLOSE_CONSUMER, 14, 16);
		  public static readonly Type PRODUCER_SUCCESS = new Type("PRODUCER_SUCCESS", InnerEnum.PRODUCER_SUCCESS, 15, 17);
		  public static readonly Type PING = new Type("PING", InnerEnum.PING, 16, 18);
		  public static readonly Type PONG = new Type("PONG", InnerEnum.PONG, 17, 19);
		  public static readonly Type REDELIVER_UNACKNOWLEDGED_MESSAGES = new Type("REDELIVER_UNACKNOWLEDGED_MESSAGES", InnerEnum.REDELIVER_UNACKNOWLEDGED_MESSAGES, 18, 20);
		  public static readonly Type PARTITIONED_METADATA = new Type("PARTITIONED_METADATA", InnerEnum.PARTITIONED_METADATA, 19, 21);
		  public static readonly Type PARTITIONED_METADATA_RESPONSE = new Type("PARTITIONED_METADATA_RESPONSE", InnerEnum.PARTITIONED_METADATA_RESPONSE, 20, 22);
		  public static readonly Type LOOKUP = new Type("LOOKUP", InnerEnum.LOOKUP, 21, 23);
		  public static readonly Type LOOKUP_RESPONSE = new Type("LOOKUP_RESPONSE", InnerEnum.LOOKUP_RESPONSE, 22, 24);
		  public static readonly Type CONSUMER_STATS = new Type("CONSUMER_STATS", InnerEnum.CONSUMER_STATS, 23, 25);
		  public static readonly Type CONSUMER_STATS_RESPONSE = new Type("CONSUMER_STATS_RESPONSE", InnerEnum.CONSUMER_STATS_RESPONSE, 24, 26);
		  public static readonly Type REACHED_END_OF_TOPIC = new Type("REACHED_END_OF_TOPIC", InnerEnum.REACHED_END_OF_TOPIC, 25, 27);
		  public static readonly Type SEEK = new Type("SEEK", InnerEnum.SEEK, 26, 28);
		  public static readonly Type GET_LAST_MESSAGE_ID = new Type("GET_LAST_MESSAGE_ID", InnerEnum.GET_LAST_MESSAGE_ID, 27, 29);
		  public static readonly Type GET_LAST_MESSAGE_ID_RESPONSE = new Type("GET_LAST_MESSAGE_ID_RESPONSE", InnerEnum.GET_LAST_MESSAGE_ID_RESPONSE, 28, 30);
		  public static readonly Type ACTIVE_CONSUMER_CHANGE = new Type("ACTIVE_CONSUMER_CHANGE", InnerEnum.ACTIVE_CONSUMER_CHANGE, 29, 31);
		  public static readonly Type GET_TOPICS_OF_NAMESPACE = new Type("GET_TOPICS_OF_NAMESPACE", InnerEnum.GET_TOPICS_OF_NAMESPACE, 30, 32);
		  public static readonly Type GET_TOPICS_OF_NAMESPACE_RESPONSE = new Type("GET_TOPICS_OF_NAMESPACE_RESPONSE", InnerEnum.GET_TOPICS_OF_NAMESPACE_RESPONSE, 31, 33);
		  public static readonly Type GET_SCHEMA = new Type("GET_SCHEMA", InnerEnum.GET_SCHEMA, 32, 34);
		  public static readonly Type GET_SCHEMA_RESPONSE = new Type("GET_SCHEMA_RESPONSE", InnerEnum.GET_SCHEMA_RESPONSE, 33, 35);
		  public static readonly Type AUTH_CHALLENGE = new Type("AUTH_CHALLENGE", InnerEnum.AUTH_CHALLENGE, 34, 36);
		  public static readonly Type AUTH_RESPONSE = new Type("AUTH_RESPONSE", InnerEnum.AUTH_RESPONSE, 35, 37);
		  public static readonly Type ACK_RESPONSE = new Type("ACK_RESPONSE", InnerEnum.ACK_RESPONSE, 36, 38);
		  public static readonly Type GET_OR_CREATE_SCHEMA = new Type("GET_OR_CREATE_SCHEMA", InnerEnum.GET_OR_CREATE_SCHEMA, 37, 39);
		  public static readonly Type GET_OR_CREATE_SCHEMA_RESPONSE = new Type("GET_OR_CREATE_SCHEMA_RESPONSE", InnerEnum.GET_OR_CREATE_SCHEMA_RESPONSE, 38, 40);
		  public static readonly Type NEW_TXN = new Type("NEW_TXN", InnerEnum.NEW_TXN, 39, 50);
		  public static readonly Type NEW_TXN_RESPONSE = new Type("NEW_TXN_RESPONSE", InnerEnum.NEW_TXN_RESPONSE, 40, 51);
		  public static readonly Type ADD_PARTITION_TO_TXN = new Type("ADD_PARTITION_TO_TXN", InnerEnum.ADD_PARTITION_TO_TXN, 41, 52);
		  public static readonly Type ADD_PARTITION_TO_TXN_RESPONSE = new Type("ADD_PARTITION_TO_TXN_RESPONSE", InnerEnum.ADD_PARTITION_TO_TXN_RESPONSE, 42, 53);
		  public static readonly Type ADD_SUBSCRIPTION_TO_TXN = new Type("ADD_SUBSCRIPTION_TO_TXN", InnerEnum.ADD_SUBSCRIPTION_TO_TXN, 43, 54);
		  public static readonly Type ADD_SUBSCRIPTION_TO_TXN_RESPONSE = new Type("ADD_SUBSCRIPTION_TO_TXN_RESPONSE", InnerEnum.ADD_SUBSCRIPTION_TO_TXN_RESPONSE, 44, 55);
		  public static readonly Type END_TXN = new Type("END_TXN", InnerEnum.END_TXN, 45, 56);
		  public static readonly Type END_TXN_RESPONSE = new Type("END_TXN_RESPONSE", InnerEnum.END_TXN_RESPONSE, 46, 57);
		  public static readonly Type END_TXN_ON_PARTITION = new Type("END_TXN_ON_PARTITION", InnerEnum.END_TXN_ON_PARTITION, 47, 58);
		  public static readonly Type END_TXN_ON_PARTITION_RESPONSE = new Type("END_TXN_ON_PARTITION_RESPONSE", InnerEnum.END_TXN_ON_PARTITION_RESPONSE, 48, 59);
		  public static readonly Type END_TXN_ON_SUBSCRIPTION = new Type("END_TXN_ON_SUBSCRIPTION", InnerEnum.END_TXN_ON_SUBSCRIPTION, 49, 60);
		  public static readonly Type END_TXN_ON_SUBSCRIPTION_RESPONSE = new Type("END_TXN_ON_SUBSCRIPTION_RESPONSE", InnerEnum.END_TXN_ON_SUBSCRIPTION_RESPONSE, 50, 61);

		  private static readonly IList<Type> valueList = new List<Type>();

		  static Type()
		  {
			  valueList.Add(CONNECT);
			  valueList.Add(CONNECTED);
			  valueList.Add(SUBSCRIBE);
			  valueList.Add(PRODUCER);
			  valueList.Add(SEND);
			  valueList.Add(SEND_RECEIPT);
			  valueList.Add(SEND_ERROR);
			  valueList.Add(MESSAGE);
			  valueList.Add(ACK);
			  valueList.Add(FLOW);
			  valueList.Add(UNSUBSCRIBE);
			  valueList.Add(SUCCESS);
			  valueList.Add(ERROR);
			  valueList.Add(CLOSE_PRODUCER);
			  valueList.Add(CLOSE_CONSUMER);
			  valueList.Add(PRODUCER_SUCCESS);
			  valueList.Add(PING);
			  valueList.Add(PONG);
			  valueList.Add(REDELIVER_UNACKNOWLEDGED_MESSAGES);
			  valueList.Add(PARTITIONED_METADATA);
			  valueList.Add(PARTITIONED_METADATA_RESPONSE);
			  valueList.Add(LOOKUP);
			  valueList.Add(LOOKUP_RESPONSE);
			  valueList.Add(CONSUMER_STATS);
			  valueList.Add(CONSUMER_STATS_RESPONSE);
			  valueList.Add(REACHED_END_OF_TOPIC);
			  valueList.Add(SEEK);
			  valueList.Add(GET_LAST_MESSAGE_ID);
			  valueList.Add(GET_LAST_MESSAGE_ID_RESPONSE);
			  valueList.Add(ACTIVE_CONSUMER_CHANGE);
			  valueList.Add(GET_TOPICS_OF_NAMESPACE);
			  valueList.Add(GET_TOPICS_OF_NAMESPACE_RESPONSE);
			  valueList.Add(GET_SCHEMA);
			  valueList.Add(GET_SCHEMA_RESPONSE);
			  valueList.Add(AUTH_CHALLENGE);
			  valueList.Add(AUTH_RESPONSE);
			  valueList.Add(ACK_RESPONSE);
			  valueList.Add(GET_OR_CREATE_SCHEMA);
			  valueList.Add(GET_OR_CREATE_SCHEMA_RESPONSE);
			  valueList.Add(NEW_TXN);
			  valueList.Add(NEW_TXN_RESPONSE);
			  valueList.Add(ADD_PARTITION_TO_TXN);
			  valueList.Add(ADD_PARTITION_TO_TXN_RESPONSE);
			  valueList.Add(ADD_SUBSCRIPTION_TO_TXN);
			  valueList.Add(ADD_SUBSCRIPTION_TO_TXN_RESPONSE);
			  valueList.Add(END_TXN);
			  valueList.Add(END_TXN_RESPONSE);
			  valueList.Add(END_TXN_ON_PARTITION);
			  valueList.Add(END_TXN_ON_PARTITION_RESPONSE);
			  valueList.Add(END_TXN_ON_SUBSCRIPTION);
			  valueList.Add(END_TXN_ON_SUBSCRIPTION_RESPONSE);
		  }

		  public enum InnerEnum
		  {
			  CONNECT,
			  CONNECTED,
			  SUBSCRIBE,
			  PRODUCER,
			  SEND,
			  SEND_RECEIPT,
			  SEND_ERROR,
			  MESSAGE,
			  ACK,
			  FLOW,
			  UNSUBSCRIBE,
			  SUCCESS,
			  ERROR,
			  CLOSE_PRODUCER,
			  CLOSE_CONSUMER,
			  PRODUCER_SUCCESS,
			  PING,
			  PONG,
			  REDELIVER_UNACKNOWLEDGED_MESSAGES,
			  PARTITIONED_METADATA,
			  PARTITIONED_METADATA_RESPONSE,
			  LOOKUP,
			  LOOKUP_RESPONSE,
			  CONSUMER_STATS,
			  CONSUMER_STATS_RESPONSE,
			  REACHED_END_OF_TOPIC,
			  SEEK,
			  GET_LAST_MESSAGE_ID,
			  GET_LAST_MESSAGE_ID_RESPONSE,
			  ACTIVE_CONSUMER_CHANGE,
			  GET_TOPICS_OF_NAMESPACE,
			  GET_TOPICS_OF_NAMESPACE_RESPONSE,
			  GET_SCHEMA,
			  GET_SCHEMA_RESPONSE,
			  AUTH_CHALLENGE,
			  AUTH_RESPONSE,
			  ACK_RESPONSE,
			  GET_OR_CREATE_SCHEMA,
			  GET_OR_CREATE_SCHEMA_RESPONSE,
			  NEW_TXN,
			  NEW_TXN_RESPONSE,
			  ADD_PARTITION_TO_TXN,
			  ADD_PARTITION_TO_TXN_RESPONSE,
			  ADD_SUBSCRIPTION_TO_TXN,
			  ADD_SUBSCRIPTION_TO_TXN_RESPONSE,
			  END_TXN,
			  END_TXN_RESPONSE,
			  END_TXN_ON_PARTITION,
			  END_TXN_ON_PARTITION_RESPONSE,
			  END_TXN_ON_SUBSCRIPTION,
			  END_TXN_ON_SUBSCRIPTION_RESPONSE
		  }

		  public readonly InnerEnum innerEnumValue;
		  private readonly string nameValue;
		  private readonly int ordinalValue;
		  private static int nextOrdinal = 0;

		  public const int CONNECT_VALUE = 2;
		  public const int CONNECTED_VALUE = 3;
		  public const int SUBSCRIBE_VALUE = 4;
		  public const int PRODUCER_VALUE = 5;
		  public const int SEND_VALUE = 6;
		  public const int SEND_RECEIPT_VALUE = 7;
		  public const int SEND_ERROR_VALUE = 8;
		  public const int MESSAGE_VALUE = 9;
		  public const int ACK_VALUE = 10;
		  public const int FLOW_VALUE = 11;
		  public const int UNSUBSCRIBE_VALUE = 12;
		  public const int SUCCESS_VALUE = 13;
		  public const int ERROR_VALUE = 14;
		  public const int CLOSE_PRODUCER_VALUE = 15;
		  public const int CLOSE_CONSUMER_VALUE = 16;
		  public const int PRODUCER_SUCCESS_VALUE = 17;
		  public const int PING_VALUE = 18;
		  public const int PONG_VALUE = 19;
		  public const int REDELIVER_UNACKNOWLEDGED_MESSAGES_VALUE = 20;
		  public const int PARTITIONED_METADATA_VALUE = 21;
		  public const int PARTITIONED_METADATA_RESPONSE_VALUE = 22;
		  public const int LOOKUP_VALUE = 23;
		  public const int LOOKUP_RESPONSE_VALUE = 24;
		  public const int CONSUMER_STATS_VALUE = 25;
		  public const int CONSUMER_STATS_RESPONSE_VALUE = 26;
		  public const int REACHED_END_OF_TOPIC_VALUE = 27;
		  public const int SEEK_VALUE = 28;
		  public const int GET_LAST_MESSAGE_ID_VALUE = 29;
		  public const int GET_LAST_MESSAGE_ID_RESPONSE_VALUE = 30;
		  public const int ACTIVE_CONSUMER_CHANGE_VALUE = 31;
		  public const int GET_TOPICS_OF_NAMESPACE_VALUE = 32;
		  public const int GET_TOPICS_OF_NAMESPACE_RESPONSE_VALUE = 33;
		  public const int GET_SCHEMA_VALUE = 34;
		  public const int GET_SCHEMA_RESPONSE_VALUE = 35;
		  public const int AUTH_CHALLENGE_VALUE = 36;
		  public const int AUTH_RESPONSE_VALUE = 37;
		  public const int ACK_RESPONSE_VALUE = 38;
		  public const int GET_OR_CREATE_SCHEMA_VALUE = 39;
		  public const int GET_OR_CREATE_SCHEMA_RESPONSE_VALUE = 40;
		  public const int NEW_TXN_VALUE = 50;
		  public const int NEW_TXN_RESPONSE_VALUE = 51;
		  public const int ADD_PARTITION_TO_TXN_VALUE = 52;
		  public const int ADD_PARTITION_TO_TXN_RESPONSE_VALUE = 53;
		  public const int ADD_SUBSCRIPTION_TO_TXN_VALUE = 54;
		  public const int ADD_SUBSCRIPTION_TO_TXN_RESPONSE_VALUE = 55;
		  public const int END_TXN_VALUE = 56;
		  public const int END_TXN_RESPONSE_VALUE = 57;
		  public const int END_TXN_ON_PARTITION_VALUE = 58;
		  public const int END_TXN_ON_PARTITION_RESPONSE_VALUE = 59;
		  public const int END_TXN_ON_SUBSCRIPTION_VALUE = 60;
		  public const int END_TXN_ON_SUBSCRIPTION_RESPONSE_VALUE = 61;


		  public int Number
		  {
			  get
			  {
				  return value;
			  }
		  }

		  public static Type valueOf(int value)
		  {
			switch (value)
			{
			  case 2:
				  return CONNECT;
			  case 3:
				  return CONNECTED;
			  case 4:
				  return SUBSCRIBE;
			  case 5:
				  return PRODUCER;
			  case 6:
				  return SEND;
			  case 7:
				  return SEND_RECEIPT;
			  case 8:
				  return SEND_ERROR;
			  case 9:
				  return MESSAGE;
			  case 10:
				  return ACK;
			  case 11:
				  return FLOW;
			  case 12:
				  return UNSUBSCRIBE;
			  case 13:
				  return SUCCESS;
			  case 14:
				  return ERROR;
			  case 15:
				  return CLOSE_PRODUCER;
			  case 16:
				  return CLOSE_CONSUMER;
			  case 17:
				  return PRODUCER_SUCCESS;
			  case 18:
				  return PING;
			  case 19:
				  return PONG;
			  case 20:
				  return REDELIVER_UNACKNOWLEDGED_MESSAGES;
			  case 21:
				  return PARTITIONED_METADATA;
			  case 22:
				  return PARTITIONED_METADATA_RESPONSE;
			  case 23:
				  return LOOKUP;
			  case 24:
				  return LOOKUP_RESPONSE;
			  case 25:
				  return CONSUMER_STATS;
			  case 26:
				  return CONSUMER_STATS_RESPONSE;
			  case 27:
				  return REACHED_END_OF_TOPIC;
			  case 28:
				  return SEEK;
			  case 29:
				  return GET_LAST_MESSAGE_ID;
			  case 30:
				  return GET_LAST_MESSAGE_ID_RESPONSE;
			  case 31:
				  return ACTIVE_CONSUMER_CHANGE;
			  case 32:
				  return GET_TOPICS_OF_NAMESPACE;
			  case 33:
				  return GET_TOPICS_OF_NAMESPACE_RESPONSE;
			  case 34:
				  return GET_SCHEMA;
			  case 35:
				  return GET_SCHEMA_RESPONSE;
			  case 36:
				  return AUTH_CHALLENGE;
			  case 37:
				  return AUTH_RESPONSE;
			  case 38:
				  return ACK_RESPONSE;
			  case 39:
				  return GET_OR_CREATE_SCHEMA;
			  case 40:
				  return GET_OR_CREATE_SCHEMA_RESPONSE;
			  case 50:
				  return NEW_TXN;
			  case 51:
				  return NEW_TXN_RESPONSE;
			  case 52:
				  return ADD_PARTITION_TO_TXN;
			  case 53:
				  return ADD_PARTITION_TO_TXN_RESPONSE;
			  case 54:
				  return ADD_SUBSCRIPTION_TO_TXN;
			  case 55:
				  return ADD_SUBSCRIPTION_TO_TXN_RESPONSE;
			  case 56:
				  return END_TXN;
			  case 57:
				  return END_TXN_RESPONSE;
			  case 58:
				  return END_TXN_ON_PARTITION;
			  case 59:
				  return END_TXN_ON_PARTITION_RESPONSE;
			  case 60:
				  return END_TXN_ON_SUBSCRIPTION;
			  case 61:
				  return END_TXN_ON_SUBSCRIPTION_RESPONSE;
			  default:
				  return null;
			}
		  }

		  public static IList<Type> internalGetValueMap()
		  {
			return internalValueMap;
		  }
		  internal static IList<Type> internalValueMap = new EnumLiteMapAnonymousInnerClass();

		  internal readonly int value;

		  internal Type(string name, InnerEnum innerEnum, int index, int value)
		  {
			this.value = value;

			  nameValue = name;
			  ordinalValue = nextOrdinal++;
			  innerEnumValue = innerEnum;
		  }

//JAVA TO C# CONVERTER TODO TASK: Java to C# Converter does not convert types within enums:
//		  private static class EnumLiteMapAnonymousInnerClass extends IList<Type>
	//	  {
	//		  public Type findValueByNumber(int number)
	//		  {
	//			return Type.valueOf(number);
	//		  }
	//	  }

		  // @@protoc_insertion_point(enum_scope:pulsar.proto.BaseCommand.Type)

			public static IList<Type> values()
			{
				return valueList;
			}

			public int ordinal()
			{
				return ordinalValue;
			}

			public override string ToString()
			{
				return nameValue;
			}
		}

		internal int bitField0_;
		internal int bitField1_;
		// required .pulsar.proto.BaseCommand.Type type = 1;
		public const int TYPE_FIELD_NUMBER = 1;
		internal BaseCommand.Type type_;
		public bool hasType()
		{
		  return ((bitField0_ & 0x00000001) == 0x00000001);
		}
		public BaseCommand.Type getType()
		{
		  return type_;
		}

		// optional .pulsar.proto.CommandConnect connect = 2;
		public const int CONNECT_FIELD_NUMBER = 2;
		internal CommandConnect connect_;
		public bool hasConnect()
		{
		  return ((bitField0_ & 0x00000002) == 0x00000002);
		}
		public CommandConnect Connect
		{
			get
			{
			  return connect_;
			}
		}

		// optional .pulsar.proto.CommandConnected connected = 3;
		public const int CONNECTED_FIELD_NUMBER = 3;
		internal CommandConnected connected_;
		public bool hasConnected()
		{
		  return ((bitField0_ & 0x00000004) == 0x00000004);
		}
		public CommandConnected Connected
		{
			get
			{
			  return connected_;
			}
		}

		// optional .pulsar.proto.CommandSubscribe subscribe = 4;
		public const int SUBSCRIBE_FIELD_NUMBER = 4;
		internal CommandSubscribe subscribe_;
		public bool hasSubscribe()
		{
		  return ((bitField0_ & 0x00000008) == 0x00000008);
		}
		public CommandSubscribe Subscribe
		{
			get
			{
			  return subscribe_;
			}
		}

		// optional .pulsar.proto.CommandProducer producer = 5;
		public const int PRODUCER_FIELD_NUMBER = 5;
		internal CommandProducer producer_;
		public bool hasProducer()
		{
		  return ((bitField0_ & 0x00000010) == 0x00000010);
		}
		public CommandProducer Producer
		{
			get
			{
			  return producer_;
			}
		}

		// optional .pulsar.proto.CommandSend send = 6;
		public const int SEND_FIELD_NUMBER = 6;
		internal CommandSend send_;
		public bool hasSend()
		{
		  return ((bitField0_ & 0x00000020) == 0x00000020);
		}
		public CommandSend Send
		{
			get
			{
			  return send_;
			}
		}

		// optional .pulsar.proto.CommandSendReceipt send_receipt = 7;
		public const int SEND_RECEIPT_FIELD_NUMBER = 7;
		internal CommandSendReceipt sendReceipt_;
		public bool hasSendReceipt()
		{
		  return ((bitField0_ & 0x00000040) == 0x00000040);
		}
		public CommandSendReceipt SendReceipt
		{
			get
			{
			  return sendReceipt_;
			}
		}

		// optional .pulsar.proto.CommandSendError send_error = 8;
		public const int SEND_ERROR_FIELD_NUMBER = 8;
		internal CommandSendError sendError_;
		public bool hasSendError()
		{
		  return ((bitField0_ & 0x00000080) == 0x00000080);
		}
		public CommandSendError SendError
		{
			get
			{
			  return sendError_;
			}
		}

		// optional .pulsar.proto.CommandMessage message = 9;
		public const int MESSAGE_FIELD_NUMBER = 9;
		internal CommandMessage message_;
		public bool hasMessage()
		{
		  return ((bitField0_ & 0x00000100) == 0x00000100);
		}
		public CommandMessage Message
		{
			get
			{
			  return message_;
			}
		}

		// optional .pulsar.proto.CommandAck ack = 10;
		public const int ACK_FIELD_NUMBER = 10;
		internal CommandAck ack_;
		public bool hasAck()
		{
		  return ((bitField0_ & 0x00000200) == 0x00000200);
		}
		public CommandAck Ack
		{
			get
			{
			  return ack_;
			}
		}

		// optional .pulsar.proto.CommandFlow flow = 11;
		public const int FLOW_FIELD_NUMBER = 11;
		internal CommandFlow flow_;
		public bool hasFlow()
		{
		  return ((bitField0_ & 0x00000400) == 0x00000400);
		}
		public CommandFlow Flow
		{
			get
			{
			  return flow_;
			}
		}

		// optional .pulsar.proto.CommandUnsubscribe unsubscribe = 12;
		public const int UNSUBSCRIBE_FIELD_NUMBER = 12;
		internal CommandUnsubscribe unsubscribe_;
		public bool hasUnsubscribe()
		{
		  return ((bitField0_ & 0x00000800) == 0x00000800);
		}
		public CommandUnsubscribe Unsubscribe
		{
			get
			{
			  return unsubscribe_;
			}
		}

		// optional .pulsar.proto.CommandSuccess success = 13;
		public const int SUCCESS_FIELD_NUMBER = 13;
		internal CommandSuccess success_;
		public bool hasSuccess()
		{
		  return ((bitField0_ & 0x00001000) == 0x00001000);
		}
		public CommandSuccess Success
		{
			get
			{
			  return success_;
			}
		}

		// optional .pulsar.proto.CommandError error = 14;
		public const int ERROR_FIELD_NUMBER = 14;
		internal CommandError error_;
		public bool hasError()
		{
		  return ((bitField0_ & 0x00002000) == 0x00002000);
		}
		public CommandError Error
		{
			get
			{
			  return error_;
			}
		}

		// optional .pulsar.proto.CommandCloseProducer close_producer = 15;
		public const int CLOSE_PRODUCER_FIELD_NUMBER = 15;
		internal CommandCloseProducer closeProducer_;
		public bool hasCloseProducer()
		{
		  return ((bitField0_ & 0x00004000) == 0x00004000);
		}
		public CommandCloseProducer CloseProducer
		{
			get
			{
			  return closeProducer_;
			}
		}

		// optional .pulsar.proto.CommandCloseConsumer close_consumer = 16;
		public const int CLOSE_CONSUMER_FIELD_NUMBER = 16;
		internal CommandCloseConsumer closeConsumer_;
		public bool hasCloseConsumer()
		{
		  return ((bitField0_ & 0x00008000) == 0x00008000);
		}
		public CommandCloseConsumer CloseConsumer
		{
			get
			{
			  return closeConsumer_;
			}
		}

		// optional .pulsar.proto.CommandProducerSuccess producer_success = 17;
		public const int PRODUCER_SUCCESS_FIELD_NUMBER = 17;
		internal CommandProducerSuccess producerSuccess_;
		public bool hasProducerSuccess()
		{
		  return ((bitField0_ & 0x00010000) == 0x00010000);
		}
		public CommandProducerSuccess ProducerSuccess
		{
			get
			{
			  return producerSuccess_;
			}
		}

		// optional .pulsar.proto.CommandPing ping = 18;
		public const int PING_FIELD_NUMBER = 18;
		internal CommandPing ping_;
		public bool hasPing()
		{
		  return ((bitField0_ & 0x00020000) == 0x00020000);
		}
		public CommandPing Ping
		{
			get
			{
			  return ping_;
			}
		}

		// optional .pulsar.proto.CommandPong pong = 19;
		public const int PONG_FIELD_NUMBER = 19;
		internal CommandPong pong_;
		public bool hasPong()
		{
		  return ((bitField0_ & 0x00040000) == 0x00040000);
		}
		public CommandPong Pong
		{
			get
			{
			  return pong_;
			}
		}

		// optional .pulsar.proto.CommandRedeliverUnacknowledgedMessages redeliverUnacknowledgedMessages = 20;
		public const int REDELIVERUNACKNOWLEDGEDMESSAGES_FIELD_NUMBER = 20;
		internal CommandRedeliverUnacknowledgedMessages redeliverUnacknowledgedMessages_;
		public bool hasRedeliverUnacknowledgedMessages()
		{
		  return ((bitField0_ & 0x00080000) == 0x00080000);
		}
		public CommandRedeliverUnacknowledgedMessages RedeliverUnacknowledgedMessages
		{
			get
			{
			  return redeliverUnacknowledgedMessages_;
			}
		}

		// optional .pulsar.proto.CommandPartitionedTopicMetadata partitionMetadata = 21;
		public const int PARTITIONMETADATA_FIELD_NUMBER = 21;
		internal CommandPartitionedTopicMetadata partitionMetadata_;
		public bool hasPartitionMetadata()
		{
		  return ((bitField0_ & 0x00100000) == 0x00100000);
		}
		public CommandPartitionedTopicMetadata PartitionMetadata
		{
			get
			{
			  return partitionMetadata_;
			}
		}

		// optional .pulsar.proto.CommandPartitionedTopicMetadataResponse partitionMetadataResponse = 22;
		public const int PARTITIONMETADATARESPONSE_FIELD_NUMBER = 22;
		internal CommandPartitionedTopicMetadataResponse partitionMetadataResponse_;
		public bool hasPartitionMetadataResponse()
		{
		  return ((bitField0_ & 0x00200000) == 0x00200000);
		}
		public CommandPartitionedTopicMetadataResponse PartitionMetadataResponse
		{
			get
			{
			  return partitionMetadataResponse_;
			}
		}

		// optional .pulsar.proto.CommandLookupTopic lookupTopic = 23;
		public const int LOOKUPTOPIC_FIELD_NUMBER = 23;
		internal CommandLookupTopic lookupTopic_;
		public bool hasLookupTopic()
		{
		  return ((bitField0_ & 0x00400000) == 0x00400000);
		}
		public CommandLookupTopic LookupTopic
		{
			get
			{
			  return lookupTopic_;
			}
		}

		// optional .pulsar.proto.CommandLookupTopicResponse lookupTopicResponse = 24;
		public const int LOOKUPTOPICRESPONSE_FIELD_NUMBER = 24;
		internal CommandLookupTopicResponse lookupTopicResponse_;
		public bool hasLookupTopicResponse()
		{
		  return ((bitField0_ & 0x00800000) == 0x00800000);
		}
		public CommandLookupTopicResponse LookupTopicResponse
		{
			get
			{
			  return lookupTopicResponse_;
			}
		}

		// optional .pulsar.proto.CommandConsumerStats consumerStats = 25;
		public const int CONSUMERSTATS_FIELD_NUMBER = 25;
		internal CommandConsumerStats consumerStats_;
		public bool hasConsumerStats()
		{
		  return ((bitField0_ & 0x01000000) == 0x01000000);
		}
		public CommandConsumerStats ConsumerStats
		{
			get
			{
			  return consumerStats_;
			}
		}

		// optional .pulsar.proto.CommandConsumerStatsResponse consumerStatsResponse = 26;
		public const int CONSUMERSTATSRESPONSE_FIELD_NUMBER = 26;
		internal CommandConsumerStatsResponse consumerStatsResponse_;
		public bool hasConsumerStatsResponse()
		{
		  return ((bitField0_ & 0x02000000) == 0x02000000);
		}
		public CommandConsumerStatsResponse ConsumerStatsResponse
		{
			get
			{
			  return consumerStatsResponse_;
			}
		}

		// optional .pulsar.proto.CommandReachedEndOfTopic reachedEndOfTopic = 27;
		public const int REACHEDENDOFTOPIC_FIELD_NUMBER = 27;
		internal CommandReachedEndOfTopic reachedEndOfTopic_;
		public bool hasReachedEndOfTopic()
		{
		  return ((bitField0_ & 0x04000000) == 0x04000000);
		}
		public CommandReachedEndOfTopic ReachedEndOfTopic
		{
			get
			{
			  return reachedEndOfTopic_;
			}
		}

		// optional .pulsar.proto.CommandSeek seek = 28;
		public const int SEEK_FIELD_NUMBER = 28;
		internal CommandSeek seek_;
		public bool hasSeek()
		{
		  return ((bitField0_ & 0x08000000) == 0x08000000);
		}
		public CommandSeek Seek
		{
			get
			{
			  return seek_;
			}
		}

		// optional .pulsar.proto.CommandGetLastMessageId getLastMessageId = 29;
		public const int GETLASTMESSAGEID_FIELD_NUMBER = 29;
		internal CommandGetLastMessageId getLastMessageId_;
		public bool hasGetLastMessageId()
		{
		  return ((bitField0_ & 0x10000000) == 0x10000000);
		}
		public CommandGetLastMessageId GetLastMessageId
		{
			get
			{
			  return getLastMessageId_;
			}
		}

		// optional .pulsar.proto.CommandGetLastMessageIdResponse getLastMessageIdResponse = 30;
		public const int GETLASTMESSAGEIDRESPONSE_FIELD_NUMBER = 30;
		internal CommandGetLastMessageIdResponse getLastMessageIdResponse_;
		public bool hasGetLastMessageIdResponse()
		{
		  return ((bitField0_ & 0x20000000) == 0x20000000);
		}
		public CommandGetLastMessageIdResponse GetLastMessageIdResponse
		{
			get
			{
			  return getLastMessageIdResponse_;
			}
		}

		// optional .pulsar.proto.CommandActiveConsumerChange active_consumer_change = 31;
		public const int ACTIVE_CONSUMER_CHANGE_FIELD_NUMBER = 31;
		internal CommandActiveConsumerChange activeConsumerChange_;
		public bool hasActiveConsumerChange()
		{
		  return ((bitField0_ & 0x40000000) == 0x40000000);
		}
		public CommandActiveConsumerChange ActiveConsumerChange
		{
			get
			{
			  return activeConsumerChange_;
			}
		}

		// optional .pulsar.proto.CommandGetTopicsOfNamespace getTopicsOfNamespace = 32;
		public const int GETTOPICSOFNAMESPACE_FIELD_NUMBER = 32;
		internal CommandGetTopicsOfNamespace getTopicsOfNamespace_;
		public bool hasGetTopicsOfNamespace()
		{
		  return ((bitField0_ & 0x80000000) == 0x80000000);
		}
		public CommandGetTopicsOfNamespace GetTopicsOfNamespace
		{
			get
			{
			  return getTopicsOfNamespace_;
			}
		}

		// optional .pulsar.proto.CommandGetTopicsOfNamespaceResponse getTopicsOfNamespaceResponse = 33;
		public const int GETTOPICSOFNAMESPACERESPONSE_FIELD_NUMBER = 33;
		internal CommandGetTopicsOfNamespaceResponse getTopicsOfNamespaceResponse_;
		public bool hasGetTopicsOfNamespaceResponse()
		{
		  return ((bitField1_ & 0x00000001) == 0x00000001);
		}
		public CommandGetTopicsOfNamespaceResponse GetTopicsOfNamespaceResponse
		{
			get
			{
			  return getTopicsOfNamespaceResponse_;
			}
		}

		// optional .pulsar.proto.CommandGetSchema getSchema = 34;
		public const int GETSCHEMA_FIELD_NUMBER = 34;
		internal CommandGetSchema getSchema_;
		public bool hasGetSchema()
		{
		  return ((bitField1_ & 0x00000002) == 0x00000002);
		}
		public CommandGetSchema GetSchema
		{
			get
			{
			  return getSchema_;
			}
		}

		// optional .pulsar.proto.CommandGetSchemaResponse getSchemaResponse = 35;
		public const int GETSCHEMARESPONSE_FIELD_NUMBER = 35;
		internal CommandGetSchemaResponse getSchemaResponse_;
		public bool hasGetSchemaResponse()
		{
		  return ((bitField1_ & 0x00000004) == 0x00000004);
		}
		public CommandGetSchemaResponse GetSchemaResponse
		{
			get
			{
			  return getSchemaResponse_;
			}
		}

		// optional .pulsar.proto.CommandAuthChallenge authChallenge = 36;
		public const int AUTHCHALLENGE_FIELD_NUMBER = 36;
		internal CommandAuthChallenge authChallenge_;
		public bool hasAuthChallenge()
		{
		  return ((bitField1_ & 0x00000008) == 0x00000008);
		}
		public CommandAuthChallenge AuthChallenge
		{
			get
			{
			  return authChallenge_;
			}
		}

		// optional .pulsar.proto.CommandAuthResponse authResponse = 37;
		public const int AUTHRESPONSE_FIELD_NUMBER = 37;
		internal CommandAuthResponse authResponse_;
		public bool hasAuthResponse()
		{
		  return ((bitField1_ & 0x00000010) == 0x00000010);
		}
		public CommandAuthResponse AuthResponse
		{
			get
			{
			  return authResponse_;
			}
		}

		// optional .pulsar.proto.CommandAckResponse ackResponse = 38;
		public const int ACKRESPONSE_FIELD_NUMBER = 38;
		internal CommandAckResponse ackResponse_;
		public bool hasAckResponse()
		{
		  return ((bitField1_ & 0x00000020) == 0x00000020);
		}
		public CommandAckResponse AckResponse
		{
			get
			{
			  return ackResponse_;
			}
		}

		// optional .pulsar.proto.CommandGetOrCreateSchema getOrCreateSchema = 39;
		public const int GETORCREATESCHEMA_FIELD_NUMBER = 39;
		internal CommandGetOrCreateSchema getOrCreateSchema_;
		public bool hasGetOrCreateSchema()
		{
		  return ((bitField1_ & 0x00000040) == 0x00000040);
		}
		public CommandGetOrCreateSchema GetOrCreateSchema
		{
			get
			{
			  return getOrCreateSchema_;
			}
		}

		// optional .pulsar.proto.CommandGetOrCreateSchemaResponse getOrCreateSchemaResponse = 40;
		public const int GETORCREATESCHEMARESPONSE_FIELD_NUMBER = 40;
		internal CommandGetOrCreateSchemaResponse getOrCreateSchemaResponse_;
		public bool hasGetOrCreateSchemaResponse()
		{
		  return ((bitField1_ & 0x00000080) == 0x00000080);
		}
		public CommandGetOrCreateSchemaResponse GetOrCreateSchemaResponse
		{
			get
			{
			  return getOrCreateSchemaResponse_;
			}
		}

		// optional .pulsar.proto.CommandNewTxn newTxn = 50;
		public const int NEWTXN_FIELD_NUMBER = 50;
		internal CommandNewTxn newTxn_;
		public bool hasNewTxn()
		{
		  return ((bitField1_ & 0x00000100) == 0x00000100);
		}
		public CommandNewTxn NewTxn
		{
			get
			{
			  return newTxn_;
			}
		}

		// optional .pulsar.proto.CommandNewTxnResponse newTxnResponse = 51;
		public const int NEWTXNRESPONSE_FIELD_NUMBER = 51;
		internal CommandNewTxnResponse newTxnResponse_;
		public bool hasNewTxnResponse()
		{
		  return ((bitField1_ & 0x00000200) == 0x00000200);
		}
		public CommandNewTxnResponse NewTxnResponse
		{
			get
			{
			  return newTxnResponse_;
			}
		}

		// optional .pulsar.proto.CommandAddPartitionToTxn addPartitionToTxn = 52;
		public const int ADDPARTITIONTOTXN_FIELD_NUMBER = 52;
		internal CommandAddPartitionToTxn addPartitionToTxn_;
		public bool hasAddPartitionToTxn()
		{
		  return ((bitField1_ & 0x00000400) == 0x00000400);
		}
		public CommandAddPartitionToTxn AddPartitionToTxn
		{
			get
			{
			  return addPartitionToTxn_;
			}
		}

		// optional .pulsar.proto.CommandAddPartitionToTxnResponse addPartitionToTxnResponse = 53;
		public const int ADDPARTITIONTOTXNRESPONSE_FIELD_NUMBER = 53;
		internal CommandAddPartitionToTxnResponse addPartitionToTxnResponse_;
		public bool hasAddPartitionToTxnResponse()
		{
		  return ((bitField1_ & 0x00000800) == 0x00000800);
		}
		public CommandAddPartitionToTxnResponse AddPartitionToTxnResponse
		{
			get
			{
			  return addPartitionToTxnResponse_;
			}
		}

		// optional .pulsar.proto.CommandAddSubscriptionToTxn addSubscriptionToTxn = 54;
		public const int ADDSUBSCRIPTIONTOTXN_FIELD_NUMBER = 54;
		internal CommandAddSubscriptionToTxn addSubscriptionToTxn_;
		public bool hasAddSubscriptionToTxn()
		{
		  return ((bitField1_ & 0x00001000) == 0x00001000);
		}
		public CommandAddSubscriptionToTxn AddSubscriptionToTxn
		{
			get
			{
			  return addSubscriptionToTxn_;
			}
		}

		// optional .pulsar.proto.CommandAddSubscriptionToTxnResponse addSubscriptionToTxnResponse = 55;
		public const int ADDSUBSCRIPTIONTOTXNRESPONSE_FIELD_NUMBER = 55;
		internal CommandAddSubscriptionToTxnResponse addSubscriptionToTxnResponse_;
		public bool hasAddSubscriptionToTxnResponse()
		{
		  return ((bitField1_ & 0x00002000) == 0x00002000);
		}
		public CommandAddSubscriptionToTxnResponse AddSubscriptionToTxnResponse
		{
			get
			{
			  return addSubscriptionToTxnResponse_;
			}
		}

		// optional .pulsar.proto.CommandEndTxn endTxn = 56;
		public const int ENDTXN_FIELD_NUMBER = 56;
		internal CommandEndTxn endTxn_;
		public bool hasEndTxn()
		{
		  return ((bitField1_ & 0x00004000) == 0x00004000);
		}
		public CommandEndTxn EndTxn
		{
			get
			{
			  return endTxn_;
			}
		}

		// optional .pulsar.proto.CommandEndTxnResponse endTxnResponse = 57;
		public const int ENDTXNRESPONSE_FIELD_NUMBER = 57;
		internal CommandEndTxnResponse endTxnResponse_;
		public bool hasEndTxnResponse()
		{
		  return ((bitField1_ & 0x00008000) == 0x00008000);
		}
		public CommandEndTxnResponse EndTxnResponse
		{
			get
			{
			  return endTxnResponse_;
			}
		}

		// optional .pulsar.proto.CommandEndTxnOnPartition endTxnOnPartition = 58;
		public const int ENDTXNONPARTITION_FIELD_NUMBER = 58;
		internal CommandEndTxnOnPartition endTxnOnPartition_;
		public bool hasEndTxnOnPartition()
		{
		  return ((bitField1_ & 0x00010000) == 0x00010000);
		}
		public CommandEndTxnOnPartition EndTxnOnPartition
		{
			get
			{
			  return endTxnOnPartition_;
			}
		}

		// optional .pulsar.proto.CommandEndTxnOnPartitionResponse endTxnOnPartitionResponse = 59;
		public const int ENDTXNONPARTITIONRESPONSE_FIELD_NUMBER = 59;
		internal CommandEndTxnOnPartitionResponse endTxnOnPartitionResponse_;
		public bool hasEndTxnOnPartitionResponse()
		{
		  return ((bitField1_ & 0x00020000) == 0x00020000);
		}
		public CommandEndTxnOnPartitionResponse EndTxnOnPartitionResponse
		{
			get
			{
			  return endTxnOnPartitionResponse_;
			}
		}

		// optional .pulsar.proto.CommandEndTxnOnSubscription endTxnOnSubscription = 60;
		public const int ENDTXNONSUBSCRIPTION_FIELD_NUMBER = 60;
		internal CommandEndTxnOnSubscription endTxnOnSubscription_;
		public bool hasEndTxnOnSubscription()
		{
		  return ((bitField1_ & 0x00040000) == 0x00040000);
		}
		public CommandEndTxnOnSubscription EndTxnOnSubscription
		{
			get
			{
			  return endTxnOnSubscription_;
			}
		}

		// optional .pulsar.proto.CommandEndTxnOnSubscriptionResponse endTxnOnSubscriptionResponse = 61;
		public const int ENDTXNONSUBSCRIPTIONRESPONSE_FIELD_NUMBER = 61;
		internal CommandEndTxnOnSubscriptionResponse endTxnOnSubscriptionResponse_;
		public bool hasEndTxnOnSubscriptionResponse()
		{
		  return ((bitField1_ & 0x00080000) == 0x00080000);
		}
		public CommandEndTxnOnSubscriptionResponse EndTxnOnSubscriptionResponse
		{
			get
			{
			  return endTxnOnSubscriptionResponse_;
			}
		}

		internal void initFields()
		{
		  type_ = BaseCommand.Type.CONNECT;
		  connect_ = CommandConnect.DefaultInstance;
		  connected_ = CommandConnected.DefaultInstance;
		  subscribe_ = CommandSubscribe.DefaultInstance;
		  producer_ = CommandProducer.DefaultInstance;
		  send_ = CommandSend.DefaultInstance;
		  sendReceipt_ = CommandSendReceipt.DefaultInstance;
		  sendError_ = CommandSendError.DefaultInstance;
		  message_ = CommandMessage.DefaultInstance;
		  ack_ = CommandAck.DefaultInstance;
		  flow_ = CommandFlow.DefaultInstance;
		  unsubscribe_ = CommandUnsubscribe.DefaultInstance;
		  success_ = CommandSuccess.DefaultInstance;
		  error_ = CommandError.DefaultInstance;
		  closeProducer_ = CommandCloseProducer.DefaultInstance;
		  closeConsumer_ = CommandCloseConsumer.DefaultInstance;
		  producerSuccess_ = CommandProducerSuccess.DefaultInstance;
		  ping_ = CommandPing.DefaultInstance;
		  pong_ = CommandPong.DefaultInstance;
		  redeliverUnacknowledgedMessages_ = CommandRedeliverUnacknowledgedMessages.DefaultInstance;
		  partitionMetadata_ = CommandPartitionedTopicMetadata.DefaultInstance;
		  partitionMetadataResponse_ = CommandPartitionedTopicMetadataResponse.DefaultInstance;
		  lookupTopic_ = CommandLookupTopic.DefaultInstance;
		  lookupTopicResponse_ = CommandLookupTopicResponse.DefaultInstance;
		  consumerStats_ = CommandConsumerStats.DefaultInstance;
		  consumerStatsResponse_ = CommandConsumerStatsResponse.DefaultInstance;
		  reachedEndOfTopic_ = CommandReachedEndOfTopic.DefaultInstance;
		  seek_ = CommandSeek.DefaultInstance;
		  getLastMessageId_ = CommandGetLastMessageId.DefaultInstance;
		  getLastMessageIdResponse_ = CommandGetLastMessageIdResponse.DefaultInstance;
		  activeConsumerChange_ = CommandActiveConsumerChange.DefaultInstance;
		  getTopicsOfNamespace_ = CommandGetTopicsOfNamespace.DefaultInstance;
		  getTopicsOfNamespaceResponse_ = CommandGetTopicsOfNamespaceResponse.DefaultInstance;
		  getSchema_ = CommandGetSchema.DefaultInstance;
		  getSchemaResponse_ = CommandGetSchemaResponse.DefaultInstance;
		  authChallenge_ = CommandAuthChallenge.DefaultInstance;
		  authResponse_ = CommandAuthResponse.DefaultInstance;
		  ackResponse_ = CommandAckResponse.DefaultInstance;
		  getOrCreateSchema_ = CommandGetOrCreateSchema.DefaultInstance;
		  getOrCreateSchemaResponse_ = CommandGetOrCreateSchemaResponse.DefaultInstance;
		  newTxn_ = CommandNewTxn.DefaultInstance;
		  newTxnResponse_ = CommandNewTxnResponse.DefaultInstance;
		  addPartitionToTxn_ = CommandAddPartitionToTxn.DefaultInstance;
		  addPartitionToTxnResponse_ = CommandAddPartitionToTxnResponse.DefaultInstance;
		  addSubscriptionToTxn_ = CommandAddSubscriptionToTxn.DefaultInstance;
		  addSubscriptionToTxnResponse_ = CommandAddSubscriptionToTxnResponse.DefaultInstance;
		  endTxn_ = CommandEndTxn.DefaultInstance;
		  endTxnResponse_ = CommandEndTxnResponse.DefaultInstance;
		  endTxnOnPartition_ = CommandEndTxnOnPartition.DefaultInstance;
		  endTxnOnPartitionResponse_ = CommandEndTxnOnPartitionResponse.DefaultInstance;
		  endTxnOnSubscription_ = CommandEndTxnOnSubscription.DefaultInstance;
		  endTxnOnSubscriptionResponse_ = CommandEndTxnOnSubscriptionResponse.DefaultInstance;
		}
		internal sbyte memoizedIsInitialized = -1;
		public bool Initialized
		{
			get
			{
			  sbyte isInitialized = memoizedIsInitialized;
			  if (isInitialized != -1)
			  {
				  return isInitialized == 1;
			  }
    
			  if (!hasType())
			  {
				memoizedIsInitialized = 0;
				return false;
			  }
			  if (hasConnect())
			  {
				if (!Connect.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasConnected())
			  {
				if (!Connected.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasSubscribe())
			  {
				if (!Subscribe.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasProducer())
			  {
				if (!Producer.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasSend())
			  {
				if (!Send.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasSendReceipt())
			  {
				if (!SendReceipt.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasSendError())
			  {
				if (!SendError.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasMessage())
			  {
				if (!Message.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasAck())
			  {
				if (!Ack.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasFlow())
			  {
				if (!Flow.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasUnsubscribe())
			  {
				if (!Unsubscribe.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasSuccess())
			  {
				if (!Success.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasError())
			  {
				if (!Exception.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasCloseProducer())
			  {
				if (!CloseProducer.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasCloseConsumer())
			  {
				if (!CloseConsumer.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasProducerSuccess())
			  {
				if (!ProducerSuccess.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasRedeliverUnacknowledgedMessages())
			  {
				if (!RedeliverUnacknowledgedMessages.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasPartitionMetadata())
			  {
				if (!PartitionMetadata.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasPartitionMetadataResponse())
			  {
				if (!PartitionMetadataResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasLookupTopic())
			  {
				if (!LookupTopic.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasLookupTopicResponse())
			  {
				if (!LookupTopicResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasConsumerStats())
			  {
				if (!ConsumerStats.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasConsumerStatsResponse())
			  {
				if (!ConsumerStatsResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasReachedEndOfTopic())
			  {
				if (!ReachedEndOfTopic.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasSeek())
			  {
				if (!Seek.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasGetLastMessageId())
			  {
				if (!GetLastMessageId.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasGetLastMessageIdResponse())
			  {
				if (!GetLastMessageIdResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasActiveConsumerChange())
			  {
				if (!ActiveConsumerChange.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasGetTopicsOfNamespace())
			  {
				if (!GetTopicsOfNamespace.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasGetTopicsOfNamespaceResponse())
			  {
				if (!GetTopicsOfNamespaceResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasGetSchema())
			  {
				if (!GetSchema.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasGetSchemaResponse())
			  {
				if (!GetSchemaResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasAckResponse())
			  {
				if (!AckResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasGetOrCreateSchema())
			  {
				if (!GetOrCreateSchema.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasGetOrCreateSchemaResponse())
			  {
				if (!GetOrCreateSchemaResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasNewTxn())
			  {
				if (!NewTxn.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasNewTxnResponse())
			  {
				if (!NewTxnResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasAddPartitionToTxn())
			  {
				if (!AddPartitionToTxn.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasAddPartitionToTxnResponse())
			  {
				if (!AddPartitionToTxnResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasAddSubscriptionToTxn())
			  {
				if (!AddSubscriptionToTxn.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasAddSubscriptionToTxnResponse())
			  {
				if (!AddSubscriptionToTxnResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasEndTxn())
			  {
				if (!EndTxn.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasEndTxnResponse())
			  {
				if (!EndTxnResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasEndTxnOnPartition())
			  {
				if (!EndTxnOnPartition.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasEndTxnOnPartitionResponse())
			  {
				if (!EndTxnOnPartitionResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasEndTxnOnSubscription())
			  {
				if (!EndTxnOnSubscription.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  if (hasEndTxnOnSubscriptionResponse())
			  {
				if (!EndTxnOnSubscriptionResponse.Initialized)
				{
				  memoizedIsInitialized = 0;
				  return false;
				}
			  }
			  memoizedIsInitialized = 1;
			  return true;
			}
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(CodedOutputStream output) throws java.io.IOException
		public void writeTo(CodedOutputStream output)
		{
			throw new Exception("Cannot use CodedOutputStream");
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public void writeTo(ByteBufCodedOutputStream output) throws java.io.IOException
		public void writeTo(ByteBufCodedOutputStream output)
		{
		  SerializedSize;
		  if (((bitField0_ & 0x00000001) == 0x00000001))
		  {
			output.writeEnum(1, type_.Number);
		  }
		  if (((bitField0_ & 0x00000002) == 0x00000002))
		  {
			output.WriteMessage(2, connect_);
		  }
		  if (((bitField0_ & 0x00000004) == 0x00000004))
		  {
			output.WriteMessage(3, connected_);
		  }
		  if (((bitField0_ & 0x00000008) == 0x00000008))
		  {
			output.WriteMessage(4, subscribe_);
		  }
		  if (((bitField0_ & 0x00000010) == 0x00000010))
		  {
			output.WriteMessage(5, producer_);
		  }
		  if (((bitField0_ & 0x00000020) == 0x00000020))
		  {
			output.WriteMessage(6, send_);
		  }
		  if (((bitField0_ & 0x00000040) == 0x00000040))
		  {
			output.WriteMessage(7, sendReceipt_);
		  }
		  if (((bitField0_ & 0x00000080) == 0x00000080))
		  {
			output.WriteMessage(8, sendError_);
		  }
		  if (((bitField0_ & 0x00000100) == 0x00000100))
		  {
			output.WriteMessage(9, message_);
		  }
		  if (((bitField0_ & 0x00000200) == 0x00000200))
		  {
			output.WriteMessage(10, ack_);
		  }
		  if (((bitField0_ & 0x00000400) == 0x00000400))
		  {
			output.WriteMessage(11, flow_);
		  }
		  if (((bitField0_ & 0x00000800) == 0x00000800))
		  {
			output.WriteMessage(12, unsubscribe_);
		  }
		  if (((bitField0_ & 0x00001000) == 0x00001000))
		  {
			output.WriteMessage(13, success_);
		  }
		  if (((bitField0_ & 0x00002000) == 0x00002000))
		  {
			output.WriteMessage(14, error_);
		  }
		  if (((bitField0_ & 0x00004000) == 0x00004000))
		  {
			output.WriteMessage(15, closeProducer_);
		  }
		  if (((bitField0_ & 0x00008000) == 0x00008000))
		  {
			output.WriteMessage(16, closeConsumer_);
		  }
		  if (((bitField0_ & 0x00010000) == 0x00010000))
		  {
			output.WriteMessage(17, producerSuccess_);
		  }
		  if (((bitField0_ & 0x00020000) == 0x00020000))
		  {
			output.WriteMessage(18, ping_);
		  }
		  if (((bitField0_ & 0x00040000) == 0x00040000))
		  {
			output.WriteMessage(19, pong_);
		  }
		  if (((bitField0_ & 0x00080000) == 0x00080000))
		  {
			output.WriteMessage(20, redeliverUnacknowledgedMessages_);
		  }
		  if (((bitField0_ & 0x00100000) == 0x00100000))
		  {
			output.WriteMessage(21, partitionMetadata_);
		  }
		  if (((bitField0_ & 0x00200000) == 0x00200000))
		  {
			output.WriteMessage(22, partitionMetadataResponse_);
		  }
		  if (((bitField0_ & 0x00400000) == 0x00400000))
		  {
			output.WriteMessage(23, lookupTopic_);
		  }
		  if (((bitField0_ & 0x00800000) == 0x00800000))
		  {
			output.WriteMessage(24, lookupTopicResponse_);
		  }
		  if (((bitField0_ & 0x01000000) == 0x01000000))
		  {
			output.WriteMessage(25, consumerStats_);
		  }
		  if (((bitField0_ & 0x02000000) == 0x02000000))
		  {
			output.WriteMessage(26, consumerStatsResponse_);
		  }
		  if (((bitField0_ & 0x04000000) == 0x04000000))
		  {
			output.WriteMessage(27, reachedEndOfTopic_);
		  }
		  if (((bitField0_ & 0x08000000) == 0x08000000))
		  {
			output.WriteMessage(28, seek_);
		  }
		  if (((bitField0_ & 0x10000000) == 0x10000000))
		  {
			output.WriteMessage(29, getLastMessageId_);
		  }
		  if (((bitField0_ & 0x20000000) == 0x20000000))
		  {
			output.WriteMessage(30, getLastMessageIdResponse_);
		  }
		  if (((bitField0_ & 0x40000000) == 0x40000000))
		  {
			output.WriteMessage(31, activeConsumerChange_);
		  }
		  if (((bitField0_ & 0x80000000) == 0x80000000))
		  {
			output.WriteMessage(32, getTopicsOfNamespace_);
		  }
		  if (((bitField1_ & 0x00000001) == 0x00000001))
		  {
			output.WriteMessage(33, getTopicsOfNamespaceResponse_);
		  }
		  if (((bitField1_ & 0x00000002) == 0x00000002))
		  {
			output.WriteMessage(34, getSchema_);
		  }
		  if (((bitField1_ & 0x00000004) == 0x00000004))
		  {
			output.WriteMessage(35, getSchemaResponse_);
		  }
		  if (((bitField1_ & 0x00000008) == 0x00000008))
		  {
			output.WriteMessage(36, authChallenge_);
		  }
		  if (((bitField1_ & 0x00000010) == 0x00000010))
		  {
			output.WriteMessage(37, authResponse_);
		  }
		  if (((bitField1_ & 0x00000020) == 0x00000020))
		  {
			output.WriteMessage(38, ackResponse_);
		  }
		  if (((bitField1_ & 0x00000040) == 0x00000040))
		  {
			output.WriteMessage(39, getOrCreateSchema_);
		  }
		  if (((bitField1_ & 0x00000080) == 0x00000080))
		  {
			output.WriteMessage(40, getOrCreateSchemaResponse_);
		  }
		  if (((bitField1_ & 0x00000100) == 0x00000100))
		  {
			output.WriteMessage(50, newTxn_);
		  }
		  if (((bitField1_ & 0x00000200) == 0x00000200))
		  {
			output.WriteMessage(51, newTxnResponse_);
		  }
		  if (((bitField1_ & 0x00000400) == 0x00000400))
		  {
			output.WriteMessage(52, addPartitionToTxn_);
		  }
		  if (((bitField1_ & 0x00000800) == 0x00000800))
		  {
			output.WriteMessage(53, addPartitionToTxnResponse_);
		  }
		  if (((bitField1_ & 0x00001000) == 0x00001000))
		  {
			output.WriteMessage(54, addSubscriptionToTxn_);
		  }
		  if (((bitField1_ & 0x00002000) == 0x00002000))
		  {
			output.WriteMessage(55, addSubscriptionToTxnResponse_);
		  }
		  if (((bitField1_ & 0x00004000) == 0x00004000))
		  {
			output.WriteMessage(56, endTxn_);
		  }
		  if (((bitField1_ & 0x00008000) == 0x00008000))
		  {
			output.WriteMessage(57, endTxnResponse_);
		  }
		  if (((bitField1_ & 0x00010000) == 0x00010000))
		  {
			output.WriteMessage(58, endTxnOnPartition_);
		  }
		  if (((bitField1_ & 0x00020000) == 0x00020000))
		  {
			output.WriteMessage(59, endTxnOnPartitionResponse_);
		  }
		  if (((bitField1_ & 0x00040000) == 0x00040000))
		  {
			output.WriteMessage(60, endTxnOnSubscription_);
		  }
		  if (((bitField1_ & 0x00080000) == 0x00080000))
		  {
			output.WriteMessage(61, endTxnOnSubscriptionResponse_);
		  }
		}

		internal int memoizedSerializedSize = -1;
		public int SerializedSize
		{
			get
			{
			  int size = memoizedSerializedSize;
			  if (size != -1)
			  {
				  return size;
			  }
    
			  size = 0;
			  if (((bitField0_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeEnumSize(1, type_.Number);
			  }
			  if (((bitField0_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeMessageSize(2, connect_);
			  }
			  if (((bitField0_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeMessageSize(3, connected_);
			  }
			  if (((bitField0_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeMessageSize(4, subscribe_);
			  }
			  if (((bitField0_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeMessageSize(5, producer_);
			  }
			  if (((bitField0_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.computeMessageSize(6, send_);
			  }
			  if (((bitField0_ & 0x00000040) == 0x00000040))
			  {
				size += CodedOutputStream.computeMessageSize(7, sendReceipt_);
			  }
			  if (((bitField0_ & 0x00000080) == 0x00000080))
			  {
				size += CodedOutputStream.computeMessageSize(8, sendError_);
			  }
			  if (((bitField0_ & 0x00000100) == 0x00000100))
			  {
				size += CodedOutputStream.computeMessageSize(9, message_);
			  }
			  if (((bitField0_ & 0x00000200) == 0x00000200))
			  {
				size += CodedOutputStream.computeMessageSize(10, ack_);
			  }
			  if (((bitField0_ & 0x00000400) == 0x00000400))
			  {
				size += CodedOutputStream.computeMessageSize(11, flow_);
			  }
			  if (((bitField0_ & 0x00000800) == 0x00000800))
			  {
				size += CodedOutputStream.computeMessageSize(12, unsubscribe_);
			  }
			  if (((bitField0_ & 0x00001000) == 0x00001000))
			  {
				size += CodedOutputStream.computeMessageSize(13, success_);
			  }
			  if (((bitField0_ & 0x00002000) == 0x00002000))
			  {
				size += CodedOutputStream.computeMessageSize(14, error_);
			  }
			  if (((bitField0_ & 0x00004000) == 0x00004000))
			  {
				size += CodedOutputStream.computeMessageSize(15, closeProducer_);
			  }
			  if (((bitField0_ & 0x00008000) == 0x00008000))
			  {
				size += CodedOutputStream.computeMessageSize(16, closeConsumer_);
			  }
			  if (((bitField0_ & 0x00010000) == 0x00010000))
			  {
				size += CodedOutputStream.computeMessageSize(17, producerSuccess_);
			  }
			  if (((bitField0_ & 0x00020000) == 0x00020000))
			  {
				size += CodedOutputStream.computeMessageSize(18, ping_);
			  }
			  if (((bitField0_ & 0x00040000) == 0x00040000))
			  {
				size += CodedOutputStream.computeMessageSize(19, pong_);
			  }
			  if (((bitField0_ & 0x00080000) == 0x00080000))
			  {
				size += CodedOutputStream.computeMessageSize(20, redeliverUnacknowledgedMessages_);
			  }
			  if (((bitField0_ & 0x00100000) == 0x00100000))
			  {
				size += CodedOutputStream.computeMessageSize(21, partitionMetadata_);
			  }
			  if (((bitField0_ & 0x00200000) == 0x00200000))
			  {
				size += CodedOutputStream.computeMessageSize(22, partitionMetadataResponse_);
			  }
			  if (((bitField0_ & 0x00400000) == 0x00400000))
			  {
				size += CodedOutputStream.computeMessageSize(23, lookupTopic_);
			  }
			  if (((bitField0_ & 0x00800000) == 0x00800000))
			  {
				size += CodedOutputStream.computeMessageSize(24, lookupTopicResponse_);
			  }
			  if (((bitField0_ & 0x01000000) == 0x01000000))
			  {
				size += CodedOutputStream.computeMessageSize(25, consumerStats_);
			  }
			  if (((bitField0_ & 0x02000000) == 0x02000000))
			  {
				size += CodedOutputStream.computeMessageSize(26, consumerStatsResponse_);
			  }
			  if (((bitField0_ & 0x04000000) == 0x04000000))
			  {
				size += CodedOutputStream.computeMessageSize(27, reachedEndOfTopic_);
			  }
			  if (((bitField0_ & 0x08000000) == 0x08000000))
			  {
				size += CodedOutputStream.computeMessageSize(28, seek_);
			  }
			  if (((bitField0_ & 0x10000000) == 0x10000000))
			  {
				size += CodedOutputStream.computeMessageSize(29, getLastMessageId_);
			  }
			  if (((bitField0_ & 0x20000000) == 0x20000000))
			  {
				size += CodedOutputStream.computeMessageSize(30, getLastMessageIdResponse_);
			  }
			  if (((bitField0_ & 0x40000000) == 0x40000000))
			  {
				size += CodedOutputStream.computeMessageSize(31, activeConsumerChange_);
			  }
			  if (((bitField0_ & 0x80000000) == 0x80000000))
			  {
				size += CodedOutputStream.computeMessageSize(32, getTopicsOfNamespace_);
			  }
			  if (((bitField1_ & 0x00000001) == 0x00000001))
			  {
				size += CodedOutputStream.computeMessageSize(33, getTopicsOfNamespaceResponse_);
			  }
			  if (((bitField1_ & 0x00000002) == 0x00000002))
			  {
				size += CodedOutputStream.computeMessageSize(34, getSchema_);
			  }
			  if (((bitField1_ & 0x00000004) == 0x00000004))
			  {
				size += CodedOutputStream.computeMessageSize(35, getSchemaResponse_);
			  }
			  if (((bitField1_ & 0x00000008) == 0x00000008))
			  {
				size += CodedOutputStream.computeMessageSize(36, authChallenge_);
			  }
			  if (((bitField1_ & 0x00000010) == 0x00000010))
			  {
				size += CodedOutputStream.computeMessageSize(37, authResponse_);
			  }
			  if (((bitField1_ & 0x00000020) == 0x00000020))
			  {
				size += CodedOutputStream.computeMessageSize(38, ackResponse_);
			  }
			  if (((bitField1_ & 0x00000040) == 0x00000040))
			  {
				size += CodedOutputStream.computeMessageSize(39, getOrCreateSchema_);
			  }
			  if (((bitField1_ & 0x00000080) == 0x00000080))
			  {
				size += CodedOutputStream.computeMessageSize(40, getOrCreateSchemaResponse_);
			  }
			  if (((bitField1_ & 0x00000100) == 0x00000100))
			  {
				size += CodedOutputStream.computeMessageSize(50, newTxn_);
			  }
			  if (((bitField1_ & 0x00000200) == 0x00000200))
			  {
				size += CodedOutputStream.computeMessageSize(51, newTxnResponse_);
			  }
			  if (((bitField1_ & 0x00000400) == 0x00000400))
			  {
				size += CodedOutputStream.computeMessageSize(52, addPartitionToTxn_);
			  }
			  if (((bitField1_ & 0x00000800) == 0x00000800))
			  {
				size += CodedOutputStream.computeMessageSize(53, addPartitionToTxnResponse_);
			  }
			  if (((bitField1_ & 0x00001000) == 0x00001000))
			  {
				size += CodedOutputStream.computeMessageSize(54, addSubscriptionToTxn_);
			  }
			  if (((bitField1_ & 0x00002000) == 0x00002000))
			  {
				size += CodedOutputStream.computeMessageSize(55, addSubscriptionToTxnResponse_);
			  }
			  if (((bitField1_ & 0x00004000) == 0x00004000))
			  {
				size += CodedOutputStream.computeMessageSize(56, endTxn_);
			  }
			  if (((bitField1_ & 0x00008000) == 0x00008000))
			  {
				size += CodedOutputStream.computeMessageSize(57, endTxnResponse_);
			  }
			  if (((bitField1_ & 0x00010000) == 0x00010000))
			  {
				size += CodedOutputStream.computeMessageSize(58, endTxnOnPartition_);
			  }
			  if (((bitField1_ & 0x00020000) == 0x00020000))
			  {
				size += CodedOutputStream.computeMessageSize(59, endTxnOnPartitionResponse_);
			  }
			  if (((bitField1_ & 0x00040000) == 0x00040000))
			  {
				size += CodedOutputStream.computeMessageSize(60, endTxnOnSubscription_);
			  }
			  if (((bitField1_ & 0x00080000) == 0x00080000))
			  {
				size += CodedOutputStream.computeMessageSize(61, endTxnOnSubscriptionResponse_);
			  }
			  memoizedSerializedSize = size;
			  return size;
			}
		}

		internal const long serialVersionUID = 0L;
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: @java.lang.Override protected java.lang.Object writeReplace() throws java.io.ObjectStreamException
		protected internal override object writeReplace()
		{
		  return base.writeReplace();
		}

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseFrom(ByteString data) throws InvalidProtocolBufferException
		public static BaseCommand parseFrom(ByteString data)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static BaseCommand parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
		{
			 throw new Exception("Disabled");
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseFrom(byte[] data) throws InvalidProtocolBufferException
		public static BaseCommand parseFrom(sbyte[] data)
		{
		  return newBuilder().mergeFrom(data).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException
		public static BaseCommand parseFrom(sbyte[] data, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(data, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseFrom(java.io.InputStream input) throws java.io.IOException
		public static BaseCommand parseFrom(Stream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static BaseCommand parseFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException
		public static BaseCommand parseDelimitedFrom(Stream input)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static BaseCommand parseDelimitedFrom(Stream input, ExtensionRegistryLite extensionRegistry)
		{
		  Builder builder = newBuilder();
		  if (builder.mergeDelimitedFrom(input, extensionRegistry))
		  {
			return builder.buildParsed();
		  }
		  else
		  {
			return null;
		  }
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseFrom(CodedInputStream input) throws java.io.IOException
		public static BaseCommand parseFrom(CodedInputStream input)
		{
		  return newBuilder().mergeFrom(input).buildParsed();
		}
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public static BaseCommand parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		public static BaseCommand parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		{
		  return newBuilder().mergeFrom(input, extensionRegistry).buildParsed();
		}

		public static Builder newBuilder()
		{
			return Builder.create();
		}
		public Builder newBuilderForType()
		{
			return newBuilder();
		}
		public static Builder newBuilder(BaseCommand prototype)
		{
		  return newBuilder().mergeFrom(prototype);
		}
		public Builder toBuilder()
		{
			return newBuilder(this);
		}

		public sealed class Builder : GeneratedMessageLite.Builder<BaseCommand, Builder>, BaseCommandOrBuilder, ByteBufCodedInputStream.ByteBufMessageBuilder
		{
		  // Construct using BaseCommand.newBuilder()
		  internal readonly io.netty.util.Recycler.Handle handle;
		  internal Builder(io.netty.util.Recycler.Handle handle)
		  {
			this.handle = handle;
			maybeForceBuilderInitialization();
		  }
		  internal static readonly io.netty.util.Recycler<Builder> RECYCLER = new RecyclerAnonymousInnerClass();

		  private class RecyclerAnonymousInnerClass : io.netty.util.Recycler<Builder>
		  {
			  protected internal Builder newObject(io.netty.util.Recycler.Handle handle)
			  {
					return new Builder(handle);
			  }
		  }

		   public void recycle()
		   {
					clear();
					if (handle != null)
					{
						RECYCLER.recycle(this, handle);
					}
		   }

		  internal void maybeForceBuilderInitialization()
		  {
		  }
		  internal static Builder create()
		  {
			return RECYCLER.get();
		  }

		  public Builder clear()
		  {
			base.clear();
			type_ = BaseCommand.Type.CONNECT;
			bitField0_ = (bitField0_ & ~0x00000001);
			connect_ = CommandConnect.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000002);
			connected_ = CommandConnected.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000004);
			subscribe_ = CommandSubscribe.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000008);
			producer_ = CommandProducer.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000010);
			send_ = CommandSend.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000020);
			sendReceipt_ = CommandSendReceipt.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000040);
			sendError_ = CommandSendError.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000080);
			message_ = CommandMessage.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000100);
			ack_ = CommandAck.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000200);
			flow_ = CommandFlow.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000400);
			unsubscribe_ = CommandUnsubscribe.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00000800);
			success_ = CommandSuccess.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00001000);
			error_ = CommandError.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00002000);
			closeProducer_ = CommandCloseProducer.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00004000);
			closeConsumer_ = CommandCloseConsumer.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00008000);
			producerSuccess_ = CommandProducerSuccess.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00010000);
			ping_ = CommandPing.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00020000);
			pong_ = CommandPong.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00040000);
			redeliverUnacknowledgedMessages_ = CommandRedeliverUnacknowledgedMessages.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00080000);
			partitionMetadata_ = CommandPartitionedTopicMetadata.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00100000);
			partitionMetadataResponse_ = CommandPartitionedTopicMetadataResponse.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00200000);
			lookupTopic_ = CommandLookupTopic.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00400000);
			lookupTopicResponse_ = CommandLookupTopicResponse.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x00800000);
			consumerStats_ = CommandConsumerStats.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x01000000);
			consumerStatsResponse_ = CommandConsumerStatsResponse.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x02000000);
			reachedEndOfTopic_ = CommandReachedEndOfTopic.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x04000000);
			seek_ = CommandSeek.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x08000000);
			getLastMessageId_ = CommandGetLastMessageId.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x10000000);
			getLastMessageIdResponse_ = CommandGetLastMessageIdResponse.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x20000000);
			activeConsumerChange_ = CommandActiveConsumerChange.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x40000000);
			getTopicsOfNamespace_ = CommandGetTopicsOfNamespace.DefaultInstance;
			bitField0_ = (bitField0_ & ~0x80000000);
			getTopicsOfNamespaceResponse_ = CommandGetTopicsOfNamespaceResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000001);
			getSchema_ = CommandGetSchema.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000002);
			getSchemaResponse_ = CommandGetSchemaResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000004);
			authChallenge_ = CommandAuthChallenge.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000008);
			authResponse_ = CommandAuthResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000010);
			ackResponse_ = CommandAckResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000020);
			getOrCreateSchema_ = CommandGetOrCreateSchema.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000040);
			getOrCreateSchemaResponse_ = CommandGetOrCreateSchemaResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000080);
			newTxn_ = CommandNewTxn.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000100);
			newTxnResponse_ = CommandNewTxnResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000200);
			addPartitionToTxn_ = CommandAddPartitionToTxn.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000400);
			addPartitionToTxnResponse_ = CommandAddPartitionToTxnResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00000800);
			addSubscriptionToTxn_ = CommandAddSubscriptionToTxn.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00001000);
			addSubscriptionToTxnResponse_ = CommandAddSubscriptionToTxnResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00002000);
			endTxn_ = CommandEndTxn.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00004000);
			endTxnResponse_ = CommandEndTxnResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00008000);
			endTxnOnPartition_ = CommandEndTxnOnPartition.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00010000);
			endTxnOnPartitionResponse_ = CommandEndTxnOnPartitionResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00020000);
			endTxnOnSubscription_ = CommandEndTxnOnSubscription.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00040000);
			endTxnOnSubscriptionResponse_ = CommandEndTxnOnSubscriptionResponse.DefaultInstance;
			bitField1_ = (bitField1_ & ~0x00080000);
			return this;
		  }

		  public Builder clone()
		  {
			return create().mergeFrom(buildPartial());
		  }

		  public BaseCommand DefaultInstanceForType
		  {
			  get
			  {
				return BaseCommand.DefaultInstance;
			  }
		  }

		  public BaseCommand build()
		  {
			BaseCommand result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result);
			}
			return result;
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: private BaseCommand buildParsed() throws InvalidProtocolBufferException
		  internal BaseCommand buildParsed()
		  {
			BaseCommand result = buildPartial();
			if (!result.Initialized)
			{
			  throw newUninitializedMessageException(result).asInvalidProtocolBufferException();
			}
			return result;
		  }

		  public BaseCommand buildPartial()
		  {
			BaseCommand result = BaseCommand.RECYCLER.get();
			int from_bitField0_ = bitField0_;
			int from_bitField1_ = bitField1_;
			int to_bitField0_ = 0;
			int to_bitField1_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001))
			{
			  to_bitField0_ |= 0x00000001;
			}
			result.type_ = type_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002))
			{
			  to_bitField0_ |= 0x00000002;
			}
			result.connect_ = connect_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004))
			{
			  to_bitField0_ |= 0x00000004;
			}
			result.connected_ = connected_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008))
			{
			  to_bitField0_ |= 0x00000008;
			}
			result.subscribe_ = subscribe_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010))
			{
			  to_bitField0_ |= 0x00000010;
			}
			result.producer_ = producer_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020))
			{
			  to_bitField0_ |= 0x00000020;
			}
			result.send_ = send_;
			if (((from_bitField0_ & 0x00000040) == 0x00000040))
			{
			  to_bitField0_ |= 0x00000040;
			}
			result.sendReceipt_ = sendReceipt_;
			if (((from_bitField0_ & 0x00000080) == 0x00000080))
			{
			  to_bitField0_ |= 0x00000080;
			}
			result.sendError_ = sendError_;
			if (((from_bitField0_ & 0x00000100) == 0x00000100))
			{
			  to_bitField0_ |= 0x00000100;
			}
			result.message_ = message_;
			if (((from_bitField0_ & 0x00000200) == 0x00000200))
			{
			  to_bitField0_ |= 0x00000200;
			}
			result.ack_ = ack_;
			if (((from_bitField0_ & 0x00000400) == 0x00000400))
			{
			  to_bitField0_ |= 0x00000400;
			}
			result.flow_ = flow_;
			if (((from_bitField0_ & 0x00000800) == 0x00000800))
			{
			  to_bitField0_ |= 0x00000800;
			}
			result.unsubscribe_ = unsubscribe_;
			if (((from_bitField0_ & 0x00001000) == 0x00001000))
			{
			  to_bitField0_ |= 0x00001000;
			}
			result.success_ = success_;
			if (((from_bitField0_ & 0x00002000) == 0x00002000))
			{
			  to_bitField0_ |= 0x00002000;
			}
			result.error_ = error_;
			if (((from_bitField0_ & 0x00004000) == 0x00004000))
			{
			  to_bitField0_ |= 0x00004000;
			}
			result.closeProducer_ = closeProducer_;
			if (((from_bitField0_ & 0x00008000) == 0x00008000))
			{
			  to_bitField0_ |= 0x00008000;
			}
			result.closeConsumer_ = closeConsumer_;
			if (((from_bitField0_ & 0x00010000) == 0x00010000))
			{
			  to_bitField0_ |= 0x00010000;
			}
			result.producerSuccess_ = producerSuccess_;
			if (((from_bitField0_ & 0x00020000) == 0x00020000))
			{
			  to_bitField0_ |= 0x00020000;
			}
			result.ping_ = ping_;
			if (((from_bitField0_ & 0x00040000) == 0x00040000))
			{
			  to_bitField0_ |= 0x00040000;
			}
			result.pong_ = pong_;
			if (((from_bitField0_ & 0x00080000) == 0x00080000))
			{
			  to_bitField0_ |= 0x00080000;
			}
			result.redeliverUnacknowledgedMessages_ = redeliverUnacknowledgedMessages_;
			if (((from_bitField0_ & 0x00100000) == 0x00100000))
			{
			  to_bitField0_ |= 0x00100000;
			}
			result.partitionMetadata_ = partitionMetadata_;
			if (((from_bitField0_ & 0x00200000) == 0x00200000))
			{
			  to_bitField0_ |= 0x00200000;
			}
			result.partitionMetadataResponse_ = partitionMetadataResponse_;
			if (((from_bitField0_ & 0x00400000) == 0x00400000))
			{
			  to_bitField0_ |= 0x00400000;
			}
			result.lookupTopic_ = lookupTopic_;
			if (((from_bitField0_ & 0x00800000) == 0x00800000))
			{
			  to_bitField0_ |= 0x00800000;
			}
			result.lookupTopicResponse_ = lookupTopicResponse_;
			if (((from_bitField0_ & 0x01000000) == 0x01000000))
			{
			  to_bitField0_ |= 0x01000000;
			}
			result.consumerStats_ = consumerStats_;
			if (((from_bitField0_ & 0x02000000) == 0x02000000))
			{
			  to_bitField0_ |= 0x02000000;
			}
			result.consumerStatsResponse_ = consumerStatsResponse_;
			if (((from_bitField0_ & 0x04000000) == 0x04000000))
			{
			  to_bitField0_ |= 0x04000000;
			}
			result.reachedEndOfTopic_ = reachedEndOfTopic_;
			if (((from_bitField0_ & 0x08000000) == 0x08000000))
			{
			  to_bitField0_ |= 0x08000000;
			}
			result.seek_ = seek_;
			if (((from_bitField0_ & 0x10000000) == 0x10000000))
			{
			  to_bitField0_ |= 0x10000000;
			}
			result.getLastMessageId_ = getLastMessageId_;
			if (((from_bitField0_ & 0x20000000) == 0x20000000))
			{
			  to_bitField0_ |= 0x20000000;
			}
			result.getLastMessageIdResponse_ = getLastMessageIdResponse_;
			if (((from_bitField0_ & 0x40000000) == 0x40000000))
			{
			  to_bitField0_ |= 0x40000000;
			}
			result.activeConsumerChange_ = activeConsumerChange_;
			if (((from_bitField0_ & 0x80000000) == 0x80000000))
			{
			  to_bitField0_ |= unchecked((int)0x80000000);
			}
			result.getTopicsOfNamespace_ = getTopicsOfNamespace_;
			if (((from_bitField1_ & 0x00000001) == 0x00000001))
			{
			  to_bitField1_ |= 0x00000001;
			}
			result.getTopicsOfNamespaceResponse_ = getTopicsOfNamespaceResponse_;
			if (((from_bitField1_ & 0x00000002) == 0x00000002))
			{
			  to_bitField1_ |= 0x00000002;
			}
			result.getSchema_ = getSchema_;
			if (((from_bitField1_ & 0x00000004) == 0x00000004))
			{
			  to_bitField1_ |= 0x00000004;
			}
			result.getSchemaResponse_ = getSchemaResponse_;
			if (((from_bitField1_ & 0x00000008) == 0x00000008))
			{
			  to_bitField1_ |= 0x00000008;
			}
			result.authChallenge_ = authChallenge_;
			if (((from_bitField1_ & 0x00000010) == 0x00000010))
			{
			  to_bitField1_ |= 0x00000010;
			}
			result.authResponse_ = authResponse_;
			if (((from_bitField1_ & 0x00000020) == 0x00000020))
			{
			  to_bitField1_ |= 0x00000020;
			}
			result.ackResponse_ = ackResponse_;
			if (((from_bitField1_ & 0x00000040) == 0x00000040))
			{
			  to_bitField1_ |= 0x00000040;
			}
			result.getOrCreateSchema_ = getOrCreateSchema_;
			if (((from_bitField1_ & 0x00000080) == 0x00000080))
			{
			  to_bitField1_ |= 0x00000080;
			}
			result.getOrCreateSchemaResponse_ = getOrCreateSchemaResponse_;
			if (((from_bitField1_ & 0x00000100) == 0x00000100))
			{
			  to_bitField1_ |= 0x00000100;
			}
			result.newTxn_ = newTxn_;
			if (((from_bitField1_ & 0x00000200) == 0x00000200))
			{
			  to_bitField1_ |= 0x00000200;
			}
			result.newTxnResponse_ = newTxnResponse_;
			if (((from_bitField1_ & 0x00000400) == 0x00000400))
			{
			  to_bitField1_ |= 0x00000400;
			}
			result.addPartitionToTxn_ = addPartitionToTxn_;
			if (((from_bitField1_ & 0x00000800) == 0x00000800))
			{
			  to_bitField1_ |= 0x00000800;
			}
			result.addPartitionToTxnResponse_ = addPartitionToTxnResponse_;
			if (((from_bitField1_ & 0x00001000) == 0x00001000))
			{
			  to_bitField1_ |= 0x00001000;
			}
			result.addSubscriptionToTxn_ = addSubscriptionToTxn_;
			if (((from_bitField1_ & 0x00002000) == 0x00002000))
			{
			  to_bitField1_ |= 0x00002000;
			}
			result.addSubscriptionToTxnResponse_ = addSubscriptionToTxnResponse_;
			if (((from_bitField1_ & 0x00004000) == 0x00004000))
			{
			  to_bitField1_ |= 0x00004000;
			}
			result.endTxn_ = endTxn_;
			if (((from_bitField1_ & 0x00008000) == 0x00008000))
			{
			  to_bitField1_ |= 0x00008000;
			}
			result.endTxnResponse_ = endTxnResponse_;
			if (((from_bitField1_ & 0x00010000) == 0x00010000))
			{
			  to_bitField1_ |= 0x00010000;
			}
			result.endTxnOnPartition_ = endTxnOnPartition_;
			if (((from_bitField1_ & 0x00020000) == 0x00020000))
			{
			  to_bitField1_ |= 0x00020000;
			}
			result.endTxnOnPartitionResponse_ = endTxnOnPartitionResponse_;
			if (((from_bitField1_ & 0x00040000) == 0x00040000))
			{
			  to_bitField1_ |= 0x00040000;
			}
			result.endTxnOnSubscription_ = endTxnOnSubscription_;
			if (((from_bitField1_ & 0x00080000) == 0x00080000))
			{
			  to_bitField1_ |= 0x00080000;
			}
			result.endTxnOnSubscriptionResponse_ = endTxnOnSubscriptionResponse_;
			result.bitField0_ = to_bitField0_;
			result.bitField1_ = to_bitField1_;
			return result;
		  }

		  public Builder mergeFrom(BaseCommand other)
		  {
			if (other == BaseCommand.DefaultInstance)
			{
				return this;
			}
			if (other.hasType())
			{
			  Type = other.getType();
			}
			if (other.hasConnect())
			{
			  mergeConnect(other.Connect);
			}
			if (other.hasConnected())
			{
			  mergeConnected(other.Connected);
			}
			if (other.hasSubscribe())
			{
			  mergeSubscribe(other.Subscribe);
			}
			if (other.hasProducer())
			{
			  mergeProducer(other.Producer);
			}
			if (other.hasSend())
			{
			  mergeSend(other.Send);
			}
			if (other.hasSendReceipt())
			{
			  mergeSendReceipt(other.SendReceipt);
			}
			if (other.hasSendError())
			{
			  mergeSendError(other.SendError);
			}
			if (other.hasMessage())
			{
			  mergeMessage(other.Message);
			}
			if (other.hasAck())
			{
			  mergeAck(other.Ack);
			}
			if (other.hasFlow())
			{
			  mergeFlow(other.Flow);
			}
			if (other.hasUnsubscribe())
			{
			  mergeUnsubscribe(other.Unsubscribe);
			}
			if (other.hasSuccess())
			{
			  mergeSuccess(other.Success);
			}
			if (other.hasError())
			{
			  mergeError(other.Error);
			}
			if (other.hasCloseProducer())
			{
			  mergeCloseProducer(other.CloseProducer);
			}
			if (other.hasCloseConsumer())
			{
			  mergeCloseConsumer(other.CloseConsumer);
			}
			if (other.hasProducerSuccess())
			{
			  mergeProducerSuccess(other.ProducerSuccess);
			}
			if (other.hasPing())
			{
			  mergePing(other.Ping);
			}
			if (other.hasPong())
			{
			  mergePong(other.Pong);
			}
			if (other.hasRedeliverUnacknowledgedMessages())
			{
			  mergeRedeliverUnacknowledgedMessages(other.RedeliverUnacknowledgedMessages);
			}
			if (other.hasPartitionMetadata())
			{
			  mergePartitionMetadata(other.PartitionMetadata);
			}
			if (other.hasPartitionMetadataResponse())
			{
			  mergePartitionMetadataResponse(other.PartitionMetadataResponse);
			}
			if (other.hasLookupTopic())
			{
			  mergeLookupTopic(other.LookupTopic);
			}
			if (other.hasLookupTopicResponse())
			{
			  mergeLookupTopicResponse(other.LookupTopicResponse);
			}
			if (other.hasConsumerStats())
			{
			  mergeConsumerStats(other.ConsumerStats);
			}
			if (other.hasConsumerStatsResponse())
			{
			  mergeConsumerStatsResponse(other.ConsumerStatsResponse);
			}
			if (other.hasReachedEndOfTopic())
			{
			  mergeReachedEndOfTopic(other.ReachedEndOfTopic);
			}
			if (other.hasSeek())
			{
			  mergeSeek(other.Seek);
			}
			if (other.hasGetLastMessageId())
			{
			  mergeGetLastMessageId(other.GetLastMessageId);
			}
			if (other.hasGetLastMessageIdResponse())
			{
			  mergeGetLastMessageIdResponse(other.GetLastMessageIdResponse);
			}
			if (other.hasActiveConsumerChange())
			{
			  mergeActiveConsumerChange(other.ActiveConsumerChange);
			}
			if (other.hasGetTopicsOfNamespace())
			{
			  mergeGetTopicsOfNamespace(other.GetTopicsOfNamespace);
			}
			if (other.hasGetTopicsOfNamespaceResponse())
			{
			  mergeGetTopicsOfNamespaceResponse(other.GetTopicsOfNamespaceResponse);
			}
			if (other.hasGetSchema())
			{
			  mergeGetSchema(other.GetSchema);
			}
			if (other.hasGetSchemaResponse())
			{
			  mergeGetSchemaResponse(other.GetSchemaResponse);
			}
			if (other.hasAuthChallenge())
			{
			  mergeAuthChallenge(other.AuthChallenge);
			}
			if (other.hasAuthResponse())
			{
			  mergeAuthResponse(other.AuthResponse);
			}
			if (other.hasAckResponse())
			{
			  mergeAckResponse(other.AckResponse);
			}
			if (other.hasGetOrCreateSchema())
			{
			  mergeGetOrCreateSchema(other.GetOrCreateSchema);
			}
			if (other.hasGetOrCreateSchemaResponse())
			{
			  mergeGetOrCreateSchemaResponse(other.GetOrCreateSchemaResponse);
			}
			if (other.hasNewTxn())
			{
			  mergeNewTxn(other.NewTxn);
			}
			if (other.hasNewTxnResponse())
			{
			  mergeNewTxnResponse(other.NewTxnResponse);
			}
			if (other.hasAddPartitionToTxn())
			{
			  mergeAddPartitionToTxn(other.AddPartitionToTxn);
			}
			if (other.hasAddPartitionToTxnResponse())
			{
			  mergeAddPartitionToTxnResponse(other.AddPartitionToTxnResponse);
			}
			if (other.hasAddSubscriptionToTxn())
			{
			  mergeAddSubscriptionToTxn(other.AddSubscriptionToTxn);
			}
			if (other.hasAddSubscriptionToTxnResponse())
			{
			  mergeAddSubscriptionToTxnResponse(other.AddSubscriptionToTxnResponse);
			}
			if (other.hasEndTxn())
			{
			  mergeEndTxn(other.EndTxn);
			}
			if (other.hasEndTxnResponse())
			{
			  mergeEndTxnResponse(other.EndTxnResponse);
			}
			if (other.hasEndTxnOnPartition())
			{
			  mergeEndTxnOnPartition(other.EndTxnOnPartition);
			}
			if (other.hasEndTxnOnPartitionResponse())
			{
			  mergeEndTxnOnPartitionResponse(other.EndTxnOnPartitionResponse);
			}
			if (other.hasEndTxnOnSubscription())
			{
			  mergeEndTxnOnSubscription(other.EndTxnOnSubscription);
			}
			if (other.hasEndTxnOnSubscriptionResponse())
			{
			  mergeEndTxnOnSubscriptionResponse(other.EndTxnOnSubscriptionResponse);
			}
			return this;
		  }

		  public bool Initialized
		  {
			  get
			  {
				if (!hasType())
				{
    
				  return false;
				}
				if (hasConnect())
				{
				  if (!getConnect().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasConnected())
				{
				  if (!getConnected().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasSubscribe())
				{
				  if (!getSubscribe().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasProducer())
				{
				  if (!getProducer().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasSend())
				{
				  if (!getSend().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasSendReceipt())
				{
				  if (!getSendReceipt().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasSendError())
				{
				  if (!getSendError().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasMessage())
				{
				  if (!getMessage().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasAck())
				{
				  if (!getAck().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasFlow())
				{
				  if (!getFlow().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasUnsubscribe())
				{
				  if (!getUnsubscribe().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasSuccess())
				{
				  if (!getSuccess().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasError())
				{
				  if (!getError().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasCloseProducer())
				{
				  if (!getCloseProducer().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasCloseConsumer())
				{
				  if (!getCloseConsumer().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasProducerSuccess())
				{
				  if (!getProducerSuccess().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasRedeliverUnacknowledgedMessages())
				{
				  if (!getRedeliverUnacknowledgedMessages().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasPartitionMetadata())
				{
				  if (!getPartitionMetadata().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasPartitionMetadataResponse())
				{
				  if (!getPartitionMetadataResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasLookupTopic())
				{
				  if (!getLookupTopic().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasLookupTopicResponse())
				{
				  if (!getLookupTopicResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasConsumerStats())
				{
				  if (!getConsumerStats().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasConsumerStatsResponse())
				{
				  if (!getConsumerStatsResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasReachedEndOfTopic())
				{
				  if (!getReachedEndOfTopic().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasSeek())
				{
				  if (!getSeek().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasGetLastMessageId())
				{
				  if (!getGetLastMessageId().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasGetLastMessageIdResponse())
				{
				  if (!getGetLastMessageIdResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasActiveConsumerChange())
				{
				  if (!getActiveConsumerChange().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasGetTopicsOfNamespace())
				{
				  if (!getGetTopicsOfNamespace().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasGetTopicsOfNamespaceResponse())
				{
				  if (!getGetTopicsOfNamespaceResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasGetSchema())
				{
				  if (!getGetSchema().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasGetSchemaResponse())
				{
				  if (!getGetSchemaResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasAckResponse())
				{
				  if (!getAckResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasGetOrCreateSchema())
				{
				  if (!getGetOrCreateSchema().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasGetOrCreateSchemaResponse())
				{
				  if (!getGetOrCreateSchemaResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasNewTxn())
				{
				  if (!getNewTxn().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasNewTxnResponse())
				{
				  if (!getNewTxnResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasAddPartitionToTxn())
				{
				  if (!getAddPartitionToTxn().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasAddPartitionToTxnResponse())
				{
				  if (!getAddPartitionToTxnResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasAddSubscriptionToTxn())
				{
				  if (!getAddSubscriptionToTxn().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasAddSubscriptionToTxnResponse())
				{
				  if (!getAddSubscriptionToTxnResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasEndTxn())
				{
				  if (!getEndTxn().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasEndTxnResponse())
				{
				  if (!getEndTxnResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasEndTxnOnPartition())
				{
				  if (!getEndTxnOnPartition().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasEndTxnOnPartitionResponse())
				{
				  if (!getEndTxnOnPartitionResponse().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasEndTxnOnSubscription())
				{
				  if (!getEndTxnOnSubscription().Initialized)
				  {
    
					return false;
				  }
				}
				if (hasEndTxnOnSubscriptionResponse())
				{
				  if (!getEndTxnOnSubscriptionResponse().Initialized)
				  {
    
					return false;
				  }
				}
				return true;
			  }
		  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			 throw new java.io.IOException("Merge from CodedInputStream is disabled");
		  }
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException
		  public Builder mergeFrom(ByteBufCodedInputStream input, ExtensionRegistryLite extensionRegistry)
		  {
			while (true)
			{
			  int tag = input.readTag();
			  switch (tag)
			  {
				case 0:

				  return this;
				default:
				{
				  if (!input.skipField(tag))
				  {

					return this;
				  }
				  break;
				}
				case 8:
				{
				  int rawValue = input.readEnum();
				  BaseCommand.Type value = BaseCommand.Type.valueOf(rawValue);
				  if (value != null)
				  {
					bitField0_ |= 0x00000001;
					type_ = value;
				  }
				  break;
				}
				case 18:
				{
				  CommandConnect.Builder subBuilder = CommandConnect.newBuilder();
				  if (hasConnect())
				  {
					subBuilder.mergeFrom(getConnect());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setConnect(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 26:
				{
				  CommandConnected.Builder subBuilder = CommandConnected.newBuilder();
				  if (hasConnected())
				  {
					subBuilder.mergeFrom(getConnected());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setConnected(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 34:
				{
				  CommandSubscribe.Builder subBuilder = CommandSubscribe.newBuilder();
				  if (hasSubscribe())
				  {
					subBuilder.mergeFrom(getSubscribe());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSubscribe(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 42:
				{
				  CommandProducer.Builder subBuilder = CommandProducer.newBuilder();
				  if (hasProducer())
				  {
					subBuilder.mergeFrom(getProducer());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setProducer(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 50:
				{
				  CommandSend.Builder subBuilder = CommandSend.newBuilder();
				  if (hasSend())
				  {
					subBuilder.mergeFrom(getSend());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSend(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 58:
				{
				  CommandSendReceipt.Builder subBuilder = CommandSendReceipt.newBuilder();
				  if (hasSendReceipt())
				  {
					subBuilder.mergeFrom(getSendReceipt());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSendReceipt(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 66:
				{
				  CommandSendError.Builder subBuilder = CommandSendError.newBuilder();
				  if (hasSendError())
				  {
					subBuilder.mergeFrom(getSendError());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSendError(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 74:
				{
				  CommandMessage.Builder subBuilder = CommandMessage.newBuilder();
				  if (hasMessage())
				  {
					subBuilder.mergeFrom(getMessage());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setMessage(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 82:
				{
				  CommandAck.Builder subBuilder = CommandAck.newBuilder();
				  if (hasAck())
				  {
					subBuilder.mergeFrom(getAck());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setAck(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 90:
				{
				  CommandFlow.Builder subBuilder = CommandFlow.newBuilder();
				  if (hasFlow())
				  {
					subBuilder.mergeFrom(getFlow());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setFlow(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 98:
				{
				  CommandUnsubscribe.Builder subBuilder = CommandUnsubscribe.newBuilder();
				  if (hasUnsubscribe())
				  {
					subBuilder.mergeFrom(getUnsubscribe());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setUnsubscribe(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 106:
				{
				  CommandSuccess.Builder subBuilder = CommandSuccess.newBuilder();
				  if (hasSuccess())
				  {
					subBuilder.mergeFrom(getSuccess());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSuccess(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 114:
				{
				  CommandError.Builder subBuilder = CommandError.newBuilder();
				  if (hasError())
				  {
					subBuilder.mergeFrom(getError());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setError(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 122:
				{
				  CommandCloseProducer.Builder subBuilder = CommandCloseProducer.newBuilder();
				  if (hasCloseProducer())
				  {
					subBuilder.mergeFrom(getCloseProducer());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setCloseProducer(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 130:
				{
				  CommandCloseConsumer.Builder subBuilder = CommandCloseConsumer.newBuilder();
				  if (hasCloseConsumer())
				  {
					subBuilder.mergeFrom(getCloseConsumer());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setCloseConsumer(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 138:
				{
				  CommandProducerSuccess.Builder subBuilder = CommandProducerSuccess.newBuilder();
				  if (hasProducerSuccess())
				  {
					subBuilder.mergeFrom(getProducerSuccess());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setProducerSuccess(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 146:
				{
				  CommandPing.Builder subBuilder = CommandPing.newBuilder();
				  if (hasPing())
				  {
					subBuilder.mergeFrom(getPing());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setPing(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 154:
				{
				  CommandPong.Builder subBuilder = CommandPong.newBuilder();
				  if (hasPong())
				  {
					subBuilder.mergeFrom(getPong());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setPong(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 162:
				{
				  CommandRedeliverUnacknowledgedMessages.Builder subBuilder = CommandRedeliverUnacknowledgedMessages.newBuilder();
				  if (hasRedeliverUnacknowledgedMessages())
				  {
					subBuilder.mergeFrom(getRedeliverUnacknowledgedMessages());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setRedeliverUnacknowledgedMessages(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 170:
				{
				  CommandPartitionedTopicMetadata.Builder subBuilder = CommandPartitionedTopicMetadata.newBuilder();
				  if (hasPartitionMetadata())
				  {
					subBuilder.mergeFrom(getPartitionMetadata());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setPartitionMetadata(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 178:
				{
				  CommandPartitionedTopicMetadataResponse.Builder subBuilder = CommandPartitionedTopicMetadataResponse.newBuilder();
				  if (hasPartitionMetadataResponse())
				  {
					subBuilder.mergeFrom(getPartitionMetadataResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setPartitionMetadataResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 186:
				{
				  CommandLookupTopic.Builder subBuilder = CommandLookupTopic.newBuilder();
				  if (hasLookupTopic())
				  {
					subBuilder.mergeFrom(getLookupTopic());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setLookupTopic(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 194:
				{
				  CommandLookupTopicResponse.Builder subBuilder = CommandLookupTopicResponse.newBuilder();
				  if (hasLookupTopicResponse())
				  {
					subBuilder.mergeFrom(getLookupTopicResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setLookupTopicResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 202:
				{
				  CommandConsumerStats.Builder subBuilder = CommandConsumerStats.newBuilder();
				  if (hasConsumerStats())
				  {
					subBuilder.mergeFrom(getConsumerStats());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setConsumerStats(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 210:
				{
				  CommandConsumerStatsResponse.Builder subBuilder = CommandConsumerStatsResponse.newBuilder();
				  if (hasConsumerStatsResponse())
				  {
					subBuilder.mergeFrom(getConsumerStatsResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setConsumerStatsResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 218:
				{
				  CommandReachedEndOfTopic.Builder subBuilder = CommandReachedEndOfTopic.newBuilder();
				  if (hasReachedEndOfTopic())
				  {
					subBuilder.mergeFrom(getReachedEndOfTopic());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setReachedEndOfTopic(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 226:
				{
				  CommandSeek.Builder subBuilder = CommandSeek.newBuilder();
				  if (hasSeek())
				  {
					subBuilder.mergeFrom(getSeek());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setSeek(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 234:
				{
				  CommandGetLastMessageId.Builder subBuilder = CommandGetLastMessageId.newBuilder();
				  if (hasGetLastMessageId())
				  {
					subBuilder.mergeFrom(getGetLastMessageId());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setGetLastMessageId(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 242:
				{
				  CommandGetLastMessageIdResponse.Builder subBuilder = CommandGetLastMessageIdResponse.newBuilder();
				  if (hasGetLastMessageIdResponse())
				  {
					subBuilder.mergeFrom(getGetLastMessageIdResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setGetLastMessageIdResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 250:
				{
				  CommandActiveConsumerChange.Builder subBuilder = CommandActiveConsumerChange.newBuilder();
				  if (hasActiveConsumerChange())
				  {
					subBuilder.mergeFrom(getActiveConsumerChange());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setActiveConsumerChange(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 258:
				{
				  CommandGetTopicsOfNamespace.Builder subBuilder = CommandGetTopicsOfNamespace.newBuilder();
				  if (hasGetTopicsOfNamespace())
				  {
					subBuilder.mergeFrom(getGetTopicsOfNamespace());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setGetTopicsOfNamespace(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 266:
				{
				  CommandGetTopicsOfNamespaceResponse.Builder subBuilder = CommandGetTopicsOfNamespaceResponse.newBuilder();
				  if (hasGetTopicsOfNamespaceResponse())
				  {
					subBuilder.mergeFrom(getGetTopicsOfNamespaceResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setGetTopicsOfNamespaceResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 274:
				{
				  CommandGetSchema.Builder subBuilder = CommandGetSchema.newBuilder();
				  if (hasGetSchema())
				  {
					subBuilder.mergeFrom(getGetSchema());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setGetSchema(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 282:
				{
				  CommandGetSchemaResponse.Builder subBuilder = CommandGetSchemaResponse.newBuilder();
				  if (hasGetSchemaResponse())
				  {
					subBuilder.mergeFrom(getGetSchemaResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setGetSchemaResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 290:
				{
				  CommandAuthChallenge.Builder subBuilder = CommandAuthChallenge.newBuilder();
				  if (hasAuthChallenge())
				  {
					subBuilder.mergeFrom(getAuthChallenge());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setAuthChallenge(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 298:
				{
				  CommandAuthResponse.Builder subBuilder = CommandAuthResponse.newBuilder();
				  if (hasAuthResponse())
				  {
					subBuilder.mergeFrom(getAuthResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setAuthResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 306:
				{
				  CommandAckResponse.Builder subBuilder = CommandAckResponse.newBuilder();
				  if (hasAckResponse())
				  {
					subBuilder.mergeFrom(getAckResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setAckResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 314:
				{
				  CommandGetOrCreateSchema.Builder subBuilder = CommandGetOrCreateSchema.newBuilder();
				  if (hasGetOrCreateSchema())
				  {
					subBuilder.mergeFrom(getGetOrCreateSchema());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setGetOrCreateSchema(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 322:
				{
				  CommandGetOrCreateSchemaResponse.Builder subBuilder = CommandGetOrCreateSchemaResponse.newBuilder();
				  if (hasGetOrCreateSchemaResponse())
				  {
					subBuilder.mergeFrom(getGetOrCreateSchemaResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setGetOrCreateSchemaResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 402:
				{
				  CommandNewTxn.Builder subBuilder = CommandNewTxn.newBuilder();
				  if (hasNewTxn())
				  {
					subBuilder.mergeFrom(getNewTxn());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setNewTxn(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 410:
				{
				  CommandNewTxnResponse.Builder subBuilder = CommandNewTxnResponse.newBuilder();
				  if (hasNewTxnResponse())
				  {
					subBuilder.mergeFrom(getNewTxnResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setNewTxnResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 418:
				{
				  CommandAddPartitionToTxn.Builder subBuilder = CommandAddPartitionToTxn.newBuilder();
				  if (hasAddPartitionToTxn())
				  {
					subBuilder.mergeFrom(getAddPartitionToTxn());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setAddPartitionToTxn(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 426:
				{
				  CommandAddPartitionToTxnResponse.Builder subBuilder = CommandAddPartitionToTxnResponse.newBuilder();
				  if (hasAddPartitionToTxnResponse())
				  {
					subBuilder.mergeFrom(getAddPartitionToTxnResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setAddPartitionToTxnResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 434:
				{
				  CommandAddSubscriptionToTxn.Builder subBuilder = CommandAddSubscriptionToTxn.newBuilder();
				  if (hasAddSubscriptionToTxn())
				  {
					subBuilder.mergeFrom(getAddSubscriptionToTxn());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setAddSubscriptionToTxn(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 442:
				{
				  CommandAddSubscriptionToTxnResponse.Builder subBuilder = CommandAddSubscriptionToTxnResponse.newBuilder();
				  if (hasAddSubscriptionToTxnResponse())
				  {
					subBuilder.mergeFrom(getAddSubscriptionToTxnResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setAddSubscriptionToTxnResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 450:
				{
				  CommandEndTxn.Builder subBuilder = CommandEndTxn.newBuilder();
				  if (hasEndTxn())
				  {
					subBuilder.mergeFrom(getEndTxn());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setEndTxn(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 458:
				{
				  CommandEndTxnResponse.Builder subBuilder = CommandEndTxnResponse.newBuilder();
				  if (hasEndTxnResponse())
				  {
					subBuilder.mergeFrom(getEndTxnResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setEndTxnResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 466:
				{
				  CommandEndTxnOnPartition.Builder subBuilder = CommandEndTxnOnPartition.newBuilder();
				  if (hasEndTxnOnPartition())
				  {
					subBuilder.mergeFrom(getEndTxnOnPartition());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setEndTxnOnPartition(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 474:
				{
				  CommandEndTxnOnPartitionResponse.Builder subBuilder = CommandEndTxnOnPartitionResponse.newBuilder();
				  if (hasEndTxnOnPartitionResponse())
				  {
					subBuilder.mergeFrom(getEndTxnOnPartitionResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setEndTxnOnPartitionResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 482:
				{
				  CommandEndTxnOnSubscription.Builder subBuilder = CommandEndTxnOnSubscription.newBuilder();
				  if (hasEndTxnOnSubscription())
				  {
					subBuilder.mergeFrom(getEndTxnOnSubscription());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setEndTxnOnSubscription(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
				case 490:
				{
				  CommandEndTxnOnSubscriptionResponse.Builder subBuilder = CommandEndTxnOnSubscriptionResponse.newBuilder();
				  if (hasEndTxnOnSubscriptionResponse())
				  {
					subBuilder.mergeFrom(getEndTxnOnSubscriptionResponse());
				  }
				  input.readMessage(subBuilder, extensionRegistry);
				  setEndTxnOnSubscriptionResponse(subBuilder.buildPartial());
				  subBuilder.recycle();
				  break;
				}
			  }
			}
		  }

		  internal int bitField0_;
		  internal int bitField1_;

		  // required .pulsar.proto.BaseCommand.Type type = 1;
		  internal BaseCommand.Type type_ = BaseCommand.Type.CONNECT;
		  public bool hasType()
		  {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		  }
		  public BaseCommand.Type Type
		  {
			  get
			  {
				return type_;
			  }
		  }
		  public Builder setType(BaseCommand.Type value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			bitField0_ |= 0x00000001;
			type_ = value;

			return this;
		  }
		  public Builder clearType()
		  {
			bitField0_ = (bitField0_ & ~0x00000001);
			type_ = BaseCommand.Type.CONNECT;

			return this;
		  }

		  // optional .pulsar.proto.CommandConnect connect = 2;
		  internal CommandConnect connect_ = CommandConnect.DefaultInstance;
		  public bool hasConnect()
		  {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		  }
		  public CommandConnect getConnect()
		  {
			return connect_;
		  }
		  public Builder setConnect(CommandConnect value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			connect_ = value;

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder setConnect(CommandConnect.Builder builderForValue)
		  {
			connect_ = builderForValue.build();

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder mergeConnect(CommandConnect value)
		  {
			if (((bitField0_ & 0x00000002) == 0x00000002) && connect_ != CommandConnect.DefaultInstance)
			{
			  connect_ = CommandConnect.newBuilder(connect_).mergeFrom(value).buildPartial();
			}
			else
			{
			  connect_ = value;
			}

			bitField0_ |= 0x00000002;
			return this;
		  }
		  public Builder clearConnect()
		  {
			connect_ = CommandConnect.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000002);
			return this;
		  }

		  // optional .pulsar.proto.CommandConnected connected = 3;
		  internal CommandConnected connected_ = CommandConnected.DefaultInstance;
		  public bool hasConnected()
		  {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		  }
		  public CommandConnected getConnected()
		  {
			return connected_;
		  }
		  public Builder setConnected(CommandConnected value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			connected_ = value;

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder setConnected(CommandConnected.Builder builderForValue)
		  {
			connected_ = builderForValue.build();

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder mergeConnected(CommandConnected value)
		  {
			if (((bitField0_ & 0x00000004) == 0x00000004) && connected_ != CommandConnected.DefaultInstance)
			{
			  connected_ = CommandConnected.newBuilder(connected_).mergeFrom(value).buildPartial();
			}
			else
			{
			  connected_ = value;
			}

			bitField0_ |= 0x00000004;
			return this;
		  }
		  public Builder clearConnected()
		  {
			connected_ = CommandConnected.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000004);
			return this;
		  }

		  // optional .pulsar.proto.CommandSubscribe subscribe = 4;
		  internal CommandSubscribe subscribe_ = CommandSubscribe.DefaultInstance;
		  public bool hasSubscribe()
		  {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		  }
		  public CommandSubscribe getSubscribe()
		  {
			return subscribe_;
		  }
		  public Builder setSubscribe(CommandSubscribe value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			subscribe_ = value;

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder setSubscribe(CommandSubscribe.Builder builderForValue)
		  {
			subscribe_ = builderForValue.build();

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder mergeSubscribe(CommandSubscribe value)
		  {
			if (((bitField0_ & 0x00000008) == 0x00000008) && subscribe_ != CommandSubscribe.DefaultInstance)
			{
			  subscribe_ = CommandSubscribe.newBuilder(subscribe_).mergeFrom(value).buildPartial();
			}
			else
			{
			  subscribe_ = value;
			}

			bitField0_ |= 0x00000008;
			return this;
		  }
		  public Builder clearSubscribe()
		  {
			subscribe_ = CommandSubscribe.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		  }

		  // optional .pulsar.proto.CommandProducer producer = 5;
		  internal CommandProducer producer_ = CommandProducer.DefaultInstance;
		  public bool hasProducer()
		  {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		  }
		  public CommandProducer getProducer()
		  {
			return producer_;
		  }
		  public Builder setProducer(CommandProducer value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			producer_ = value;

			bitField0_ |= 0x00000010;
			return this;
		  }
		  public Builder setProducer(CommandProducer.Builder builderForValue)
		  {
			producer_ = builderForValue.build();

			bitField0_ |= 0x00000010;
			return this;
		  }
		  public Builder mergeProducer(CommandProducer value)
		  {
			if (((bitField0_ & 0x00000010) == 0x00000010) && producer_ != CommandProducer.DefaultInstance)
			{
			  producer_ = CommandProducer.newBuilder(producer_).mergeFrom(value).buildPartial();
			}
			else
			{
			  producer_ = value;
			}

			bitField0_ |= 0x00000010;
			return this;
		  }
		  public Builder clearProducer()
		  {
			producer_ = CommandProducer.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000010);
			return this;
		  }

		  // optional .pulsar.proto.CommandSend send = 6;
		  internal CommandSend send_ = CommandSend.DefaultInstance;
		  public bool hasSend()
		  {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		  }
		  public CommandSend getSend()
		  {
			return send_;
		  }
		  public Builder setSend(CommandSend value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			send_ = value;

			bitField0_ |= 0x00000020;
			return this;
		  }
		  public Builder setSend(CommandSend.Builder builderForValue)
		  {
			send_ = builderForValue.build();

			bitField0_ |= 0x00000020;
			return this;
		  }
		  public Builder mergeSend(CommandSend value)
		  {
			if (((bitField0_ & 0x00000020) == 0x00000020) && send_ != CommandSend.DefaultInstance)
			{
			  send_ = CommandSend.newBuilder(send_).mergeFrom(value).buildPartial();
			}
			else
			{
			  send_ = value;
			}

			bitField0_ |= 0x00000020;
			return this;
		  }
		  public Builder clearSend()
		  {
			send_ = CommandSend.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000020);
			return this;
		  }

		  // optional .pulsar.proto.CommandSendReceipt send_receipt = 7;
		  internal CommandSendReceipt sendReceipt_ = CommandSendReceipt.DefaultInstance;
		  public bool hasSendReceipt()
		  {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		  }
		  public CommandSendReceipt getSendReceipt()
		  {
			return sendReceipt_;
		  }
		  public Builder setSendReceipt(CommandSendReceipt value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			sendReceipt_ = value;

			bitField0_ |= 0x00000040;
			return this;
		  }
		  public Builder setSendReceipt(CommandSendReceipt.Builder builderForValue)
		  {
			sendReceipt_ = builderForValue.build();

			bitField0_ |= 0x00000040;
			return this;
		  }
		  public Builder mergeSendReceipt(CommandSendReceipt value)
		  {
			if (((bitField0_ & 0x00000040) == 0x00000040) && sendReceipt_ != CommandSendReceipt.DefaultInstance)
			{
			  sendReceipt_ = CommandSendReceipt.newBuilder(sendReceipt_).mergeFrom(value).buildPartial();
			}
			else
			{
			  sendReceipt_ = value;
			}

			bitField0_ |= 0x00000040;
			return this;
		  }
		  public Builder clearSendReceipt()
		  {
			sendReceipt_ = CommandSendReceipt.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000040);
			return this;
		  }

		  // optional .pulsar.proto.CommandSendError send_error = 8;
		  internal CommandSendError sendError_ = CommandSendError.DefaultInstance;
		  public bool hasSendError()
		  {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		  }
		  public CommandSendError getSendError()
		  {
			return sendError_;
		  }
		  public Builder setSendError(CommandSendError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			sendError_ = value;

			bitField0_ |= 0x00000080;
			return this;
		  }
		  public Builder setSendError(CommandSendError.Builder builderForValue)
		  {
			sendError_ = builderForValue.build();

			bitField0_ |= 0x00000080;
			return this;
		  }
		  public Builder mergeSendError(CommandSendError value)
		  {
			if (((bitField0_ & 0x00000080) == 0x00000080) && sendError_ != CommandSendError.DefaultInstance)
			{
			  sendError_ = CommandSendError.newBuilder(sendError_).mergeFrom(value).buildPartial();
			}
			else
			{
			  sendError_ = value;
			}

			bitField0_ |= 0x00000080;
			return this;
		  }
		  public Builder clearSendError()
		  {
			sendError_ = CommandSendError.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000080);
			return this;
		  }

		  // optional .pulsar.proto.CommandMessage message = 9;
		  internal CommandMessage message_ = CommandMessage.DefaultInstance;
		  public bool hasMessage()
		  {
			return ((bitField0_ & 0x00000100) == 0x00000100);
		  }
		  public CommandMessage getMessage()
		  {
			return message_;
		  }
		  public Builder setMessage(CommandMessage value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			message_ = value;

			bitField0_ |= 0x00000100;
			return this;
		  }
		  public Builder setMessage(CommandMessage.Builder builderForValue)
		  {
			message_ = builderForValue.build();

			bitField0_ |= 0x00000100;
			return this;
		  }
		  public Builder mergeMessage(CommandMessage value)
		  {
			if (((bitField0_ & 0x00000100) == 0x00000100) && message_ != CommandMessage.DefaultInstance)
			{
			  message_ = CommandMessage.newBuilder(message_).mergeFrom(value).buildPartial();
			}
			else
			{
			  message_ = value;
			}

			bitField0_ |= 0x00000100;
			return this;
		  }
		  public Builder clearMessage()
		  {
			message_ = CommandMessage.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000100);
			return this;
		  }

		  // optional .pulsar.proto.CommandAck ack = 10;
		  internal CommandAck ack_ = CommandAck.DefaultInstance;
		  public bool hasAck()
		  {
			return ((bitField0_ & 0x00000200) == 0x00000200);
		  }
		  public CommandAck getAck()
		  {
			return ack_;
		  }
		  public Builder setAck(CommandAck value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ack_ = value;

			bitField0_ |= 0x00000200;
			return this;
		  }
		  public Builder setAck(CommandAck.Builder builderForValue)
		  {
			ack_ = builderForValue.build();

			bitField0_ |= 0x00000200;
			return this;
		  }
		  public Builder mergeAck(CommandAck value)
		  {
			if (((bitField0_ & 0x00000200) == 0x00000200) && ack_ != CommandAck.DefaultInstance)
			{
			  ack_ = CommandAck.newBuilder(ack_).mergeFrom(value).buildPartial();
			}
			else
			{
			  ack_ = value;
			}

			bitField0_ |= 0x00000200;
			return this;
		  }
		  public Builder clearAck()
		  {
			ack_ = CommandAck.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000200);
			return this;
		  }

		  // optional .pulsar.proto.CommandFlow flow = 11;
		  internal CommandFlow flow_ = CommandFlow.DefaultInstance;
		  public bool hasFlow()
		  {
			return ((bitField0_ & 0x00000400) == 0x00000400);
		  }
		  public CommandFlow getFlow()
		  {
			return flow_;
		  }
		  public Builder setFlow(CommandFlow value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			flow_ = value;

			bitField0_ |= 0x00000400;
			return this;
		  }
		  public Builder setFlow(CommandFlow.Builder builderForValue)
		  {
			flow_ = builderForValue.build();

			bitField0_ |= 0x00000400;
			return this;
		  }
		  public Builder mergeFlow(CommandFlow value)
		  {
			if (((bitField0_ & 0x00000400) == 0x00000400) && flow_ != CommandFlow.DefaultInstance)
			{
			  flow_ = CommandFlow.newBuilder(flow_).mergeFrom(value).buildPartial();
			}
			else
			{
			  flow_ = value;
			}

			bitField0_ |= 0x00000400;
			return this;
		  }
		  public Builder clearFlow()
		  {
			flow_ = CommandFlow.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000400);
			return this;
		  }

		  // optional .pulsar.proto.CommandUnsubscribe unsubscribe = 12;
		  internal CommandUnsubscribe unsubscribe_ = CommandUnsubscribe.DefaultInstance;
		  public bool hasUnsubscribe()
		  {
			return ((bitField0_ & 0x00000800) == 0x00000800);
		  }
		  public CommandUnsubscribe getUnsubscribe()
		  {
			return unsubscribe_;
		  }
		  public Builder setUnsubscribe(CommandUnsubscribe value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			unsubscribe_ = value;

			bitField0_ |= 0x00000800;
			return this;
		  }
		  public Builder setUnsubscribe(CommandUnsubscribe.Builder builderForValue)
		  {
			unsubscribe_ = builderForValue.build();

			bitField0_ |= 0x00000800;
			return this;
		  }
		  public Builder mergeUnsubscribe(CommandUnsubscribe value)
		  {
			if (((bitField0_ & 0x00000800) == 0x00000800) && unsubscribe_ != CommandUnsubscribe.DefaultInstance)
			{
			  unsubscribe_ = CommandUnsubscribe.newBuilder(unsubscribe_).mergeFrom(value).buildPartial();
			}
			else
			{
			  unsubscribe_ = value;
			}

			bitField0_ |= 0x00000800;
			return this;
		  }
		  public Builder clearUnsubscribe()
		  {
			unsubscribe_ = CommandUnsubscribe.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00000800);
			return this;
		  }

		  // optional .pulsar.proto.CommandSuccess success = 13;
		  internal CommandSuccess success_ = CommandSuccess.DefaultInstance;
		  public bool hasSuccess()
		  {
			return ((bitField0_ & 0x00001000) == 0x00001000);
		  }
		  public CommandSuccess getSuccess()
		  {
			return success_;
		  }
		  public Builder setSuccess(CommandSuccess value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			success_ = value;

			bitField0_ |= 0x00001000;
			return this;
		  }
		  public Builder setSuccess(CommandSuccess.Builder builderForValue)
		  {
			success_ = builderForValue.build();

			bitField0_ |= 0x00001000;
			return this;
		  }
		  public Builder mergeSuccess(CommandSuccess value)
		  {
			if (((bitField0_ & 0x00001000) == 0x00001000) && success_ != CommandSuccess.DefaultInstance)
			{
			  success_ = CommandSuccess.newBuilder(success_).mergeFrom(value).buildPartial();
			}
			else
			{
			  success_ = value;
			}

			bitField0_ |= 0x00001000;
			return this;
		  }
		  public Builder clearSuccess()
		  {
			success_ = CommandSuccess.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00001000);
			return this;
		  }

		  // optional .pulsar.proto.CommandError error = 14;
		  internal CommandError error_ = CommandError.DefaultInstance;
		  public bool hasError()
		  {
			return ((bitField0_ & 0x00002000) == 0x00002000);
		  }
		  public CommandError getError()
		  {
			return error_;
		  }
		  public Builder setError(CommandError value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			error_ = value;

			bitField0_ |= 0x00002000;
			return this;
		  }
		  public Builder setError(CommandError.Builder builderForValue)
		  {
			error_ = builderForValue.build();

			bitField0_ |= 0x00002000;
			return this;
		  }
		  public Builder mergeError(CommandError value)
		  {
			if (((bitField0_ & 0x00002000) == 0x00002000) && error_ != CommandError.DefaultInstance)
			{
			  error_ = CommandError.newBuilder(error_).mergeFrom(value).buildPartial();
			}
			else
			{
			  error_ = value;
			}

			bitField0_ |= 0x00002000;
			return this;
		  }
		  public Builder clearError()
		  {
			error_ = CommandError.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00002000);
			return this;
		  }

		  // optional .pulsar.proto.CommandCloseProducer close_producer = 15;
		  internal CommandCloseProducer closeProducer_ = CommandCloseProducer.DefaultInstance;
		  public bool hasCloseProducer()
		  {
			return ((bitField0_ & 0x00004000) == 0x00004000);
		  }
		  public CommandCloseProducer getCloseProducer()
		  {
			return closeProducer_;
		  }
		  public Builder setCloseProducer(CommandCloseProducer value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			closeProducer_ = value;

			bitField0_ |= 0x00004000;
			return this;
		  }
		  public Builder setCloseProducer(CommandCloseProducer.Builder builderForValue)
		  {
			closeProducer_ = builderForValue.build();

			bitField0_ |= 0x00004000;
			return this;
		  }
		  public Builder mergeCloseProducer(CommandCloseProducer value)
		  {
			if (((bitField0_ & 0x00004000) == 0x00004000) && closeProducer_ != CommandCloseProducer.DefaultInstance)
			{
			  closeProducer_ = CommandCloseProducer.newBuilder(closeProducer_).mergeFrom(value).buildPartial();
			}
			else
			{
			  closeProducer_ = value;
			}

			bitField0_ |= 0x00004000;
			return this;
		  }
		  public Builder clearCloseProducer()
		  {
			closeProducer_ = CommandCloseProducer.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00004000);
			return this;
		  }

		  // optional .pulsar.proto.CommandCloseConsumer close_consumer = 16;
		  internal CommandCloseConsumer closeConsumer_ = CommandCloseConsumer.DefaultInstance;
		  public bool hasCloseConsumer()
		  {
			return ((bitField0_ & 0x00008000) == 0x00008000);
		  }
		  public CommandCloseConsumer getCloseConsumer()
		  {
			return closeConsumer_;
		  }
		  public Builder setCloseConsumer(CommandCloseConsumer value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			closeConsumer_ = value;

			bitField0_ |= 0x00008000;
			return this;
		  }
		  public Builder setCloseConsumer(CommandCloseConsumer.Builder builderForValue)
		  {
			closeConsumer_ = builderForValue.build();

			bitField0_ |= 0x00008000;
			return this;
		  }
		  public Builder mergeCloseConsumer(CommandCloseConsumer value)
		  {
			if (((bitField0_ & 0x00008000) == 0x00008000) && closeConsumer_ != CommandCloseConsumer.DefaultInstance)
			{
			  closeConsumer_ = CommandCloseConsumer.newBuilder(closeConsumer_).mergeFrom(value).buildPartial();
			}
			else
			{
			  closeConsumer_ = value;
			}

			bitField0_ |= 0x00008000;
			return this;
		  }
		  public Builder clearCloseConsumer()
		  {
			closeConsumer_ = CommandCloseConsumer.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00008000);
			return this;
		  }

		  // optional .pulsar.proto.CommandProducerSuccess producer_success = 17;
		  internal CommandProducerSuccess producerSuccess_ = CommandProducerSuccess.DefaultInstance;
		  public bool hasProducerSuccess()
		  {
			return ((bitField0_ & 0x00010000) == 0x00010000);
		  }
		  public CommandProducerSuccess getProducerSuccess()
		  {
			return producerSuccess_;
		  }
		  public Builder setProducerSuccess(CommandProducerSuccess value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			producerSuccess_ = value;

			bitField0_ |= 0x00010000;
			return this;
		  }
		  public Builder setProducerSuccess(CommandProducerSuccess.Builder builderForValue)
		  {
			producerSuccess_ = builderForValue.build();

			bitField0_ |= 0x00010000;
			return this;
		  }
		  public Builder mergeProducerSuccess(CommandProducerSuccess value)
		  {
			if (((bitField0_ & 0x00010000) == 0x00010000) && producerSuccess_ != CommandProducerSuccess.DefaultInstance)
			{
			  producerSuccess_ = CommandProducerSuccess.newBuilder(producerSuccess_).mergeFrom(value).buildPartial();
			}
			else
			{
			  producerSuccess_ = value;
			}

			bitField0_ |= 0x00010000;
			return this;
		  }
		  public Builder clearProducerSuccess()
		  {
			producerSuccess_ = CommandProducerSuccess.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00010000);
			return this;
		  }

		  // optional .pulsar.proto.CommandPing ping = 18;
		  internal CommandPing ping_ = CommandPing.DefaultInstance;
		  public bool hasPing()
		  {
			return ((bitField0_ & 0x00020000) == 0x00020000);
		  }
		  public CommandPing getPing()
		  {
			return ping_;
		  }
		  public Builder setPing(CommandPing value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ping_ = value;

			bitField0_ |= 0x00020000;
			return this;
		  }
		  public Builder setPing(CommandPing.Builder builderForValue)
		  {
			ping_ = builderForValue.build();

			bitField0_ |= 0x00020000;
			return this;
		  }
		  public Builder mergePing(CommandPing value)
		  {
			if (((bitField0_ & 0x00020000) == 0x00020000) && ping_ != CommandPing.DefaultInstance)
			{
			  ping_ = CommandPing.newBuilder(ping_).mergeFrom(value).buildPartial();
			}
			else
			{
			  ping_ = value;
			}

			bitField0_ |= 0x00020000;
			return this;
		  }
		  public Builder clearPing()
		  {
			ping_ = CommandPing.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00020000);
			return this;
		  }

		  // optional .pulsar.proto.CommandPong pong = 19;
		  internal CommandPong pong_ = CommandPong.DefaultInstance;
		  public bool hasPong()
		  {
			return ((bitField0_ & 0x00040000) == 0x00040000);
		  }
		  public CommandPong getPong()
		  {
			return pong_;
		  }
		  public Builder setPong(CommandPong value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			pong_ = value;

			bitField0_ |= 0x00040000;
			return this;
		  }
		  public Builder setPong(CommandPong.Builder builderForValue)
		  {
			pong_ = builderForValue.build();

			bitField0_ |= 0x00040000;
			return this;
		  }
		  public Builder mergePong(CommandPong value)
		  {
			if (((bitField0_ & 0x00040000) == 0x00040000) && pong_ != CommandPong.DefaultInstance)
			{
			  pong_ = CommandPong.newBuilder(pong_).mergeFrom(value).buildPartial();
			}
			else
			{
			  pong_ = value;
			}

			bitField0_ |= 0x00040000;
			return this;
		  }
		  public Builder clearPong()
		  {
			pong_ = CommandPong.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00040000);
			return this;
		  }

		  // optional .pulsar.proto.CommandRedeliverUnacknowledgedMessages redeliverUnacknowledgedMessages = 20;
		  internal CommandRedeliverUnacknowledgedMessages redeliverUnacknowledgedMessages_ = CommandRedeliverUnacknowledgedMessages.DefaultInstance;
		  public bool hasRedeliverUnacknowledgedMessages()
		  {
			return ((bitField0_ & 0x00080000) == 0x00080000);
		  }
		  public CommandRedeliverUnacknowledgedMessages getRedeliverUnacknowledgedMessages()
		  {
			return redeliverUnacknowledgedMessages_;
		  }
		  public Builder setRedeliverUnacknowledgedMessages(CommandRedeliverUnacknowledgedMessages value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			redeliverUnacknowledgedMessages_ = value;

			bitField0_ |= 0x00080000;
			return this;
		  }
		  public Builder setRedeliverUnacknowledgedMessages(CommandRedeliverUnacknowledgedMessages.Builder builderForValue)
		  {
			redeliverUnacknowledgedMessages_ = builderForValue.build();

			bitField0_ |= 0x00080000;
			return this;
		  }
		  public Builder mergeRedeliverUnacknowledgedMessages(CommandRedeliverUnacknowledgedMessages value)
		  {
			if (((bitField0_ & 0x00080000) == 0x00080000) && redeliverUnacknowledgedMessages_ != CommandRedeliverUnacknowledgedMessages.DefaultInstance)
			{
			  redeliverUnacknowledgedMessages_ = CommandRedeliverUnacknowledgedMessages.newBuilder(redeliverUnacknowledgedMessages_).mergeFrom(value).buildPartial();
			}
			else
			{
			  redeliverUnacknowledgedMessages_ = value;
			}

			bitField0_ |= 0x00080000;
			return this;
		  }
		  public Builder clearRedeliverUnacknowledgedMessages()
		  {
			redeliverUnacknowledgedMessages_ = CommandRedeliverUnacknowledgedMessages.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00080000);
			return this;
		  }

		  // optional .pulsar.proto.CommandPartitionedTopicMetadata partitionMetadata = 21;
		  internal CommandPartitionedTopicMetadata partitionMetadata_ = CommandPartitionedTopicMetadata.DefaultInstance;
		  public bool hasPartitionMetadata()
		  {
			return ((bitField0_ & 0x00100000) == 0x00100000);
		  }
		  public CommandPartitionedTopicMetadata getPartitionMetadata()
		  {
			return partitionMetadata_;
		  }
		  public Builder setPartitionMetadata(CommandPartitionedTopicMetadata value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			partitionMetadata_ = value;

			bitField0_ |= 0x00100000;
			return this;
		  }
		  public Builder setPartitionMetadata(CommandPartitionedTopicMetadata.Builder builderForValue)
		  {
			partitionMetadata_ = builderForValue.build();

			bitField0_ |= 0x00100000;
			return this;
		  }
		  public Builder mergePartitionMetadata(CommandPartitionedTopicMetadata value)
		  {
			if (((bitField0_ & 0x00100000) == 0x00100000) && partitionMetadata_ != CommandPartitionedTopicMetadata.DefaultInstance)
			{
			  partitionMetadata_ = CommandPartitionedTopicMetadata.newBuilder(partitionMetadata_).mergeFrom(value).buildPartial();
			}
			else
			{
			  partitionMetadata_ = value;
			}

			bitField0_ |= 0x00100000;
			return this;
		  }
		  public Builder clearPartitionMetadata()
		  {
			partitionMetadata_ = CommandPartitionedTopicMetadata.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00100000);
			return this;
		  }

		  // optional .pulsar.proto.CommandPartitionedTopicMetadataResponse partitionMetadataResponse = 22;
		  internal CommandPartitionedTopicMetadataResponse partitionMetadataResponse_ = CommandPartitionedTopicMetadataResponse.DefaultInstance;
		  public bool hasPartitionMetadataResponse()
		  {
			return ((bitField0_ & 0x00200000) == 0x00200000);
		  }
		  public CommandPartitionedTopicMetadataResponse getPartitionMetadataResponse()
		  {
			return partitionMetadataResponse_;
		  }
		  public Builder setPartitionMetadataResponse(CommandPartitionedTopicMetadataResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			partitionMetadataResponse_ = value;

			bitField0_ |= 0x00200000;
			return this;
		  }
		  public Builder setPartitionMetadataResponse(CommandPartitionedTopicMetadataResponse.Builder builderForValue)
		  {
			partitionMetadataResponse_ = builderForValue.build();

			bitField0_ |= 0x00200000;
			return this;
		  }
		  public Builder mergePartitionMetadataResponse(CommandPartitionedTopicMetadataResponse value)
		  {
			if (((bitField0_ & 0x00200000) == 0x00200000) && partitionMetadataResponse_ != CommandPartitionedTopicMetadataResponse.DefaultInstance)
			{
			  partitionMetadataResponse_ = CommandPartitionedTopicMetadataResponse.newBuilder(partitionMetadataResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  partitionMetadataResponse_ = value;
			}

			bitField0_ |= 0x00200000;
			return this;
		  }
		  public Builder clearPartitionMetadataResponse()
		  {
			partitionMetadataResponse_ = CommandPartitionedTopicMetadataResponse.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00200000);
			return this;
		  }

		  // optional .pulsar.proto.CommandLookupTopic lookupTopic = 23;
		  internal CommandLookupTopic lookupTopic_ = CommandLookupTopic.DefaultInstance;
		  public bool hasLookupTopic()
		  {
			return ((bitField0_ & 0x00400000) == 0x00400000);
		  }
		  public CommandLookupTopic getLookupTopic()
		  {
			return lookupTopic_;
		  }
		  public Builder setLookupTopic(CommandLookupTopic value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			lookupTopic_ = value;

			bitField0_ |= 0x00400000;
			return this;
		  }
		  public Builder setLookupTopic(CommandLookupTopic.Builder builderForValue)
		  {
			lookupTopic_ = builderForValue.build();

			bitField0_ |= 0x00400000;
			return this;
		  }
		  public Builder mergeLookupTopic(CommandLookupTopic value)
		  {
			if (((bitField0_ & 0x00400000) == 0x00400000) && lookupTopic_ != CommandLookupTopic.DefaultInstance)
			{
			  lookupTopic_ = CommandLookupTopic.newBuilder(lookupTopic_).mergeFrom(value).buildPartial();
			}
			else
			{
			  lookupTopic_ = value;
			}

			bitField0_ |= 0x00400000;
			return this;
		  }
		  public Builder clearLookupTopic()
		  {
			lookupTopic_ = CommandLookupTopic.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00400000);
			return this;
		  }

		  // optional .pulsar.proto.CommandLookupTopicResponse lookupTopicResponse = 24;
		  internal CommandLookupTopicResponse lookupTopicResponse_ = CommandLookupTopicResponse.DefaultInstance;
		  public bool hasLookupTopicResponse()
		  {
			return ((bitField0_ & 0x00800000) == 0x00800000);
		  }
		  public CommandLookupTopicResponse getLookupTopicResponse()
		  {
			return lookupTopicResponse_;
		  }
		  public Builder setLookupTopicResponse(CommandLookupTopicResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			lookupTopicResponse_ = value;

			bitField0_ |= 0x00800000;
			return this;
		  }
		  public Builder setLookupTopicResponse(CommandLookupTopicResponse.Builder builderForValue)
		  {
			lookupTopicResponse_ = builderForValue.build();

			bitField0_ |= 0x00800000;
			return this;
		  }
		  public Builder mergeLookupTopicResponse(CommandLookupTopicResponse value)
		  {
			if (((bitField0_ & 0x00800000) == 0x00800000) && lookupTopicResponse_ != CommandLookupTopicResponse.DefaultInstance)
			{
			  lookupTopicResponse_ = CommandLookupTopicResponse.newBuilder(lookupTopicResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  lookupTopicResponse_ = value;
			}

			bitField0_ |= 0x00800000;
			return this;
		  }
		  public Builder clearLookupTopicResponse()
		  {
			lookupTopicResponse_ = CommandLookupTopicResponse.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x00800000);
			return this;
		  }

		  // optional .pulsar.proto.CommandConsumerStats consumerStats = 25;
		  internal CommandConsumerStats consumerStats_ = CommandConsumerStats.DefaultInstance;
		  public bool hasConsumerStats()
		  {
			return ((bitField0_ & 0x01000000) == 0x01000000);
		  }
		  public CommandConsumerStats getConsumerStats()
		  {
			return consumerStats_;
		  }
		  public Builder setConsumerStats(CommandConsumerStats value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			consumerStats_ = value;

			bitField0_ |= 0x01000000;
			return this;
		  }
		  public Builder setConsumerStats(CommandConsumerStats.Builder builderForValue)
		  {
			consumerStats_ = builderForValue.build();

			bitField0_ |= 0x01000000;
			return this;
		  }
		  public Builder mergeConsumerStats(CommandConsumerStats value)
		  {
			if (((bitField0_ & 0x01000000) == 0x01000000) && consumerStats_ != CommandConsumerStats.DefaultInstance)
			{
			  consumerStats_ = CommandConsumerStats.newBuilder(consumerStats_).mergeFrom(value).buildPartial();
			}
			else
			{
			  consumerStats_ = value;
			}

			bitField0_ |= 0x01000000;
			return this;
		  }
		  public Builder clearConsumerStats()
		  {
			consumerStats_ = CommandConsumerStats.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x01000000);
			return this;
		  }

		  // optional .pulsar.proto.CommandConsumerStatsResponse consumerStatsResponse = 26;
		  internal CommandConsumerStatsResponse consumerStatsResponse_ = CommandConsumerStatsResponse.DefaultInstance;
		  public bool hasConsumerStatsResponse()
		  {
			return ((bitField0_ & 0x02000000) == 0x02000000);
		  }
		  public CommandConsumerStatsResponse getConsumerStatsResponse()
		  {
			return consumerStatsResponse_;
		  }
		  public Builder setConsumerStatsResponse(CommandConsumerStatsResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			consumerStatsResponse_ = value;

			bitField0_ |= 0x02000000;
			return this;
		  }
		  public Builder setConsumerStatsResponse(CommandConsumerStatsResponse.Builder builderForValue)
		  {
			consumerStatsResponse_ = builderForValue.build();

			bitField0_ |= 0x02000000;
			return this;
		  }
		  public Builder mergeConsumerStatsResponse(CommandConsumerStatsResponse value)
		  {
			if (((bitField0_ & 0x02000000) == 0x02000000) && consumerStatsResponse_ != CommandConsumerStatsResponse.DefaultInstance)
			{
			  consumerStatsResponse_ = CommandConsumerStatsResponse.newBuilder(consumerStatsResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  consumerStatsResponse_ = value;
			}

			bitField0_ |= 0x02000000;
			return this;
		  }
		  public Builder clearConsumerStatsResponse()
		  {
			consumerStatsResponse_ = CommandConsumerStatsResponse.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x02000000);
			return this;
		  }

		  // optional .pulsar.proto.CommandReachedEndOfTopic reachedEndOfTopic = 27;
		  internal CommandReachedEndOfTopic reachedEndOfTopic_ = CommandReachedEndOfTopic.DefaultInstance;
		  public bool hasReachedEndOfTopic()
		  {
			return ((bitField0_ & 0x04000000) == 0x04000000);
		  }
		  public CommandReachedEndOfTopic getReachedEndOfTopic()
		  {
			return reachedEndOfTopic_;
		  }
		  public Builder setReachedEndOfTopic(CommandReachedEndOfTopic value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			reachedEndOfTopic_ = value;

			bitField0_ |= 0x04000000;
			return this;
		  }
		  public Builder setReachedEndOfTopic(CommandReachedEndOfTopic.Builder builderForValue)
		  {
			reachedEndOfTopic_ = builderForValue.build();

			bitField0_ |= 0x04000000;
			return this;
		  }
		  public Builder mergeReachedEndOfTopic(CommandReachedEndOfTopic value)
		  {
			if (((bitField0_ & 0x04000000) == 0x04000000) && reachedEndOfTopic_ != CommandReachedEndOfTopic.DefaultInstance)
			{
			  reachedEndOfTopic_ = CommandReachedEndOfTopic.newBuilder(reachedEndOfTopic_).mergeFrom(value).buildPartial();
			}
			else
			{
			  reachedEndOfTopic_ = value;
			}

			bitField0_ |= 0x04000000;
			return this;
		  }
		  public Builder clearReachedEndOfTopic()
		  {
			reachedEndOfTopic_ = CommandReachedEndOfTopic.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x04000000);
			return this;
		  }

		  // optional .pulsar.proto.CommandSeek seek = 28;
		  internal CommandSeek seek_ = CommandSeek.DefaultInstance;
		  public bool hasSeek()
		  {
			return ((bitField0_ & 0x08000000) == 0x08000000);
		  }
		  public CommandSeek getSeek()
		  {
			return seek_;
		  }
		  public Builder setSeek(CommandSeek value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			seek_ = value;

			bitField0_ |= 0x08000000;
			return this;
		  }
		  public Builder setSeek(CommandSeek.Builder builderForValue)
		  {
			seek_ = builderForValue.build();

			bitField0_ |= 0x08000000;
			return this;
		  }
		  public Builder mergeSeek(CommandSeek value)
		  {
			if (((bitField0_ & 0x08000000) == 0x08000000) && seek_ != CommandSeek.DefaultInstance)
			{
			  seek_ = CommandSeek.newBuilder(seek_).mergeFrom(value).buildPartial();
			}
			else
			{
			  seek_ = value;
			}

			bitField0_ |= 0x08000000;
			return this;
		  }
		  public Builder clearSeek()
		  {
			seek_ = CommandSeek.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x08000000);
			return this;
		  }

		  // optional .pulsar.proto.CommandGetLastMessageId getLastMessageId = 29;
		  internal CommandGetLastMessageId getLastMessageId_ = CommandGetLastMessageId.DefaultInstance;
		  public bool hasGetLastMessageId()
		  {
			return ((bitField0_ & 0x10000000) == 0x10000000);
		  }
		  public CommandGetLastMessageId getGetLastMessageId()
		  {
			return getLastMessageId_;
		  }
		  public Builder setGetLastMessageId(CommandGetLastMessageId value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			getLastMessageId_ = value;

			bitField0_ |= 0x10000000;
			return this;
		  }
		  public Builder setGetLastMessageId(CommandGetLastMessageId.Builder builderForValue)
		  {
			getLastMessageId_ = builderForValue.build();

			bitField0_ |= 0x10000000;
			return this;
		  }
		  public Builder mergeGetLastMessageId(CommandGetLastMessageId value)
		  {
			if (((bitField0_ & 0x10000000) == 0x10000000) && getLastMessageId_ != CommandGetLastMessageId.DefaultInstance)
			{
			  getLastMessageId_ = CommandGetLastMessageId.newBuilder(getLastMessageId_).mergeFrom(value).buildPartial();
			}
			else
			{
			  getLastMessageId_ = value;
			}

			bitField0_ |= 0x10000000;
			return this;
		  }
		  public Builder clearGetLastMessageId()
		  {
			getLastMessageId_ = CommandGetLastMessageId.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x10000000);
			return this;
		  }

		  // optional .pulsar.proto.CommandGetLastMessageIdResponse getLastMessageIdResponse = 30;
		  internal CommandGetLastMessageIdResponse getLastMessageIdResponse_ = CommandGetLastMessageIdResponse.DefaultInstance;
		  public bool hasGetLastMessageIdResponse()
		  {
			return ((bitField0_ & 0x20000000) == 0x20000000);
		  }
		  public CommandGetLastMessageIdResponse getGetLastMessageIdResponse()
		  {
			return getLastMessageIdResponse_;
		  }
		  public Builder setGetLastMessageIdResponse(CommandGetLastMessageIdResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			getLastMessageIdResponse_ = value;

			bitField0_ |= 0x20000000;
			return this;
		  }
		  public Builder setGetLastMessageIdResponse(CommandGetLastMessageIdResponse.Builder builderForValue)
		  {
			getLastMessageIdResponse_ = builderForValue.build();

			bitField0_ |= 0x20000000;
			return this;
		  }
		  public Builder mergeGetLastMessageIdResponse(CommandGetLastMessageIdResponse value)
		  {
			if (((bitField0_ & 0x20000000) == 0x20000000) && getLastMessageIdResponse_ != CommandGetLastMessageIdResponse.DefaultInstance)
			{
			  getLastMessageIdResponse_ = CommandGetLastMessageIdResponse.newBuilder(getLastMessageIdResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  getLastMessageIdResponse_ = value;
			}

			bitField0_ |= 0x20000000;
			return this;
		  }
		  public Builder clearGetLastMessageIdResponse()
		  {
			getLastMessageIdResponse_ = CommandGetLastMessageIdResponse.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x20000000);
			return this;
		  }

		  // optional .pulsar.proto.CommandActiveConsumerChange active_consumer_change = 31;
		  internal CommandActiveConsumerChange activeConsumerChange_ = CommandActiveConsumerChange.DefaultInstance;
		  public bool hasActiveConsumerChange()
		  {
			return ((bitField0_ & 0x40000000) == 0x40000000);
		  }
		  public CommandActiveConsumerChange getActiveConsumerChange()
		  {
			return activeConsumerChange_;
		  }
		  public Builder setActiveConsumerChange(CommandActiveConsumerChange value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			activeConsumerChange_ = value;

			bitField0_ |= 0x40000000;
			return this;
		  }
		  public Builder setActiveConsumerChange(CommandActiveConsumerChange.Builder builderForValue)
		  {
			activeConsumerChange_ = builderForValue.build();

			bitField0_ |= 0x40000000;
			return this;
		  }
		  public Builder mergeActiveConsumerChange(CommandActiveConsumerChange value)
		  {
			if (((bitField0_ & 0x40000000) == 0x40000000) && activeConsumerChange_ != CommandActiveConsumerChange.DefaultInstance)
			{
			  activeConsumerChange_ = CommandActiveConsumerChange.newBuilder(activeConsumerChange_).mergeFrom(value).buildPartial();
			}
			else
			{
			  activeConsumerChange_ = value;
			}

			bitField0_ |= 0x40000000;
			return this;
		  }
		  public Builder clearActiveConsumerChange()
		  {
			activeConsumerChange_ = CommandActiveConsumerChange.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x40000000);
			return this;
		  }

		  // optional .pulsar.proto.CommandGetTopicsOfNamespace getTopicsOfNamespace = 32;
		  internal CommandGetTopicsOfNamespace getTopicsOfNamespace_ = CommandGetTopicsOfNamespace.DefaultInstance;
		  public bool hasGetTopicsOfNamespace()
		  {
			return ((bitField0_ & 0x80000000) == 0x80000000);
		  }
		  public CommandGetTopicsOfNamespace getGetTopicsOfNamespace()
		  {
			return getTopicsOfNamespace_;
		  }
		  public Builder setGetTopicsOfNamespace(CommandGetTopicsOfNamespace value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			getTopicsOfNamespace_ = value;

			bitField0_ |= unchecked((int)0x80000000);
			return this;
		  }
		  public Builder setGetTopicsOfNamespace(CommandGetTopicsOfNamespace.Builder builderForValue)
		  {
			getTopicsOfNamespace_ = builderForValue.build();

			bitField0_ |= unchecked((int)0x80000000);
			return this;
		  }
		  public Builder mergeGetTopicsOfNamespace(CommandGetTopicsOfNamespace value)
		  {
			if (((bitField0_ & 0x80000000) == 0x80000000) && getTopicsOfNamespace_ != CommandGetTopicsOfNamespace.DefaultInstance)
			{
			  getTopicsOfNamespace_ = CommandGetTopicsOfNamespace.newBuilder(getTopicsOfNamespace_).mergeFrom(value).buildPartial();
			}
			else
			{
			  getTopicsOfNamespace_ = value;
			}

			bitField0_ |= unchecked((int)0x80000000);
			return this;
		  }
		  public Builder clearGetTopicsOfNamespace()
		  {
			getTopicsOfNamespace_ = CommandGetTopicsOfNamespace.DefaultInstance;

			bitField0_ = (bitField0_ & ~0x80000000);
			return this;
		  }

		  // optional .pulsar.proto.CommandGetTopicsOfNamespaceResponse getTopicsOfNamespaceResponse = 33;
		  internal CommandGetTopicsOfNamespaceResponse getTopicsOfNamespaceResponse_ = CommandGetTopicsOfNamespaceResponse.DefaultInstance;
		  public bool hasGetTopicsOfNamespaceResponse()
		  {
			return ((bitField1_ & 0x00000001) == 0x00000001);
		  }
		  public CommandGetTopicsOfNamespaceResponse getGetTopicsOfNamespaceResponse()
		  {
			return getTopicsOfNamespaceResponse_;
		  }
		  public Builder setGetTopicsOfNamespaceResponse(CommandGetTopicsOfNamespaceResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			getTopicsOfNamespaceResponse_ = value;

			bitField1_ |= 0x00000001;
			return this;
		  }
		  public Builder setGetTopicsOfNamespaceResponse(CommandGetTopicsOfNamespaceResponse.Builder builderForValue)
		  {
			getTopicsOfNamespaceResponse_ = builderForValue.build();

			bitField1_ |= 0x00000001;
			return this;
		  }
		  public Builder mergeGetTopicsOfNamespaceResponse(CommandGetTopicsOfNamespaceResponse value)
		  {
			if (((bitField1_ & 0x00000001) == 0x00000001) && getTopicsOfNamespaceResponse_ != CommandGetTopicsOfNamespaceResponse.DefaultInstance)
			{
			  getTopicsOfNamespaceResponse_ = CommandGetTopicsOfNamespaceResponse.newBuilder(getTopicsOfNamespaceResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  getTopicsOfNamespaceResponse_ = value;
			}

			bitField1_ |= 0x00000001;
			return this;
		  }
		  public Builder clearGetTopicsOfNamespaceResponse()
		  {
			getTopicsOfNamespaceResponse_ = CommandGetTopicsOfNamespaceResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000001);
			return this;
		  }

		  // optional .pulsar.proto.CommandGetSchema getSchema = 34;
		  internal CommandGetSchema getSchema_ = CommandGetSchema.DefaultInstance;
		  public bool hasGetSchema()
		  {
			return ((bitField1_ & 0x00000002) == 0x00000002);
		  }
		  public CommandGetSchema getGetSchema()
		  {
			return getSchema_;
		  }
		  public Builder setGetSchema(CommandGetSchema value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			getSchema_ = value;

			bitField1_ |= 0x00000002;
			return this;
		  }
		  public Builder setGetSchema(CommandGetSchema.Builder builderForValue)
		  {
			getSchema_ = builderForValue.build();

			bitField1_ |= 0x00000002;
			return this;
		  }
		  public Builder mergeGetSchema(CommandGetSchema value)
		  {
			if (((bitField1_ & 0x00000002) == 0x00000002) && getSchema_ != CommandGetSchema.DefaultInstance)
			{
			  getSchema_ = CommandGetSchema.newBuilder(getSchema_).mergeFrom(value).buildPartial();
			}
			else
			{
			  getSchema_ = value;
			}

			bitField1_ |= 0x00000002;
			return this;
		  }
		  public Builder clearGetSchema()
		  {
			getSchema_ = CommandGetSchema.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000002);
			return this;
		  }

		  // optional .pulsar.proto.CommandGetSchemaResponse getSchemaResponse = 35;
		  internal CommandGetSchemaResponse getSchemaResponse_ = CommandGetSchemaResponse.DefaultInstance;
		  public bool hasGetSchemaResponse()
		  {
			return ((bitField1_ & 0x00000004) == 0x00000004);
		  }
		  public CommandGetSchemaResponse getGetSchemaResponse()
		  {
			return getSchemaResponse_;
		  }
		  public Builder setGetSchemaResponse(CommandGetSchemaResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			getSchemaResponse_ = value;

			bitField1_ |= 0x00000004;
			return this;
		  }
		  public Builder setGetSchemaResponse(CommandGetSchemaResponse.Builder builderForValue)
		  {
			getSchemaResponse_ = builderForValue.build();

			bitField1_ |= 0x00000004;
			return this;
		  }
		  public Builder mergeGetSchemaResponse(CommandGetSchemaResponse value)
		  {
			if (((bitField1_ & 0x00000004) == 0x00000004) && getSchemaResponse_ != CommandGetSchemaResponse.DefaultInstance)
			{
			  getSchemaResponse_ = CommandGetSchemaResponse.newBuilder(getSchemaResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  getSchemaResponse_ = value;
			}

			bitField1_ |= 0x00000004;
			return this;
		  }
		  public Builder clearGetSchemaResponse()
		  {
			getSchemaResponse_ = CommandGetSchemaResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000004);
			return this;
		  }

		  // optional .pulsar.proto.CommandAuthChallenge authChallenge = 36;
		  internal CommandAuthChallenge authChallenge_ = CommandAuthChallenge.DefaultInstance;
		  public bool hasAuthChallenge()
		  {
			return ((bitField1_ & 0x00000008) == 0x00000008);
		  }
		  public CommandAuthChallenge getAuthChallenge()
		  {
			return authChallenge_;
		  }
		  public Builder setAuthChallenge(CommandAuthChallenge value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			authChallenge_ = value;

			bitField1_ |= 0x00000008;
			return this;
		  }
		  public Builder setAuthChallenge(CommandAuthChallenge.Builder builderForValue)
		  {
			authChallenge_ = builderForValue.build();

			bitField1_ |= 0x00000008;
			return this;
		  }
		  public Builder mergeAuthChallenge(CommandAuthChallenge value)
		  {
			if (((bitField1_ & 0x00000008) == 0x00000008) && authChallenge_ != CommandAuthChallenge.DefaultInstance)
			{
			  authChallenge_ = CommandAuthChallenge.newBuilder(authChallenge_).mergeFrom(value).buildPartial();
			}
			else
			{
			  authChallenge_ = value;
			}

			bitField1_ |= 0x00000008;
			return this;
		  }
		  public Builder clearAuthChallenge()
		  {
			authChallenge_ = CommandAuthChallenge.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000008);
			return this;
		  }

		  // optional .pulsar.proto.CommandAuthResponse authResponse = 37;
		  internal CommandAuthResponse authResponse_ = CommandAuthResponse.DefaultInstance;
		  public bool hasAuthResponse()
		  {
			return ((bitField1_ & 0x00000010) == 0x00000010);
		  }
		  public CommandAuthResponse getAuthResponse()
		  {
			return authResponse_;
		  }
		  public Builder setAuthResponse(CommandAuthResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			authResponse_ = value;

			bitField1_ |= 0x00000010;
			return this;
		  }
		  public Builder setAuthResponse(CommandAuthResponse.Builder builderForValue)
		  {
			authResponse_ = builderForValue.build();

			bitField1_ |= 0x00000010;
			return this;
		  }
		  public Builder mergeAuthResponse(CommandAuthResponse value)
		  {
			if (((bitField1_ & 0x00000010) == 0x00000010) && authResponse_ != CommandAuthResponse.DefaultInstance)
			{
			  authResponse_ = CommandAuthResponse.newBuilder(authResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  authResponse_ = value;
			}

			bitField1_ |= 0x00000010;
			return this;
		  }
		  public Builder clearAuthResponse()
		  {
			authResponse_ = CommandAuthResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000010);
			return this;
		  }

		  // optional .pulsar.proto.CommandAckResponse ackResponse = 38;
		  internal CommandAckResponse ackResponse_ = CommandAckResponse.DefaultInstance;
		  public bool hasAckResponse()
		  {
			return ((bitField1_ & 0x00000020) == 0x00000020);
		  }
		  public CommandAckResponse getAckResponse()
		  {
			return ackResponse_;
		  }
		  public Builder setAckResponse(CommandAckResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			ackResponse_ = value;

			bitField1_ |= 0x00000020;
			return this;
		  }
		  public Builder setAckResponse(CommandAckResponse.Builder builderForValue)
		  {
			ackResponse_ = builderForValue.build();

			bitField1_ |= 0x00000020;
			return this;
		  }
		  public Builder mergeAckResponse(CommandAckResponse value)
		  {
			if (((bitField1_ & 0x00000020) == 0x00000020) && ackResponse_ != CommandAckResponse.DefaultInstance)
			{
			  ackResponse_ = CommandAckResponse.newBuilder(ackResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  ackResponse_ = value;
			}

			bitField1_ |= 0x00000020;
			return this;
		  }
		  public Builder clearAckResponse()
		  {
			ackResponse_ = CommandAckResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000020);
			return this;
		  }

		  // optional .pulsar.proto.CommandGetOrCreateSchema getOrCreateSchema = 39;
		  internal CommandGetOrCreateSchema getOrCreateSchema_ = CommandGetOrCreateSchema.DefaultInstance;
		  public bool hasGetOrCreateSchema()
		  {
			return ((bitField1_ & 0x00000040) == 0x00000040);
		  }
		  public CommandGetOrCreateSchema getGetOrCreateSchema()
		  {
			return getOrCreateSchema_;
		  }
		  public Builder setGetOrCreateSchema(CommandGetOrCreateSchema value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			getOrCreateSchema_ = value;

			bitField1_ |= 0x00000040;
			return this;
		  }
		  public Builder setGetOrCreateSchema(CommandGetOrCreateSchema.Builder builderForValue)
		  {
			getOrCreateSchema_ = builderForValue.build();

			bitField1_ |= 0x00000040;
			return this;
		  }
		  public Builder mergeGetOrCreateSchema(CommandGetOrCreateSchema value)
		  {
			if (((bitField1_ & 0x00000040) == 0x00000040) && getOrCreateSchema_ != CommandGetOrCreateSchema.DefaultInstance)
			{
			  getOrCreateSchema_ = CommandGetOrCreateSchema.newBuilder(getOrCreateSchema_).mergeFrom(value).buildPartial();
			}
			else
			{
			  getOrCreateSchema_ = value;
			}

			bitField1_ |= 0x00000040;
			return this;
		  }
		  public Builder clearGetOrCreateSchema()
		  {
			getOrCreateSchema_ = CommandGetOrCreateSchema.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000040);
			return this;
		  }

		  // optional .pulsar.proto.CommandGetOrCreateSchemaResponse getOrCreateSchemaResponse = 40;
		  internal CommandGetOrCreateSchemaResponse getOrCreateSchemaResponse_ = CommandGetOrCreateSchemaResponse.DefaultInstance;
		  public bool hasGetOrCreateSchemaResponse()
		  {
			return ((bitField1_ & 0x00000080) == 0x00000080);
		  }
		  public CommandGetOrCreateSchemaResponse getGetOrCreateSchemaResponse()
		  {
			return getOrCreateSchemaResponse_;
		  }
		  public Builder setGetOrCreateSchemaResponse(CommandGetOrCreateSchemaResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			getOrCreateSchemaResponse_ = value;

			bitField1_ |= 0x00000080;
			return this;
		  }
		  public Builder setGetOrCreateSchemaResponse(CommandGetOrCreateSchemaResponse.Builder builderForValue)
		  {
			getOrCreateSchemaResponse_ = builderForValue.build();

			bitField1_ |= 0x00000080;
			return this;
		  }
		  public Builder mergeGetOrCreateSchemaResponse(CommandGetOrCreateSchemaResponse value)
		  {
			if (((bitField1_ & 0x00000080) == 0x00000080) && getOrCreateSchemaResponse_ != CommandGetOrCreateSchemaResponse.DefaultInstance)
			{
			  getOrCreateSchemaResponse_ = CommandGetOrCreateSchemaResponse.newBuilder(getOrCreateSchemaResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  getOrCreateSchemaResponse_ = value;
			}

			bitField1_ |= 0x00000080;
			return this;
		  }
		  public Builder clearGetOrCreateSchemaResponse()
		  {
			getOrCreateSchemaResponse_ = CommandGetOrCreateSchemaResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000080);
			return this;
		  }

		  // optional .pulsar.proto.CommandNewTxn newTxn = 50;
		  internal CommandNewTxn newTxn_ = CommandNewTxn.DefaultInstance;
		  public bool hasNewTxn()
		  {
			return ((bitField1_ & 0x00000100) == 0x00000100);
		  }
		  public CommandNewTxn getNewTxn()
		  {
			return newTxn_;
		  }
		  public Builder setNewTxn(CommandNewTxn value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			newTxn_ = value;

			bitField1_ |= 0x00000100;
			return this;
		  }
		  public Builder setNewTxn(CommandNewTxn.Builder builderForValue)
		  {
			newTxn_ = builderForValue.build();

			bitField1_ |= 0x00000100;
			return this;
		  }
		  public Builder mergeNewTxn(CommandNewTxn value)
		  {
			if (((bitField1_ & 0x00000100) == 0x00000100) && newTxn_ != CommandNewTxn.DefaultInstance)
			{
			  newTxn_ = CommandNewTxn.newBuilder(newTxn_).mergeFrom(value).buildPartial();
			}
			else
			{
			  newTxn_ = value;
			}

			bitField1_ |= 0x00000100;
			return this;
		  }
		  public Builder clearNewTxn()
		  {
			newTxn_ = CommandNewTxn.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000100);
			return this;
		  }

		  // optional .pulsar.proto.CommandNewTxnResponse newTxnResponse = 51;
		  internal CommandNewTxnResponse newTxnResponse_ = CommandNewTxnResponse.DefaultInstance;
		  public bool hasNewTxnResponse()
		  {
			return ((bitField1_ & 0x00000200) == 0x00000200);
		  }
		  public CommandNewTxnResponse getNewTxnResponse()
		  {
			return newTxnResponse_;
		  }
		  public Builder setNewTxnResponse(CommandNewTxnResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			newTxnResponse_ = value;

			bitField1_ |= 0x00000200;
			return this;
		  }
		  public Builder setNewTxnResponse(CommandNewTxnResponse.Builder builderForValue)
		  {
			newTxnResponse_ = builderForValue.build();

			bitField1_ |= 0x00000200;
			return this;
		  }
		  public Builder mergeNewTxnResponse(CommandNewTxnResponse value)
		  {
			if (((bitField1_ & 0x00000200) == 0x00000200) && newTxnResponse_ != CommandNewTxnResponse.DefaultInstance)
			{
			  newTxnResponse_ = CommandNewTxnResponse.newBuilder(newTxnResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  newTxnResponse_ = value;
			}

			bitField1_ |= 0x00000200;
			return this;
		  }
		  public Builder clearNewTxnResponse()
		  {
			newTxnResponse_ = CommandNewTxnResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000200);
			return this;
		  }

		  // optional .pulsar.proto.CommandAddPartitionToTxn addPartitionToTxn = 52;
		  internal CommandAddPartitionToTxn addPartitionToTxn_ = CommandAddPartitionToTxn.DefaultInstance;
		  public bool hasAddPartitionToTxn()
		  {
			return ((bitField1_ & 0x00000400) == 0x00000400);
		  }
		  public CommandAddPartitionToTxn getAddPartitionToTxn()
		  {
			return addPartitionToTxn_;
		  }
		  public Builder setAddPartitionToTxn(CommandAddPartitionToTxn value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			addPartitionToTxn_ = value;

			bitField1_ |= 0x00000400;
			return this;
		  }
		  public Builder setAddPartitionToTxn(CommandAddPartitionToTxn.Builder builderForValue)
		  {
			addPartitionToTxn_ = builderForValue.build();

			bitField1_ |= 0x00000400;
			return this;
		  }
		  public Builder mergeAddPartitionToTxn(CommandAddPartitionToTxn value)
		  {
			if (((bitField1_ & 0x00000400) == 0x00000400) && addPartitionToTxn_ != CommandAddPartitionToTxn.DefaultInstance)
			{
			  addPartitionToTxn_ = CommandAddPartitionToTxn.newBuilder(addPartitionToTxn_).mergeFrom(value).buildPartial();
			}
			else
			{
			  addPartitionToTxn_ = value;
			}

			bitField1_ |= 0x00000400;
			return this;
		  }
		  public Builder clearAddPartitionToTxn()
		  {
			addPartitionToTxn_ = CommandAddPartitionToTxn.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000400);
			return this;
		  }

		  // optional .pulsar.proto.CommandAddPartitionToTxnResponse addPartitionToTxnResponse = 53;
		  internal CommandAddPartitionToTxnResponse addPartitionToTxnResponse_ = CommandAddPartitionToTxnResponse.DefaultInstance;
		  public bool hasAddPartitionToTxnResponse()
		  {
			return ((bitField1_ & 0x00000800) == 0x00000800);
		  }
		  public CommandAddPartitionToTxnResponse getAddPartitionToTxnResponse()
		  {
			return addPartitionToTxnResponse_;
		  }
		  public Builder setAddPartitionToTxnResponse(CommandAddPartitionToTxnResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			addPartitionToTxnResponse_ = value;

			bitField1_ |= 0x00000800;
			return this;
		  }
		  public Builder setAddPartitionToTxnResponse(CommandAddPartitionToTxnResponse.Builder builderForValue)
		  {
			addPartitionToTxnResponse_ = builderForValue.build();

			bitField1_ |= 0x00000800;
			return this;
		  }
		  public Builder mergeAddPartitionToTxnResponse(CommandAddPartitionToTxnResponse value)
		  {
			if (((bitField1_ & 0x00000800) == 0x00000800) && addPartitionToTxnResponse_ != CommandAddPartitionToTxnResponse.DefaultInstance)
			{
			  addPartitionToTxnResponse_ = CommandAddPartitionToTxnResponse.newBuilder(addPartitionToTxnResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  addPartitionToTxnResponse_ = value;
			}

			bitField1_ |= 0x00000800;
			return this;
		  }
		  public Builder clearAddPartitionToTxnResponse()
		  {
			addPartitionToTxnResponse_ = CommandAddPartitionToTxnResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00000800);
			return this;
		  }

		  // optional .pulsar.proto.CommandAddSubscriptionToTxn addSubscriptionToTxn = 54;
		  internal CommandAddSubscriptionToTxn addSubscriptionToTxn_ = CommandAddSubscriptionToTxn.DefaultInstance;
		  public bool hasAddSubscriptionToTxn()
		  {
			return ((bitField1_ & 0x00001000) == 0x00001000);
		  }
		  public CommandAddSubscriptionToTxn getAddSubscriptionToTxn()
		  {
			return addSubscriptionToTxn_;
		  }
		  public Builder setAddSubscriptionToTxn(CommandAddSubscriptionToTxn value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			addSubscriptionToTxn_ = value;

			bitField1_ |= 0x00001000;
			return this;
		  }
		  public Builder setAddSubscriptionToTxn(CommandAddSubscriptionToTxn.Builder builderForValue)
		  {
			addSubscriptionToTxn_ = builderForValue.build();

			bitField1_ |= 0x00001000;
			return this;
		  }
		  public Builder mergeAddSubscriptionToTxn(CommandAddSubscriptionToTxn value)
		  {
			if (((bitField1_ & 0x00001000) == 0x00001000) && addSubscriptionToTxn_ != CommandAddSubscriptionToTxn.DefaultInstance)
			{
			  addSubscriptionToTxn_ = CommandAddSubscriptionToTxn.newBuilder(addSubscriptionToTxn_).mergeFrom(value).buildPartial();
			}
			else
			{
			  addSubscriptionToTxn_ = value;
			}

			bitField1_ |= 0x00001000;
			return this;
		  }
		  public Builder clearAddSubscriptionToTxn()
		  {
			addSubscriptionToTxn_ = CommandAddSubscriptionToTxn.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00001000);
			return this;
		  }

		  // optional .pulsar.proto.CommandAddSubscriptionToTxnResponse addSubscriptionToTxnResponse = 55;
		  internal CommandAddSubscriptionToTxnResponse addSubscriptionToTxnResponse_ = CommandAddSubscriptionToTxnResponse.DefaultInstance;
		  public bool hasAddSubscriptionToTxnResponse()
		  {
			return ((bitField1_ & 0x00002000) == 0x00002000);
		  }
		  public CommandAddSubscriptionToTxnResponse getAddSubscriptionToTxnResponse()
		  {
			return addSubscriptionToTxnResponse_;
		  }
		  public Builder setAddSubscriptionToTxnResponse(CommandAddSubscriptionToTxnResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			addSubscriptionToTxnResponse_ = value;

			bitField1_ |= 0x00002000;
			return this;
		  }
		  public Builder setAddSubscriptionToTxnResponse(CommandAddSubscriptionToTxnResponse.Builder builderForValue)
		  {
			addSubscriptionToTxnResponse_ = builderForValue.build();

			bitField1_ |= 0x00002000;
			return this;
		  }
		  public Builder mergeAddSubscriptionToTxnResponse(CommandAddSubscriptionToTxnResponse value)
		  {
			if (((bitField1_ & 0x00002000) == 0x00002000) && addSubscriptionToTxnResponse_ != CommandAddSubscriptionToTxnResponse.DefaultInstance)
			{
			  addSubscriptionToTxnResponse_ = CommandAddSubscriptionToTxnResponse.newBuilder(addSubscriptionToTxnResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  addSubscriptionToTxnResponse_ = value;
			}

			bitField1_ |= 0x00002000;
			return this;
		  }
		  public Builder clearAddSubscriptionToTxnResponse()
		  {
			addSubscriptionToTxnResponse_ = CommandAddSubscriptionToTxnResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00002000);
			return this;
		  }

		  // optional .pulsar.proto.CommandEndTxn endTxn = 56;
		  internal CommandEndTxn endTxn_ = CommandEndTxn.DefaultInstance;
		  public bool hasEndTxn()
		  {
			return ((bitField1_ & 0x00004000) == 0x00004000);
		  }
		  public CommandEndTxn getEndTxn()
		  {
			return endTxn_;
		  }
		  public Builder setEndTxn(CommandEndTxn value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			endTxn_ = value;

			bitField1_ |= 0x00004000;
			return this;
		  }
		  public Builder setEndTxn(CommandEndTxn.Builder builderForValue)
		  {
			endTxn_ = builderForValue.build();

			bitField1_ |= 0x00004000;
			return this;
		  }
		  public Builder mergeEndTxn(CommandEndTxn value)
		  {
			if (((bitField1_ & 0x00004000) == 0x00004000) && endTxn_ != CommandEndTxn.DefaultInstance)
			{
			  endTxn_ = CommandEndTxn.newBuilder(endTxn_).mergeFrom(value).buildPartial();
			}
			else
			{
			  endTxn_ = value;
			}

			bitField1_ |= 0x00004000;
			return this;
		  }
		  public Builder clearEndTxn()
		  {
			endTxn_ = CommandEndTxn.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00004000);
			return this;
		  }

		  // optional .pulsar.proto.CommandEndTxnResponse endTxnResponse = 57;
		  internal CommandEndTxnResponse endTxnResponse_ = CommandEndTxnResponse.DefaultInstance;
		  public bool hasEndTxnResponse()
		  {
			return ((bitField1_ & 0x00008000) == 0x00008000);
		  }
		  public CommandEndTxnResponse getEndTxnResponse()
		  {
			return endTxnResponse_;
		  }
		  public Builder setEndTxnResponse(CommandEndTxnResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			endTxnResponse_ = value;

			bitField1_ |= 0x00008000;
			return this;
		  }
		  public Builder setEndTxnResponse(CommandEndTxnResponse.Builder builderForValue)
		  {
			endTxnResponse_ = builderForValue.build();

			bitField1_ |= 0x00008000;
			return this;
		  }
		  public Builder mergeEndTxnResponse(CommandEndTxnResponse value)
		  {
			if (((bitField1_ & 0x00008000) == 0x00008000) && endTxnResponse_ != CommandEndTxnResponse.DefaultInstance)
			{
			  endTxnResponse_ = CommandEndTxnResponse.newBuilder(endTxnResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  endTxnResponse_ = value;
			}

			bitField1_ |= 0x00008000;
			return this;
		  }
		  public Builder clearEndTxnResponse()
		  {
			endTxnResponse_ = CommandEndTxnResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00008000);
			return this;
		  }

		  // optional .pulsar.proto.CommandEndTxnOnPartition endTxnOnPartition = 58;
		  internal CommandEndTxnOnPartition endTxnOnPartition_ = CommandEndTxnOnPartition.DefaultInstance;
		  public bool hasEndTxnOnPartition()
		  {
			return ((bitField1_ & 0x00010000) == 0x00010000);
		  }
		  public CommandEndTxnOnPartition getEndTxnOnPartition()
		  {
			return endTxnOnPartition_;
		  }
		  public Builder setEndTxnOnPartition(CommandEndTxnOnPartition value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			endTxnOnPartition_ = value;

			bitField1_ |= 0x00010000;
			return this;
		  }
		  public Builder setEndTxnOnPartition(CommandEndTxnOnPartition.Builder builderForValue)
		  {
			endTxnOnPartition_ = builderForValue.build();

			bitField1_ |= 0x00010000;
			return this;
		  }
		  public Builder mergeEndTxnOnPartition(CommandEndTxnOnPartition value)
		  {
			if (((bitField1_ & 0x00010000) == 0x00010000) && endTxnOnPartition_ != CommandEndTxnOnPartition.DefaultInstance)
			{
			  endTxnOnPartition_ = CommandEndTxnOnPartition.newBuilder(endTxnOnPartition_).mergeFrom(value).buildPartial();
			}
			else
			{
			  endTxnOnPartition_ = value;
			}

			bitField1_ |= 0x00010000;
			return this;
		  }
		  public Builder clearEndTxnOnPartition()
		  {
			endTxnOnPartition_ = CommandEndTxnOnPartition.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00010000);
			return this;
		  }

		  // optional .pulsar.proto.CommandEndTxnOnPartitionResponse endTxnOnPartitionResponse = 59;
		  internal CommandEndTxnOnPartitionResponse endTxnOnPartitionResponse_ = CommandEndTxnOnPartitionResponse.DefaultInstance;
		  public bool HasEndTxnOnPartitionResponse()
		  {
			return ((bitField1_ & 0x00020000) == 0x00020000);
		  }
		  public CommandEndTxnOnPartitionResponse GetEndTxnOnPartitionResponse()
		  {
			return endTxnOnPartitionResponse_;
		  }
		  public Builder SetEndTxnOnPartitionResponse(CommandEndTxnOnPartitionResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			endTxnOnPartitionResponse_ = value;

			bitField1_ |= 0x00020000;
			return this;
		  }
		  public Builder SetEndTxnOnPartitionResponse(CommandEndTxnOnPartitionResponse.Builder builderForValue)
		  {
			endTxnOnPartitionResponse_ = builderForValue.build();

			bitField1_ |= 0x00020000;
			return this;
		  }
		  public Builder NergeEndTxnOnPartitionResponse(CommandEndTxnOnPartitionResponse value)
		  {
			if (((bitField1_ & 0x00020000) == 0x00020000) && endTxnOnPartitionResponse_ != CommandEndTxnOnPartitionResponse.DefaultInstance)
			{
			  endTxnOnPartitionResponse_ = CommandEndTxnOnPartitionResponse.newBuilder(endTxnOnPartitionResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  endTxnOnPartitionResponse_ = value;
			}

			bitField1_ |= 0x00020000;
			return this;
		  }
		  public Builder ClearEndTxnOnPartitionResponse()
		  {
			endTxnOnPartitionResponse_ = CommandEndTxnOnPartitionResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00020000);
			return this;
		  }

		  // optional .pulsar.proto.CommandEndTxnOnSubscription endTxnOnSubscription = 60;
		  internal CommandEndTxnOnSubscription endTxnOnSubscription_ = CommandEndTxnOnSubscription.DefaultInstance;
		  public bool HasEndTxnOnSubscription()
		  {
			return ((bitField1_ & 0x00040000) == 0x00040000);
		  }
		  public CommandEndTxnOnSubscription GetEndTxnOnSubscription()
		  {
			return endTxnOnSubscription_;
		  }
		  public Builder SetEndTxnOnSubscription(CommandEndTxnOnSubscription value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			endTxnOnSubscription_ = value;

			bitField1_ |= 0x00040000;
			return this;
		  }
		  public Builder SetEndTxnOnSubscription(CommandEndTxnOnSubscription.Builder builderForValue)
		  {
			endTxnOnSubscription_ = builderForValue.build();

			bitField1_ |= 0x00040000;
			return this;
		  }
		  public Builder MergeEndTxnOnSubscription(CommandEndTxnOnSubscription value)
		  {
			if (((bitField1_ & 0x00040000) == 0x00040000) && endTxnOnSubscription_ != CommandEndTxnOnSubscription.DefaultInstance)
			{
			  endTxnOnSubscription_ = CommandEndTxnOnSubscription.newBuilder(endTxnOnSubscription_).mergeFrom(value).buildPartial();
			}
			else
			{
			  endTxnOnSubscription_ = value;
			}

			bitField1_ |= 0x00040000;
			return this;
		  }
		  public Builder ClearEndTxnOnSubscription()
		  {
			endTxnOnSubscription_ = CommandEndTxnOnSubscription.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00040000);
			return this;
		  }

		  // optional .pulsar.proto.CommandEndTxnOnSubscriptionResponse endTxnOnSubscriptionResponse = 61;
		  internal CommandEndTxnOnSubscriptionResponse endTxnOnSubscriptionResponse_ = CommandEndTxnOnSubscriptionResponse.DefaultInstance;
		  public bool HasEndTxnOnSubscriptionResponse()
		  {
			return ((bitField1_ & 0x00080000) == 0x00080000);
		  }
		  public CommandEndTxnOnSubscriptionResponse GetEndTxnOnSubscriptionResponse()
		  {
			return endTxnOnSubscriptionResponse_;
		  }
		  public Builder SetEndTxnOnSubscriptionResponse(CommandEndTxnOnSubscriptionResponse value)
		  {
			if (value == null)
			{
			  throw new System.NullReferenceException();
			}
			endTxnOnSubscriptionResponse_ = value;

			bitField1_ |= 0x00080000;
			return this;
		  }
		  public Builder SetEndTxnOnSubscriptionResponse(CommandEndTxnOnSubscriptionResponse.Builder builderForValue)
		  {
			endTxnOnSubscriptionResponse_ = builderForValue.build();

			bitField1_ |= 0x00080000;
			return this;
		  }
		  public Builder MergeEndTxnOnSubscriptionResponse(CommandEndTxnOnSubscriptionResponse value)
		  {
			if (((bitField1_ & 0x00080000) == 0x00080000) && endTxnOnSubscriptionResponse_ != CommandEndTxnOnSubscriptionResponse.DefaultInstance)
			{
			  endTxnOnSubscriptionResponse_ = CommandEndTxnOnSubscriptionResponse.newBuilder(endTxnOnSubscriptionResponse_).mergeFrom(value).buildPartial();
			}
			else
			{
			  endTxnOnSubscriptionResponse_ = value;
			}

			bitField1_ |= 0x00080000;
			return this;
		  }
		  public Builder ClearEndTxnOnSubscriptionResponse()
		  {
			endTxnOnSubscriptionResponse_ = CommandEndTxnOnSubscriptionResponse.DefaultInstance;

			bitField1_ = (bitField1_ & ~0x00080000);
			return this;
		  }

		  // @@protoc_insertion_point(builder_scope:pulsar.proto.BaseCommand)
		}

		static BaseCommand()
		{
		  defaultInstance = new BaseCommand(true);
		  defaultInstance.initFields();
		}
	  }


	  static PulsarApi()
	  {
	  }

	}

}