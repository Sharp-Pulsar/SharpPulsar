// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PulsarApi.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pulsar.Proto {

  /// <summary>Holder for reflection information generated from PulsarApi.proto</summary>
  public static partial class PulsarApiReflection {

    #region Descriptor
    /// <summary>File descriptor for PulsarApi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PulsarApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9QdWxzYXJBcGkucHJvdG8SDHB1bHNhci5wcm90byK+AgoGU2NoZW1hEgwK",
            "BG5hbWUYASACKAkSEwoLc2NoZW1hX2RhdGEYAyACKAwSJwoEdHlwZRgEIAIo",
            "DjIZLnB1bHNhci5wcm90by5TY2hlbWEuVHlwZRIqCgpwcm9wZXJ0aWVzGAUg",
            "AygLMhYucHVsc2FyLnByb3RvLktleVZhbHVlIrsBCgRUeXBlEggKBE5vbmUQ",
            "ABIKCgZTdHJpbmcQARIICgRKc29uEAISDAoIUHJvdG9idWYQAxIICgRBdnJv",
            "EAQSCAoEQm9vbBAFEggKBEludDgQBhIJCgVJbnQxNhAHEgkKBUludDMyEAgS",
            "CQoFSW50NjQQCRIJCgVGbG9hdBAKEgoKBkRvdWJsZRALEggKBERhdGUQDBII",
            "CgRUaW1lEA0SDQoJVGltZXN0YW1wEA4SDAoIS2V5VmFsdWUQDyJiCg1NZXNz",
            "YWdlSWREYXRhEhAKCGxlZGdlcklkGAEgAigEEg8KB2VudHJ5SWQYAiACKAQS",
            "FQoJcGFydGl0aW9uGAMgASgFOgItMRIXCgtiYXRjaF9pbmRleBgEIAEoBToC",
            "LTEiJgoIS2V5VmFsdWUSCwoDa2V5GAEgAigJEg0KBXZhbHVlGAIgAigJIioK",
            "DEtleUxvbmdWYWx1ZRILCgNrZXkYASACKAkSDQoFdmFsdWUYAiACKAQiJgoI",
            "SW50UmFuZ2USDQoFc3RhcnQYASACKAUSCwoDZW5kGAIgAigFIlYKDkVuY3J5",
            "cHRpb25LZXlzEgsKA2tleRgBIAIoCRINCgV2YWx1ZRgCIAIoDBIoCghtZXRh",
            "ZGF0YRgDIAMoCzIWLnB1bHNhci5wcm90by5LZXlWYWx1ZSKfBQoPTWVzc2Fn",
            "ZU1ldGFkYXRhEhUKDXByb2R1Y2VyX25hbWUYASACKAkSEwoLc2VxdWVuY2Vf",
            "aWQYAiACKAQSFAoMcHVibGlzaF90aW1lGAMgAigEEioKCnByb3BlcnRpZXMY",
            "BCADKAsyFi5wdWxzYXIucHJvdG8uS2V5VmFsdWUSFwoPcmVwbGljYXRlZF9m",
            "cm9tGAUgASgJEhUKDXBhcnRpdGlvbl9rZXkYBiABKAkSFAoMcmVwbGljYXRl",
            "X3RvGAcgAygJEjgKC2NvbXByZXNzaW9uGAggASgOMh0ucHVsc2FyLnByb3Rv",
            "LkNvbXByZXNzaW9uVHlwZToETk9ORRIcChF1bmNvbXByZXNzZWRfc2l6ZRgJ",
            "IAEoDToBMBIgChVudW1fbWVzc2FnZXNfaW5fYmF0Y2gYCyABKAU6ATESFQoK",
            "ZXZlbnRfdGltZRgMIAEoBDoBMBI1Cg9lbmNyeXB0aW9uX2tleXMYDSADKAsy",
            "HC5wdWxzYXIucHJvdG8uRW5jcnlwdGlvbktleXMSFwoPZW5jcnlwdGlvbl9h",
            "bGdvGA4gASgJEhgKEGVuY3J5cHRpb25fcGFyYW0YDyABKAwSFgoOc2NoZW1h",
            "X3ZlcnNpb24YECABKAwSKAoZcGFydGl0aW9uX2tleV9iNjRfZW5jb2RlZBgR",
            "IAEoCDoFZmFsc2USFAoMb3JkZXJpbmdfa2V5GBIgASgMEhcKD2RlbGl2ZXJf",
            "YXRfdGltZRgTIAEoAxITCgttYXJrZXJfdHlwZRgUIAEoBRIbChB0eG5pZF9s",
            "ZWFzdF9iaXRzGBYgASgEOgEwEhoKD3R4bmlkX21vc3RfYml0cxgXIAEoBDoB",
            "MBIeChNoaWdoZXN0X3NlcXVlbmNlX2lkGBggASgEOgEwIvoBChVTaW5nbGVN",
            "ZXNzYWdlTWV0YWRhdGESKgoKcHJvcGVydGllcxgBIAMoCzIWLnB1bHNhci5w",
            "cm90by5LZXlWYWx1ZRIVCg1wYXJ0aXRpb25fa2V5GAIgASgJEhQKDHBheWxv",
            "YWRfc2l6ZRgDIAIoBRIcCg1jb21wYWN0ZWRfb3V0GAQgASgIOgVmYWxzZRIV",
            "CgpldmVudF90aW1lGAUgASgEOgEwEigKGXBhcnRpdGlvbl9rZXlfYjY0X2Vu",
            "Y29kZWQYBiABKAg6BWZhbHNlEhQKDG9yZGVyaW5nX2tleRgHIAEoDBITCgtz",
            "ZXF1ZW5jZV9pZBgIIAEoBCKUAgoOQ29tbWFuZENvbm5lY3QSFgoOY2xpZW50",
            "X3ZlcnNpb24YASACKAkSLQoLYXV0aF9tZXRob2QYAiABKA4yGC5wdWxzYXIu",
            "cHJvdG8uQXV0aE1ldGhvZBIYChBhdXRoX21ldGhvZF9uYW1lGAUgASgJEhEK",
            "CWF1dGhfZGF0YRgDIAEoDBIbChBwcm90b2NvbF92ZXJzaW9uGAQgASgFOgEw",
            "EhsKE3Byb3h5X3RvX2Jyb2tlcl91cmwYBiABKAkSGgoSb3JpZ2luYWxfcHJp",
            "bmNpcGFsGAcgASgJEhoKEm9yaWdpbmFsX2F1dGhfZGF0YRgIIAEoCRIcChRv",
            "cmlnaW5hbF9hdXRoX21ldGhvZBgJIAEoCSJhChBDb21tYW5kQ29ubmVjdGVk",
            "EhYKDnNlcnZlcl92ZXJzaW9uGAEgAigJEhsKEHByb3RvY29sX3ZlcnNpb24Y",
            "AiABKAU6ATASGAoQbWF4X21lc3NhZ2Vfc2l6ZRgDIAEoBSJ0ChNDb21tYW5k",
            "QXV0aFJlc3BvbnNlEhYKDmNsaWVudF92ZXJzaW9uGAEgASgJEigKCHJlc3Bv",
            "bnNlGAIgASgLMhYucHVsc2FyLnByb3RvLkF1dGhEYXRhEhsKEHByb3RvY29s",
            "X3ZlcnNpb24YAyABKAU6ATAidgoUQ29tbWFuZEF1dGhDaGFsbGVuZ2USFgoO",
            "c2VydmVyX3ZlcnNpb24YASABKAkSKQoJY2hhbGxlbmdlGAIgASgLMhYucHVs",
            "c2FyLnByb3RvLkF1dGhEYXRhEhsKEHByb3RvY29sX3ZlcnNpb24YAyABKAU6",
            "ATAiNwoIQXV0aERhdGESGAoQYXV0aF9tZXRob2RfbmFtZRgBIAEoCRIRCglh",
            "dXRoX2RhdGEYAiABKAwibwoNS2V5U2hhcmVkTWV0YRIyCg1rZXlTaGFyZWRN",
            "b2RlGAEgAigOMhsucHVsc2FyLnByb3RvLktleVNoYXJlZE1vZGUSKgoKaGFz",
            "aFJhbmdlcxgDIAMoCzIWLnB1bHNhci5wcm90by5JbnRSYW5nZSLuBQoQQ29t",
            "bWFuZFN1YnNjcmliZRINCgV0b3BpYxgBIAIoCRIUCgxzdWJzY3JpcHRpb24Y",
            "AiACKAkSNwoHc3ViVHlwZRgDIAIoDjImLnB1bHNhci5wcm90by5Db21tYW5k",
            "U3Vic2NyaWJlLlN1YlR5cGUSEwoLY29uc3VtZXJfaWQYBCACKAQSEgoKcmVx",
            "dWVzdF9pZBgFIAIoBBIVCg1jb25zdW1lcl9uYW1lGAYgASgJEhYKDnByaW9y",
            "aXR5X2xldmVsGAcgASgFEhUKB2R1cmFibGUYCCABKAg6BHRydWUSNQoQc3Rh",
            "cnRfbWVzc2FnZV9pZBgJIAEoCzIbLnB1bHNhci5wcm90by5NZXNzYWdlSWRE",
            "YXRhEigKCG1ldGFkYXRhGAogAygLMhYucHVsc2FyLnByb3RvLktleVZhbHVl",
            "EhYKDnJlYWRfY29tcGFjdGVkGAsgASgIEiQKBnNjaGVtYRgMIAEoCzIULnB1",
            "bHNhci5wcm90by5TY2hlbWESTwoPaW5pdGlhbFBvc2l0aW9uGA0gASgOMi4u",
            "cHVsc2FyLnByb3RvLkNvbW1hbmRTdWJzY3JpYmUuSW5pdGlhbFBvc2l0aW9u",
            "OgZMYXRlc3QSJAoccmVwbGljYXRlX3N1YnNjcmlwdGlvbl9zdGF0ZRgOIAEo",
            "CBIiChRmb3JjZV90b3BpY19jcmVhdGlvbhgPIAEoCDoEdHJ1ZRIuCiNzdGFy",
            "dF9tZXNzYWdlX3JvbGxiYWNrX2R1cmF0aW9uX3NlYxgQIAEoBDoBMBIyCg1r",
            "ZXlTaGFyZWRNZXRhGBEgASgLMhsucHVsc2FyLnByb3RvLktleVNoYXJlZE1l",
            "dGEiQgoHU3ViVHlwZRINCglFeGNsdXNpdmUQABIKCgZTaGFyZWQQARIMCghG",
            "YWlsb3ZlchACEg4KCktleV9TaGFyZWQQAyIrCg9Jbml0aWFsUG9zaXRpb24S",
            "CgoGTGF0ZXN0EAASDAoIRWFybGllc3QQASKaAQofQ29tbWFuZFBhcnRpdGlv",
            "bmVkVG9waWNNZXRhZGF0YRINCgV0b3BpYxgBIAIoCRISCgpyZXF1ZXN0X2lk",
            "GAIgAigEEhoKEm9yaWdpbmFsX3ByaW5jaXBhbBgDIAEoCRIaChJvcmlnaW5h",
            "bF9hdXRoX2RhdGEYBCABKAkSHAoUb3JpZ2luYWxfYXV0aF9tZXRob2QYBSAB",
            "KAkihwIKJ0NvbW1hbmRQYXJ0aXRpb25lZFRvcGljTWV0YWRhdGFSZXNwb25z",
            "ZRISCgpwYXJ0aXRpb25zGAEgASgNEhIKCnJlcXVlc3RfaWQYAiACKAQSUgoI",
            "cmVzcG9uc2UYAyABKA4yQC5wdWxzYXIucHJvdG8uQ29tbWFuZFBhcnRpdGlv",
            "bmVkVG9waWNNZXRhZGF0YVJlc3BvbnNlLkxvb2t1cFR5cGUSKAoFZXJyb3IY",
            "BCABKA4yGS5wdWxzYXIucHJvdG8uU2VydmVyRXJyb3ISDwoHbWVzc2FnZRgF",
            "IAEoCSIlCgpMb29rdXBUeXBlEgsKB1N1Y2Nlc3MQABIKCgZGYWlsZWQQASKr",
            "AQoSQ29tbWFuZExvb2t1cFRvcGljEg0KBXRvcGljGAEgAigJEhIKCnJlcXVl",
            "c3RfaWQYAiACKAQSHAoNYXV0aG9yaXRhdGl2ZRgDIAEoCDoFZmFsc2USGgoS",
            "b3JpZ2luYWxfcHJpbmNpcGFsGAQgASgJEhoKEm9yaWdpbmFsX2F1dGhfZGF0",
            "YRgFIAEoCRIcChRvcmlnaW5hbF9hdXRoX21ldGhvZBgGIAEoCSLmAgoaQ29t",
            "bWFuZExvb2t1cFRvcGljUmVzcG9uc2USGAoQYnJva2VyU2VydmljZVVybBgB",
            "IAEoCRIbChNicm9rZXJTZXJ2aWNlVXJsVGxzGAIgASgJEkUKCHJlc3BvbnNl",
            "GAMgASgOMjMucHVsc2FyLnByb3RvLkNvbW1hbmRMb29rdXBUb3BpY1Jlc3Bv",
            "bnNlLkxvb2t1cFR5cGUSEgoKcmVxdWVzdF9pZBgEIAIoBBIcCg1hdXRob3Jp",
            "dGF0aXZlGAUgASgIOgVmYWxzZRIoCgVlcnJvchgGIAEoDjIZLnB1bHNhci5w",
            "cm90by5TZXJ2ZXJFcnJvchIPCgdtZXNzYWdlGAcgASgJEigKGXByb3h5X3Ro",
            "cm91Z2hfc2VydmljZV91cmwYCCABKAg6BWZhbHNlIjMKCkxvb2t1cFR5cGUS",
            "DAoIUmVkaXJlY3QQABILCgdDb25uZWN0EAESCgoGRmFpbGVkEAIihwIKD0Nv",
            "bW1hbmRQcm9kdWNlchINCgV0b3BpYxgBIAIoCRITCgtwcm9kdWNlcl9pZBgC",
            "IAIoBBISCgpyZXF1ZXN0X2lkGAMgAigEEhUKDXByb2R1Y2VyX25hbWUYBCAB",
            "KAkSGAoJZW5jcnlwdGVkGAUgASgIOgVmYWxzZRIoCghtZXRhZGF0YRgGIAMo",
            "CzIWLnB1bHNhci5wcm90by5LZXlWYWx1ZRIkCgZzY2hlbWEYByABKAsyFC5w",
            "dWxzYXIucHJvdG8uU2NoZW1hEhAKBWVwb2NoGAggASgEOgEwEikKG3VzZXJf",
            "cHJvdmlkZWRfcHJvZHVjZXJfbmFtZRgJIAEoCDoEdHJ1ZSKpAQoLQ29tbWFu",
            "ZFNlbmQSEwoLcHJvZHVjZXJfaWQYASACKAQSEwoLc2VxdWVuY2VfaWQYAiAC",
            "KAQSFwoMbnVtX21lc3NhZ2VzGAMgASgFOgExEhsKEHR4bmlkX2xlYXN0X2Jp",
            "dHMYBCABKAQ6ATASGgoPdHhuaWRfbW9zdF9iaXRzGAUgASgEOgEwEh4KE2hp",
            "Z2hlc3Rfc2VxdWVuY2VfaWQYBiABKAQ6ATAijwEKEkNvbW1hbmRTZW5kUmVj",
            "ZWlwdBITCgtwcm9kdWNlcl9pZBgBIAIoBBITCgtzZXF1ZW5jZV9pZBgCIAIo",
            "BBIvCgptZXNzYWdlX2lkGAMgASgLMhsucHVsc2FyLnByb3RvLk1lc3NhZ2VJ",
            "ZERhdGESHgoTaGlnaGVzdF9zZXF1ZW5jZV9pZBgEIAEoBDoBMCJ3ChBDb21t",
            "YW5kU2VuZEVycm9yEhMKC3Byb2R1Y2VyX2lkGAEgAigEEhMKC3NlcXVlbmNl",
            "X2lkGAIgAigEEigKBWVycm9yGAMgAigOMhkucHVsc2FyLnByb3RvLlNlcnZl",
            "ckVycm9yEg8KB21lc3NhZ2UYBCACKAkicwoOQ29tbWFuZE1lc3NhZ2USEwoL",
            "Y29uc3VtZXJfaWQYASACKAQSLwoKbWVzc2FnZV9pZBgCIAIoCzIbLnB1bHNh",
            "ci5wcm90by5NZXNzYWdlSWREYXRhEhsKEHJlZGVsaXZlcnlfY291bnQYAyAB",
            "KA06ATAi8AMKCkNvbW1hbmRBY2sSEwoLY29uc3VtZXJfaWQYASACKAQSMgoI",
            "YWNrX3R5cGUYAiACKA4yIC5wdWxzYXIucHJvdG8uQ29tbWFuZEFjay5BY2tU",
            "eXBlEi8KCm1lc3NhZ2VfaWQYAyADKAsyGy5wdWxzYXIucHJvdG8uTWVzc2Fn",
            "ZUlkRGF0YRJCChB2YWxpZGF0aW9uX2Vycm9yGAQgASgOMigucHVsc2FyLnBy",
            "b3RvLkNvbW1hbmRBY2suVmFsaWRhdGlvbkVycm9yEi4KCnByb3BlcnRpZXMY",
            "BSADKAsyGi5wdWxzYXIucHJvdG8uS2V5TG9uZ1ZhbHVlEhsKEHR4bmlkX2xl",
            "YXN0X2JpdHMYBiABKAQ6ATASGgoPdHhuaWRfbW9zdF9iaXRzGAcgASgEOgEw",
            "IikKB0Fja1R5cGUSDgoKSW5kaXZpZHVhbBAAEg4KCkN1bXVsYXRpdmUQASKP",
            "AQoPVmFsaWRhdGlvbkVycm9yEh4KGlVuY29tcHJlc3NlZFNpemVDb3JydXB0",
            "aW9uEAASFgoSRGVjb21wcmVzc2lvbkVycm9yEAESFAoQQ2hlY2tzdW1NaXNt",
            "YXRjaBACEhkKFUJhdGNoRGVTZXJpYWxpemVFcnJvchADEhMKD0RlY3J5cHRp",
            "b25FcnJvchAEIp0BChJDb21tYW5kQWNrUmVzcG9uc2USEwoLY29uc3VtZXJf",
            "aWQYASACKAQSGwoQdHhuaWRfbGVhc3RfYml0cxgCIAEoBDoBMBIaCg90eG5p",
            "ZF9tb3N0X2JpdHMYAyABKAQ6ATASKAoFZXJyb3IYBCABKA4yGS5wdWxzYXIu",
            "cHJvdG8uU2VydmVyRXJyb3ISDwoHbWVzc2FnZRgFIAEoCSJMChtDb21tYW5k",
            "QWN0aXZlQ29uc3VtZXJDaGFuZ2USEwoLY29uc3VtZXJfaWQYASACKAQSGAoJ",
            "aXNfYWN0aXZlGAIgASgIOgVmYWxzZSI6CgtDb21tYW5kRmxvdxITCgtjb25z",
            "dW1lcl9pZBgBIAIoBBIWCg5tZXNzYWdlUGVybWl0cxgCIAIoDSI9ChJDb21t",
            "YW5kVW5zdWJzY3JpYmUSEwoLY29uc3VtZXJfaWQYASACKAQSEgoKcmVxdWVz",
            "dF9pZBgCIAIoBCKFAQoLQ29tbWFuZFNlZWsSEwoLY29uc3VtZXJfaWQYASAC",
            "KAQSEgoKcmVxdWVzdF9pZBgCIAIoBBIvCgptZXNzYWdlX2lkGAMgASgLMhsu",
            "cHVsc2FyLnByb3RvLk1lc3NhZ2VJZERhdGESHAoUbWVzc2FnZV9wdWJsaXNo",
            "X3RpbWUYBCABKAQiLwoYQ29tbWFuZFJlYWNoZWRFbmRPZlRvcGljEhMKC2Nv",
            "bnN1bWVyX2lkGAEgAigEIj8KFENvbW1hbmRDbG9zZVByb2R1Y2VyEhMKC3By",
            "b2R1Y2VyX2lkGAEgAigEEhIKCnJlcXVlc3RfaWQYAiACKAQiPwoUQ29tbWFu",
            "ZENsb3NlQ29uc3VtZXISEwoLY29uc3VtZXJfaWQYASACKAQSEgoKcmVxdWVz",
            "dF9pZBgCIAIoBCJvCiZDb21tYW5kUmVkZWxpdmVyVW5hY2tub3dsZWRnZWRN",
            "ZXNzYWdlcxITCgtjb25zdW1lcl9pZBgBIAIoBBIwCgttZXNzYWdlX2lkcxgC",
            "IAMoCzIbLnB1bHNhci5wcm90by5NZXNzYWdlSWREYXRhIkoKDkNvbW1hbmRT",
            "dWNjZXNzEhIKCnJlcXVlc3RfaWQYASACKAQSJAoGc2NoZW1hGAIgASgLMhQu",
            "cHVsc2FyLnByb3RvLlNjaGVtYSJ5ChZDb21tYW5kUHJvZHVjZXJTdWNjZXNz",
            "EhIKCnJlcXVlc3RfaWQYASACKAQSFQoNcHJvZHVjZXJfbmFtZRgCIAIoCRIc",
            "ChBsYXN0X3NlcXVlbmNlX2lkGAMgASgDOgItMRIWCg5zY2hlbWFfdmVyc2lv",
            "bhgEIAEoDCJdCgxDb21tYW5kRXJyb3ISEgoKcmVxdWVzdF9pZBgBIAIoBBIo",
            "CgVlcnJvchgCIAIoDjIZLnB1bHNhci5wcm90by5TZXJ2ZXJFcnJvchIPCgdt",
            "ZXNzYWdlGAMgAigJIg0KC0NvbW1hbmRQaW5nIg0KC0NvbW1hbmRQb25nIj8K",
            "FENvbW1hbmRDb25zdW1lclN0YXRzEhIKCnJlcXVlc3RfaWQYASACKAQSEwoL",
            "Y29uc3VtZXJfaWQYBCACKAQikgMKHENvbW1hbmRDb25zdW1lclN0YXRzUmVz",
            "cG9uc2USEgoKcmVxdWVzdF9pZBgBIAIoBBItCgplcnJvcl9jb2RlGAIgASgO",
            "MhkucHVsc2FyLnByb3RvLlNlcnZlckVycm9yEhUKDWVycm9yX21lc3NhZ2UY",
            "AyABKAkSEgoKbXNnUmF0ZU91dBgEIAEoARIYChBtc2dUaHJvdWdocHV0T3V0",
            "GAUgASgBEhgKEG1zZ1JhdGVSZWRlbGl2ZXIYBiABKAESFAoMY29uc3VtZXJO",
            "YW1lGAcgASgJEhgKEGF2YWlsYWJsZVBlcm1pdHMYCCABKAQSFwoPdW5hY2tl",
            "ZE1lc3NhZ2VzGAkgASgEEiQKHGJsb2NrZWRDb25zdW1lck9uVW5hY2tlZE1z",
            "Z3MYCiABKAgSDwoHYWRkcmVzcxgLIAEoCRIWCg5jb25uZWN0ZWRTaW5jZRgM",
            "IAEoCRIMCgR0eXBlGA0gASgJEhYKDm1zZ1JhdGVFeHBpcmVkGA4gASgBEhIK",
            "Cm1zZ0JhY2tsb2cYDyABKAQiQgoXQ29tbWFuZEdldExhc3RNZXNzYWdlSWQS",
            "EwoLY29uc3VtZXJfaWQYASACKAQSEgoKcmVxdWVzdF9pZBgCIAIoBCJrCh9D",
            "b21tYW5kR2V0TGFzdE1lc3NhZ2VJZFJlc3BvbnNlEjQKD2xhc3RfbWVzc2Fn",
            "ZV9pZBgBIAIoCzIbLnB1bHNhci5wcm90by5NZXNzYWdlSWREYXRhEhIKCnJl",
            "cXVlc3RfaWQYAiACKAQiwwEKG0NvbW1hbmRHZXRUb3BpY3NPZk5hbWVzcGFj",
            "ZRISCgpyZXF1ZXN0X2lkGAEgAigEEhEKCW5hbWVzcGFjZRgCIAIoCRJICgRt",
            "b2RlGAMgASgOMi4ucHVsc2FyLnByb3RvLkNvbW1hbmRHZXRUb3BpY3NPZk5h",
            "bWVzcGFjZS5Nb2RlOgpQRVJTSVNURU5UIjMKBE1vZGUSDgoKUEVSU0lTVEVO",
            "VBAAEhIKDk5PTl9QRVJTSVNURU5UEAESBwoDQUxMEAIiSQojQ29tbWFuZEdl",
            "dFRvcGljc09mTmFtZXNwYWNlUmVzcG9uc2USEgoKcmVxdWVzdF9pZBgBIAIo",
            "BBIOCgZ0b3BpY3MYAiADKAkiTQoQQ29tbWFuZEdldFNjaGVtYRISCgpyZXF1",
            "ZXN0X2lkGAEgAigEEg0KBXRvcGljGAIgAigJEhYKDnNjaGVtYV92ZXJzaW9u",
            "GAMgASgMIrIBChhDb21tYW5kR2V0U2NoZW1hUmVzcG9uc2USEgoKcmVxdWVz",
            "dF9pZBgBIAIoBBItCgplcnJvcl9jb2RlGAIgASgOMhkucHVsc2FyLnByb3Rv",
            "LlNlcnZlckVycm9yEhUKDWVycm9yX21lc3NhZ2UYAyABKAkSJAoGc2NoZW1h",
            "GAQgASgLMhQucHVsc2FyLnByb3RvLlNjaGVtYRIWCg5zY2hlbWFfdmVyc2lv",
            "bhgFIAEoDCJjChhDb21tYW5kR2V0T3JDcmVhdGVTY2hlbWESEgoKcmVxdWVz",
            "dF9pZBgBIAIoBBINCgV0b3BpYxgCIAIoCRIkCgZzY2hlbWEYAyACKAsyFC5w",
            "dWxzYXIucHJvdG8uU2NoZW1hIpQBCiBDb21tYW5kR2V0T3JDcmVhdGVTY2hl",
            "bWFSZXNwb25zZRISCgpyZXF1ZXN0X2lkGAEgAigEEi0KCmVycm9yX2NvZGUY",
            "AiABKA4yGS5wdWxzYXIucHJvdG8uU2VydmVyRXJyb3ISFQoNZXJyb3JfbWVz",
            "c2FnZRgDIAEoCRIWCg5zY2hlbWFfdmVyc2lvbhgEIAEoDCJRCg1Db21tYW5k",
            "TmV3VHhuEhIKCnJlcXVlc3RfaWQYASACKAQSGgoPdHhuX3R0bF9zZWNvbmRz",
            "GAIgASgEOgEwEhAKBXRjX2lkGAMgASgEOgEwIp8BChVDb21tYW5kTmV3VHhu",
            "UmVzcG9uc2USEgoKcmVxdWVzdF9pZBgBIAIoBBIbChB0eG5pZF9sZWFzdF9i",
            "aXRzGAIgASgEOgEwEhoKD3R4bmlkX21vc3RfYml0cxgDIAEoBDoBMBIoCgVl",
            "cnJvchgEIAEoDjIZLnB1bHNhci5wcm90by5TZXJ2ZXJFcnJvchIPCgdtZXNz",
            "YWdlGAUgASgJInsKGENvbW1hbmRBZGRQYXJ0aXRpb25Ub1R4bhISCgpyZXF1",
            "ZXN0X2lkGAEgAigEEhsKEHR4bmlkX2xlYXN0X2JpdHMYAiABKAQ6ATASGgoP",
            "dHhuaWRfbW9zdF9iaXRzGAMgASgEOgEwEhIKCnBhcnRpdGlvbnMYBCADKAki",
            "qgEKIENvbW1hbmRBZGRQYXJ0aXRpb25Ub1R4blJlc3BvbnNlEhIKCnJlcXVl",
            "c3RfaWQYASACKAQSGwoQdHhuaWRfbGVhc3RfYml0cxgCIAEoBDoBMBIaCg90",
            "eG5pZF9tb3N0X2JpdHMYAyABKAQ6ATASKAoFZXJyb3IYBCABKA4yGS5wdWxz",
            "YXIucHJvdG8uU2VydmVyRXJyb3ISDwoHbWVzc2FnZRgFIAEoCSIzCgxTdWJz",
            "Y3JpcHRpb24SDQoFdG9waWMYASACKAkSFAoMc3Vic2NyaXB0aW9uGAIgAigJ",
            "IpwBChtDb21tYW5kQWRkU3Vic2NyaXB0aW9uVG9UeG4SEgoKcmVxdWVzdF9p",
            "ZBgBIAIoBBIbChB0eG5pZF9sZWFzdF9iaXRzGAIgASgEOgEwEhoKD3R4bmlk",
            "X21vc3RfYml0cxgDIAEoBDoBMBIwCgxzdWJzY3JpcHRpb24YBCADKAsyGi5w",
            "dWxzYXIucHJvdG8uU3Vic2NyaXB0aW9uIq0BCiNDb21tYW5kQWRkU3Vic2Ny",
            "aXB0aW9uVG9UeG5SZXNwb25zZRISCgpyZXF1ZXN0X2lkGAEgAigEEhsKEHR4",
            "bmlkX2xlYXN0X2JpdHMYAiABKAQ6ATASGgoPdHhuaWRfbW9zdF9iaXRzGAMg",
            "ASgEOgEwEigKBWVycm9yGAQgASgOMhkucHVsc2FyLnByb3RvLlNlcnZlckVy",
            "cm9yEg8KB21lc3NhZ2UYBSABKAkiiQEKDUNvbW1hbmRFbmRUeG4SEgoKcmVx",
            "dWVzdF9pZBgBIAIoBBIbChB0eG5pZF9sZWFzdF9iaXRzGAIgASgEOgEwEhoK",
            "D3R4bmlkX21vc3RfYml0cxgDIAEoBDoBMBIrCgp0eG5fYWN0aW9uGAQgASgO",
            "MhcucHVsc2FyLnByb3RvLlR4bkFjdGlvbiKfAQoVQ29tbWFuZEVuZFR4blJl",
            "c3BvbnNlEhIKCnJlcXVlc3RfaWQYASACKAQSGwoQdHhuaWRfbGVhc3RfYml0",
            "cxgCIAEoBDoBMBIaCg90eG5pZF9tb3N0X2JpdHMYAyABKAQ6ATASKAoFZXJy",
            "b3IYBCABKA4yGS5wdWxzYXIucHJvdG8uU2VydmVyRXJyb3ISDwoHbWVzc2Fn",
            "ZRgFIAEoCSKjAQoYQ29tbWFuZEVuZFR4bk9uUGFydGl0aW9uEhIKCnJlcXVl",
            "c3RfaWQYASACKAQSGwoQdHhuaWRfbGVhc3RfYml0cxgCIAEoBDoBMBIaCg90",
            "eG5pZF9tb3N0X2JpdHMYAyABKAQ6ATASDQoFdG9waWMYBCABKAkSKwoKdHhu",
            "X2FjdGlvbhgFIAEoDjIXLnB1bHNhci5wcm90by5UeG5BY3Rpb24iqgEKIENv",
            "bW1hbmRFbmRUeG5PblBhcnRpdGlvblJlc3BvbnNlEhIKCnJlcXVlc3RfaWQY",
            "ASACKAQSGwoQdHhuaWRfbGVhc3RfYml0cxgCIAEoBDoBMBIaCg90eG5pZF9t",
            "b3N0X2JpdHMYAyABKAQ6ATASKAoFZXJyb3IYBCABKA4yGS5wdWxzYXIucHJv",
            "dG8uU2VydmVyRXJyb3ISDwoHbWVzc2FnZRgFIAEoCSLJAQobQ29tbWFuZEVu",
            "ZFR4bk9uU3Vic2NyaXB0aW9uEhIKCnJlcXVlc3RfaWQYASACKAQSGwoQdHhu",
            "aWRfbGVhc3RfYml0cxgCIAEoBDoBMBIaCg90eG5pZF9tb3N0X2JpdHMYAyAB",
            "KAQ6ATASMAoMc3Vic2NyaXB0aW9uGAQgASgLMhoucHVsc2FyLnByb3RvLlN1",
            "YnNjcmlwdGlvbhIrCgp0eG5fYWN0aW9uGAUgASgOMhcucHVsc2FyLnByb3Rv",
            "LlR4bkFjdGlvbiKtAQojQ29tbWFuZEVuZFR4bk9uU3Vic2NyaXB0aW9uUmVz",
            "cG9uc2USEgoKcmVxdWVzdF9pZBgBIAIoBBIbChB0eG5pZF9sZWFzdF9iaXRz",
            "GAIgASgEOgEwEhoKD3R4bmlkX21vc3RfYml0cxgDIAEoBDoBMBIoCgVlcnJv",
            "chgEIAEoDjIZLnB1bHNhci5wcm90by5TZXJ2ZXJFcnJvchIPCgdtZXNzYWdl",
            "GAUgASgJIv8hCgtCYXNlQ29tbWFuZBIsCgR0eXBlGAEgAigOMh4ucHVsc2Fy",
            "LnByb3RvLkJhc2VDb21tYW5kLlR5cGUSLQoHY29ubmVjdBgCIAEoCzIcLnB1",
            "bHNhci5wcm90by5Db21tYW5kQ29ubmVjdBIxCgljb25uZWN0ZWQYAyABKAsy",
            "Hi5wdWxzYXIucHJvdG8uQ29tbWFuZENvbm5lY3RlZBIxCglzdWJzY3JpYmUY",
            "BCABKAsyHi5wdWxzYXIucHJvdG8uQ29tbWFuZFN1YnNjcmliZRIvCghwcm9k",
            "dWNlchgFIAEoCzIdLnB1bHNhci5wcm90by5Db21tYW5kUHJvZHVjZXISJwoE",
            "c2VuZBgGIAEoCzIZLnB1bHNhci5wcm90by5Db21tYW5kU2VuZBI2CgxzZW5k",
            "X3JlY2VpcHQYByABKAsyIC5wdWxzYXIucHJvdG8uQ29tbWFuZFNlbmRSZWNl",
            "aXB0EjIKCnNlbmRfZXJyb3IYCCABKAsyHi5wdWxzYXIucHJvdG8uQ29tbWFu",
            "ZFNlbmRFcnJvchItCgdtZXNzYWdlGAkgASgLMhwucHVsc2FyLnByb3RvLkNv",
            "bW1hbmRNZXNzYWdlEiUKA2FjaxgKIAEoCzIYLnB1bHNhci5wcm90by5Db21t",
            "YW5kQWNrEicKBGZsb3cYCyABKAsyGS5wdWxzYXIucHJvdG8uQ29tbWFuZEZs",
            "b3cSNQoLdW5zdWJzY3JpYmUYDCABKAsyIC5wdWxzYXIucHJvdG8uQ29tbWFu",
            "ZFVuc3Vic2NyaWJlEi0KB3N1Y2Nlc3MYDSABKAsyHC5wdWxzYXIucHJvdG8u",
            "Q29tbWFuZFN1Y2Nlc3MSKQoFZXJyb3IYDiABKAsyGi5wdWxzYXIucHJvdG8u",
            "Q29tbWFuZEVycm9yEjoKDmNsb3NlX3Byb2R1Y2VyGA8gASgLMiIucHVsc2Fy",
            "LnByb3RvLkNvbW1hbmRDbG9zZVByb2R1Y2VyEjoKDmNsb3NlX2NvbnN1bWVy",
            "GBAgASgLMiIucHVsc2FyLnByb3RvLkNvbW1hbmRDbG9zZUNvbnN1bWVyEj4K",
            "EHByb2R1Y2VyX3N1Y2Nlc3MYESABKAsyJC5wdWxzYXIucHJvdG8uQ29tbWFu",
            "ZFByb2R1Y2VyU3VjY2VzcxInCgRwaW5nGBIgASgLMhkucHVsc2FyLnByb3Rv",
            "LkNvbW1hbmRQaW5nEicKBHBvbmcYEyABKAsyGS5wdWxzYXIucHJvdG8uQ29t",
            "bWFuZFBvbmcSXQofcmVkZWxpdmVyVW5hY2tub3dsZWRnZWRNZXNzYWdlcxgU",
            "IAEoCzI0LnB1bHNhci5wcm90by5Db21tYW5kUmVkZWxpdmVyVW5hY2tub3ds",
            "ZWRnZWRNZXNzYWdlcxJIChFwYXJ0aXRpb25NZXRhZGF0YRgVIAEoCzItLnB1",
            "bHNhci5wcm90by5Db21tYW5kUGFydGl0aW9uZWRUb3BpY01ldGFkYXRhElgK",
            "GXBhcnRpdGlvbk1ldGFkYXRhUmVzcG9uc2UYFiABKAsyNS5wdWxzYXIucHJv",
            "dG8uQ29tbWFuZFBhcnRpdGlvbmVkVG9waWNNZXRhZGF0YVJlc3BvbnNlEjUK",
            "C2xvb2t1cFRvcGljGBcgASgLMiAucHVsc2FyLnByb3RvLkNvbW1hbmRMb29r",
            "dXBUb3BpYxJFChNsb29rdXBUb3BpY1Jlc3BvbnNlGBggASgLMigucHVsc2Fy",
            "LnByb3RvLkNvbW1hbmRMb29rdXBUb3BpY1Jlc3BvbnNlEjkKDWNvbnN1bWVy",
            "U3RhdHMYGSABKAsyIi5wdWxzYXIucHJvdG8uQ29tbWFuZENvbnN1bWVyU3Rh",
            "dHMSSQoVY29uc3VtZXJTdGF0c1Jlc3BvbnNlGBogASgLMioucHVsc2FyLnBy",
            "b3RvLkNvbW1hbmRDb25zdW1lclN0YXRzUmVzcG9uc2USQQoRcmVhY2hlZEVu",
            "ZE9mVG9waWMYGyABKAsyJi5wdWxzYXIucHJvdG8uQ29tbWFuZFJlYWNoZWRF",
            "bmRPZlRvcGljEicKBHNlZWsYHCABKAsyGS5wdWxzYXIucHJvdG8uQ29tbWFu",
            "ZFNlZWsSPwoQZ2V0TGFzdE1lc3NhZ2VJZBgdIAEoCzIlLnB1bHNhci5wcm90",
            "by5Db21tYW5kR2V0TGFzdE1lc3NhZ2VJZBJPChhnZXRMYXN0TWVzc2FnZUlk",
            "UmVzcG9uc2UYHiABKAsyLS5wdWxzYXIucHJvdG8uQ29tbWFuZEdldExhc3RN",
            "ZXNzYWdlSWRSZXNwb25zZRJJChZhY3RpdmVfY29uc3VtZXJfY2hhbmdlGB8g",
            "ASgLMikucHVsc2FyLnByb3RvLkNvbW1hbmRBY3RpdmVDb25zdW1lckNoYW5n",
            "ZRJHChRnZXRUb3BpY3NPZk5hbWVzcGFjZRggIAEoCzIpLnB1bHNhci5wcm90",
            "by5Db21tYW5kR2V0VG9waWNzT2ZOYW1lc3BhY2USVwocZ2V0VG9waWNzT2ZO",
            "YW1lc3BhY2VSZXNwb25zZRghIAEoCzIxLnB1bHNhci5wcm90by5Db21tYW5k",
            "R2V0VG9waWNzT2ZOYW1lc3BhY2VSZXNwb25zZRIxCglnZXRTY2hlbWEYIiAB",
            "KAsyHi5wdWxzYXIucHJvdG8uQ29tbWFuZEdldFNjaGVtYRJBChFnZXRTY2hl",
            "bWFSZXNwb25zZRgjIAEoCzImLnB1bHNhci5wcm90by5Db21tYW5kR2V0U2No",
            "ZW1hUmVzcG9uc2USOQoNYXV0aENoYWxsZW5nZRgkIAEoCzIiLnB1bHNhci5w",
            "cm90by5Db21tYW5kQXV0aENoYWxsZW5nZRI3CgxhdXRoUmVzcG9uc2UYJSAB",
            "KAsyIS5wdWxzYXIucHJvdG8uQ29tbWFuZEF1dGhSZXNwb25zZRI1CgthY2tS",
            "ZXNwb25zZRgmIAEoCzIgLnB1bHNhci5wcm90by5Db21tYW5kQWNrUmVzcG9u",
            "c2USQQoRZ2V0T3JDcmVhdGVTY2hlbWEYJyABKAsyJi5wdWxzYXIucHJvdG8u",
            "Q29tbWFuZEdldE9yQ3JlYXRlU2NoZW1hElEKGWdldE9yQ3JlYXRlU2NoZW1h",
            "UmVzcG9uc2UYKCABKAsyLi5wdWxzYXIucHJvdG8uQ29tbWFuZEdldE9yQ3Jl",
            "YXRlU2NoZW1hUmVzcG9uc2USKwoGbmV3VHhuGDIgASgLMhsucHVsc2FyLnBy",
            "b3RvLkNvbW1hbmROZXdUeG4SOwoObmV3VHhuUmVzcG9uc2UYMyABKAsyIy5w",
            "dWxzYXIucHJvdG8uQ29tbWFuZE5ld1R4blJlc3BvbnNlEkEKEWFkZFBhcnRp",
            "dGlvblRvVHhuGDQgASgLMiYucHVsc2FyLnByb3RvLkNvbW1hbmRBZGRQYXJ0",
            "aXRpb25Ub1R4bhJRChlhZGRQYXJ0aXRpb25Ub1R4blJlc3BvbnNlGDUgASgL",
            "Mi4ucHVsc2FyLnByb3RvLkNvbW1hbmRBZGRQYXJ0aXRpb25Ub1R4blJlc3Bv",
            "bnNlEkcKFGFkZFN1YnNjcmlwdGlvblRvVHhuGDYgASgLMikucHVsc2FyLnBy",
            "b3RvLkNvbW1hbmRBZGRTdWJzY3JpcHRpb25Ub1R4bhJXChxhZGRTdWJzY3Jp",
            "cHRpb25Ub1R4blJlc3BvbnNlGDcgASgLMjEucHVsc2FyLnByb3RvLkNvbW1h",
            "bmRBZGRTdWJzY3JpcHRpb25Ub1R4blJlc3BvbnNlEisKBmVuZFR4bhg4IAEo",
            "CzIbLnB1bHNhci5wcm90by5Db21tYW5kRW5kVHhuEjsKDmVuZFR4blJlc3Bv",
            "bnNlGDkgASgLMiMucHVsc2FyLnByb3RvLkNvbW1hbmRFbmRUeG5SZXNwb25z",
            "ZRJBChFlbmRUeG5PblBhcnRpdGlvbhg6IAEoCzImLnB1bHNhci5wcm90by5D",
            "b21tYW5kRW5kVHhuT25QYXJ0aXRpb24SUQoZZW5kVHhuT25QYXJ0aXRpb25S",
            "ZXNwb25zZRg7IAEoCzIuLnB1bHNhci5wcm90by5Db21tYW5kRW5kVHhuT25Q",
            "YXJ0aXRpb25SZXNwb25zZRJHChRlbmRUeG5PblN1YnNjcmlwdGlvbhg8IAEo",
            "CzIpLnB1bHNhci5wcm90by5Db21tYW5kRW5kVHhuT25TdWJzY3JpcHRpb24S",
            "VwocZW5kVHhuT25TdWJzY3JpcHRpb25SZXNwb25zZRg9IAEoCzIxLnB1bHNh",
            "ci5wcm90by5Db21tYW5kRW5kVHhuT25TdWJzY3JpcHRpb25SZXNwb25zZSLf",
            "CAoEVHlwZRILCgdDT05ORUNUEAISDQoJQ09OTkVDVEVEEAMSDQoJU1VCU0NS",
            "SUJFEAQSDAoIUFJPRFVDRVIQBRIICgRTRU5EEAYSEAoMU0VORF9SRUNFSVBU",
            "EAcSDgoKU0VORF9FUlJPUhAIEgsKB01FU1NBR0UQCRIHCgNBQ0sQChIICgRG",
            "TE9XEAsSDwoLVU5TVUJTQ1JJQkUQDBILCgdTVUNDRVNTEA0SCQoFRVJST1IQ",
            "DhISCg5DTE9TRV9QUk9EVUNFUhAPEhIKDkNMT1NFX0NPTlNVTUVSEBASFAoQ",
            "UFJPRFVDRVJfU1VDQ0VTUxAREggKBFBJTkcQEhIICgRQT05HEBMSJQohUkVE",
            "RUxJVkVSX1VOQUNLTk9XTEVER0VEX01FU1NBR0VTEBQSGAoUUEFSVElUSU9O",
            "RURfTUVUQURBVEEQFRIhCh1QQVJUSVRJT05FRF9NRVRBREFUQV9SRVNQT05T",
            "RRAWEgoKBkxPT0tVUBAXEhMKD0xPT0tVUF9SRVNQT05TRRAYEhIKDkNPTlNV",
            "TUVSX1NUQVRTEBkSGwoXQ09OU1VNRVJfU1RBVFNfUkVTUE9OU0UQGhIYChRS",
            "RUFDSEVEX0VORF9PRl9UT1BJQxAbEggKBFNFRUsQHBIXChNHRVRfTEFTVF9N",
            "RVNTQUdFX0lEEB0SIAocR0VUX0xBU1RfTUVTU0FHRV9JRF9SRVNQT05TRRAe",
            "EhoKFkFDVElWRV9DT05TVU1FUl9DSEFOR0UQHxIbChdHRVRfVE9QSUNTX09G",
            "X05BTUVTUEFDRRAgEiQKIEdFVF9UT1BJQ1NfT0ZfTkFNRVNQQUNFX1JFU1BP",
            "TlNFECESDgoKR0VUX1NDSEVNQRAiEhcKE0dFVF9TQ0hFTUFfUkVTUE9OU0UQ",
            "IxISCg5BVVRIX0NIQUxMRU5HRRAkEhEKDUFVVEhfUkVTUE9OU0UQJRIQCgxB",
            "Q0tfUkVTUE9OU0UQJhIYChRHRVRfT1JfQ1JFQVRFX1NDSEVNQRAnEiEKHUdF",
            "VF9PUl9DUkVBVEVfU0NIRU1BX1JFU1BPTlNFECgSCwoHTkVXX1RYThAyEhQK",
            "EE5FV19UWE5fUkVTUE9OU0UQMxIYChRBRERfUEFSVElUSU9OX1RPX1RYThA0",
            "EiEKHUFERF9QQVJUSVRJT05fVE9fVFhOX1JFU1BPTlNFEDUSGwoXQUREX1NV",
            "QlNDUklQVElPTl9UT19UWE4QNhIkCiBBRERfU1VCU0NSSVBUSU9OX1RPX1RY",
            "Tl9SRVNQT05TRRA3EgsKB0VORF9UWE4QOBIUChBFTkRfVFhOX1JFU1BPTlNF",
            "EDkSGAoURU5EX1RYTl9PTl9QQVJUSVRJT04QOhIhCh1FTkRfVFhOX09OX1BB",
            "UlRJVElPTl9SRVNQT05TRRA7EhsKF0VORF9UWE5fT05fU1VCU0NSSVBUSU9O",
            "EDwSJAogRU5EX1RYTl9PTl9TVUJTQ1JJUFRJT05fUkVTUE9OU0UQPSpECg9D",
            "b21wcmVzc2lvblR5cGUSCAoETk9ORRAAEgcKA0xaNBABEggKBFpMSUIQAhII",
            "CgRaU1REEAMSCgoGU05BUFBZEAQqpwQKC1NlcnZlckVycm9yEhAKDFVua25v",
            "d25FcnJvchAAEhEKDU1ldGFkYXRhRXJyb3IQARIUChBQZXJzaXN0ZW5jZUVy",
            "cm9yEAISFwoTQXV0aGVudGljYXRpb25FcnJvchADEhYKEkF1dGhvcml6YXRp",
            "b25FcnJvchAEEhAKDENvbnN1bWVyQnVzeRAFEhMKD1NlcnZpY2VOb3RSZWFk",
            "eRAGEiUKIVByb2R1Y2VyQmxvY2tlZFF1b3RhRXhjZWVkZWRFcnJvchAHEikK",
            "JVByb2R1Y2VyQmxvY2tlZFF1b3RhRXhjZWVkZWRFeGNlcHRpb24QCBIRCg1D",
            "aGVja3N1bUVycm9yEAkSGwoXVW5zdXBwb3J0ZWRWZXJzaW9uRXJyb3IQChIR",
            "Cg1Ub3BpY05vdEZvdW5kEAsSGAoUU3Vic2NyaXB0aW9uTm90Rm91bmQQDBIU",
            "ChBDb25zdW1lck5vdEZvdW5kEA0SEwoPVG9vTWFueVJlcXVlc3RzEA4SGAoU",
            "VG9waWNUZXJtaW5hdGVkRXJyb3IQDxIQCgxQcm9kdWNlckJ1c3kQEBIUChBJ",
            "bnZhbGlkVG9waWNOYW1lEBESFgoSSW5jb21wYXRpYmxlU2NoZW1hEBISFwoT",
            "Q29uc3VtZXJBc3NpZ25FcnJvchATEiIKHlRyYW5zYWN0aW9uQ29vcmRpbmF0",
            "b3JOb3RGb3VuZBAUEhQKEEludmFsaWRUeG5TdGF0dXMQFSpLCgpBdXRoTWV0",
            "aG9kEhIKDkF1dGhNZXRob2ROb25lEAASEwoPQXV0aE1ldGhvZFljYVYxEAES",
            "FAoQQXV0aE1ldGhvZEF0aGVucxACKpcBCg9Qcm90b2NvbFZlcnNpb24SBgoC",
            "djAQABIGCgJ2MRABEgYKAnYyEAISBgoCdjMQAxIGCgJ2NBAEEgYKAnY1EAUS",
            "BgoCdjYQBhIGCgJ2NxAHEgYKAnY4EAgSBgoCdjkQCRIHCgN2MTAQChIHCgN2",
            "MTEQCxIHCgN2MTIQDBIHCgN2MTMQDRIHCgN2MTQQDhIHCgN2MTUQDyorCg1L",
            "ZXlTaGFyZWRNb2RlEg4KCkFVVE9fU1BMSVQQABIKCgZTVElDS1kQASoiCglU",
            "eG5BY3Rpb24SCgoGQ09NTUlUEAASCQoFQUJPUlQQAUImCiJvcmcuYXBhY2hl",
            "LnB1bHNhci5jb21tb24uYXBpLnByb3RvSAM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pulsar.Proto.CompressionType), typeof(global::Pulsar.Proto.ServerError), typeof(global::Pulsar.Proto.AuthMethod), typeof(global::Pulsar.Proto.ProtocolVersion), typeof(global::Pulsar.Proto.KeySharedMode), typeof(global::Pulsar.Proto.TxnAction), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.Schema), global::Pulsar.Proto.Schema.Parser, new[]{ "Name", "SchemaData", "Type", "Properties" }, null, new[]{ typeof(global::Pulsar.Proto.Schema.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.MessageIdData), global::Pulsar.Proto.MessageIdData.Parser, new[]{ "LedgerId", "EntryId", "Partition", "BatchIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.KeyValue), global::Pulsar.Proto.KeyValue.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.KeyLongValue), global::Pulsar.Proto.KeyLongValue.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.IntRange), global::Pulsar.Proto.IntRange.Parser, new[]{ "Start", "End" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.EncryptionKeys), global::Pulsar.Proto.EncryptionKeys.Parser, new[]{ "Key", "Value", "Metadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.MessageMetadata), global::Pulsar.Proto.MessageMetadata.Parser, new[]{ "ProducerName", "SequenceId", "PublishTime", "Properties", "ReplicatedFrom", "PartitionKey", "ReplicateTo", "Compression", "UncompressedSize", "NumMessagesInBatch", "EventTime", "EncryptionKeys", "EncryptionAlgo", "EncryptionParam", "SchemaVersion", "PartitionKeyB64Encoded", "OrderingKey", "DeliverAtTime", "MarkerType", "TxnidLeastBits", "TxnidMostBits", "HighestSequenceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.SingleMessageMetadata), global::Pulsar.Proto.SingleMessageMetadata.Parser, new[]{ "Properties", "PartitionKey", "PayloadSize", "CompactedOut", "EventTime", "PartitionKeyB64Encoded", "OrderingKey", "SequenceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandConnect), global::Pulsar.Proto.CommandConnect.Parser, new[]{ "ClientVersion", "AuthMethod", "AuthMethodName", "AuthData", "ProtocolVersion", "ProxyToBrokerUrl", "OriginalPrincipal", "OriginalAuthData", "OriginalAuthMethod" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandConnected), global::Pulsar.Proto.CommandConnected.Parser, new[]{ "ServerVersion", "ProtocolVersion", "MaxMessageSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandAuthResponse), global::Pulsar.Proto.CommandAuthResponse.Parser, new[]{ "ClientVersion", "Response", "ProtocolVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandAuthChallenge), global::Pulsar.Proto.CommandAuthChallenge.Parser, new[]{ "ServerVersion", "Challenge", "ProtocolVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.AuthData), global::Pulsar.Proto.AuthData.Parser, new[]{ "AuthMethodName", "AuthData_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.KeySharedMeta), global::Pulsar.Proto.KeySharedMeta.Parser, new[]{ "KeySharedMode", "HashRanges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandSubscribe), global::Pulsar.Proto.CommandSubscribe.Parser, new[]{ "Topic", "Subscription", "SubType", "ConsumerId", "RequestId", "ConsumerName", "PriorityLevel", "Durable", "StartMessageId", "Metadata", "ReadCompacted", "Schema", "InitialPosition", "ReplicateSubscriptionState", "ForceTopicCreation", "StartMessageRollbackDurationSec", "KeySharedMeta" }, null, new[]{ typeof(global::Pulsar.Proto.CommandSubscribe.Types.SubType), typeof(global::Pulsar.Proto.CommandSubscribe.Types.InitialPosition) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandPartitionedTopicMetadata), global::Pulsar.Proto.CommandPartitionedTopicMetadata.Parser, new[]{ "Topic", "RequestId", "OriginalPrincipal", "OriginalAuthData", "OriginalAuthMethod" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse), global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse.Parser, new[]{ "Partitions", "RequestId", "Response", "Error", "Message" }, null, new[]{ typeof(global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse.Types.LookupType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandLookupTopic), global::Pulsar.Proto.CommandLookupTopic.Parser, new[]{ "Topic", "RequestId", "Authoritative", "OriginalPrincipal", "OriginalAuthData", "OriginalAuthMethod" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandLookupTopicResponse), global::Pulsar.Proto.CommandLookupTopicResponse.Parser, new[]{ "BrokerServiceUrl", "BrokerServiceUrlTls", "Response", "RequestId", "Authoritative", "Error", "Message", "ProxyThroughServiceUrl" }, null, new[]{ typeof(global::Pulsar.Proto.CommandLookupTopicResponse.Types.LookupType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandProducer), global::Pulsar.Proto.CommandProducer.Parser, new[]{ "Topic", "ProducerId", "RequestId", "ProducerName", "Encrypted", "Metadata", "Schema", "Epoch", "UserProvidedProducerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandSend), global::Pulsar.Proto.CommandSend.Parser, new[]{ "ProducerId", "SequenceId", "NumMessages", "TxnidLeastBits", "TxnidMostBits", "HighestSequenceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandSendReceipt), global::Pulsar.Proto.CommandSendReceipt.Parser, new[]{ "ProducerId", "SequenceId", "MessageId", "HighestSequenceId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandSendError), global::Pulsar.Proto.CommandSendError.Parser, new[]{ "ProducerId", "SequenceId", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandMessage), global::Pulsar.Proto.CommandMessage.Parser, new[]{ "ConsumerId", "MessageId", "RedeliveryCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandAck), global::Pulsar.Proto.CommandAck.Parser, new[]{ "ConsumerId", "AckType", "MessageId", "ValidationError", "Properties", "TxnidLeastBits", "TxnidMostBits" }, null, new[]{ typeof(global::Pulsar.Proto.CommandAck.Types.AckType), typeof(global::Pulsar.Proto.CommandAck.Types.ValidationError) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandAckResponse), global::Pulsar.Proto.CommandAckResponse.Parser, new[]{ "ConsumerId", "TxnidLeastBits", "TxnidMostBits", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandActiveConsumerChange), global::Pulsar.Proto.CommandActiveConsumerChange.Parser, new[]{ "ConsumerId", "IsActive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandFlow), global::Pulsar.Proto.CommandFlow.Parser, new[]{ "ConsumerId", "MessagePermits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandUnsubscribe), global::Pulsar.Proto.CommandUnsubscribe.Parser, new[]{ "ConsumerId", "RequestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandSeek), global::Pulsar.Proto.CommandSeek.Parser, new[]{ "ConsumerId", "RequestId", "MessageId", "MessagePublishTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandReachedEndOfTopic), global::Pulsar.Proto.CommandReachedEndOfTopic.Parser, new[]{ "ConsumerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandCloseProducer), global::Pulsar.Proto.CommandCloseProducer.Parser, new[]{ "ProducerId", "RequestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandCloseConsumer), global::Pulsar.Proto.CommandCloseConsumer.Parser, new[]{ "ConsumerId", "RequestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandRedeliverUnacknowledgedMessages), global::Pulsar.Proto.CommandRedeliverUnacknowledgedMessages.Parser, new[]{ "ConsumerId", "MessageIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandSuccess), global::Pulsar.Proto.CommandSuccess.Parser, new[]{ "RequestId", "Schema" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandProducerSuccess), global::Pulsar.Proto.CommandProducerSuccess.Parser, new[]{ "RequestId", "ProducerName", "LastSequenceId", "SchemaVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandError), global::Pulsar.Proto.CommandError.Parser, new[]{ "RequestId", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandPing), global::Pulsar.Proto.CommandPing.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandPong), global::Pulsar.Proto.CommandPong.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandConsumerStats), global::Pulsar.Proto.CommandConsumerStats.Parser, new[]{ "RequestId", "ConsumerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandConsumerStatsResponse), global::Pulsar.Proto.CommandConsumerStatsResponse.Parser, new[]{ "RequestId", "ErrorCode", "ErrorMessage", "MsgRateOut", "MsgThroughputOut", "MsgRateRedeliver", "ConsumerName", "AvailablePermits", "UnackedMessages", "BlockedConsumerOnUnackedMsgs", "Address", "ConnectedSince", "Type", "MsgRateExpired", "MsgBacklog" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandGetLastMessageId), global::Pulsar.Proto.CommandGetLastMessageId.Parser, new[]{ "ConsumerId", "RequestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandGetLastMessageIdResponse), global::Pulsar.Proto.CommandGetLastMessageIdResponse.Parser, new[]{ "LastMessageId", "RequestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandGetTopicsOfNamespace), global::Pulsar.Proto.CommandGetTopicsOfNamespace.Parser, new[]{ "RequestId", "Namespace", "Mode" }, null, new[]{ typeof(global::Pulsar.Proto.CommandGetTopicsOfNamespace.Types.Mode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandGetTopicsOfNamespaceResponse), global::Pulsar.Proto.CommandGetTopicsOfNamespaceResponse.Parser, new[]{ "RequestId", "Topics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandGetSchema), global::Pulsar.Proto.CommandGetSchema.Parser, new[]{ "RequestId", "Topic", "SchemaVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandGetSchemaResponse), global::Pulsar.Proto.CommandGetSchemaResponse.Parser, new[]{ "RequestId", "ErrorCode", "ErrorMessage", "Schema", "SchemaVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandGetOrCreateSchema), global::Pulsar.Proto.CommandGetOrCreateSchema.Parser, new[]{ "RequestId", "Topic", "Schema" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandGetOrCreateSchemaResponse), global::Pulsar.Proto.CommandGetOrCreateSchemaResponse.Parser, new[]{ "RequestId", "ErrorCode", "ErrorMessage", "SchemaVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandNewTxn), global::Pulsar.Proto.CommandNewTxn.Parser, new[]{ "RequestId", "TxnTtlSeconds", "TcId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandNewTxnResponse), global::Pulsar.Proto.CommandNewTxnResponse.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandAddPartitionToTxn), global::Pulsar.Proto.CommandAddPartitionToTxn.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Partitions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandAddPartitionToTxnResponse), global::Pulsar.Proto.CommandAddPartitionToTxnResponse.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.Subscription), global::Pulsar.Proto.Subscription.Parser, new[]{ "Topic", "Subscription_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandAddSubscriptionToTxn), global::Pulsar.Proto.CommandAddSubscriptionToTxn.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Subscription" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandAddSubscriptionToTxnResponse), global::Pulsar.Proto.CommandAddSubscriptionToTxnResponse.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandEndTxn), global::Pulsar.Proto.CommandEndTxn.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "TxnAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandEndTxnResponse), global::Pulsar.Proto.CommandEndTxnResponse.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandEndTxnOnPartition), global::Pulsar.Proto.CommandEndTxnOnPartition.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Topic", "TxnAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandEndTxnOnPartitionResponse), global::Pulsar.Proto.CommandEndTxnOnPartitionResponse.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandEndTxnOnSubscription), global::Pulsar.Proto.CommandEndTxnOnSubscription.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Subscription", "TxnAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.CommandEndTxnOnSubscriptionResponse), global::Pulsar.Proto.CommandEndTxnOnSubscriptionResponse.Parser, new[]{ "RequestId", "TxnidLeastBits", "TxnidMostBits", "Error", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pulsar.Proto.BaseCommand), global::Pulsar.Proto.BaseCommand.Parser, new[]{ "Type", "Connect", "Connected", "Subscribe", "Producer", "Send", "SendReceipt", "SendError", "Message", "Ack", "Flow", "Unsubscribe", "Success", "Error", "CloseProducer", "CloseConsumer", "ProducerSuccess", "Ping", "Pong", "RedeliverUnacknowledgedMessages", "PartitionMetadata", "PartitionMetadataResponse", "LookupTopic", "LookupTopicResponse", "ConsumerStats", "ConsumerStatsResponse", "ReachedEndOfTopic", "Seek", "GetLastMessageId", "GetLastMessageIdResponse", "ActiveConsumerChange", "GetTopicsOfNamespace", "GetTopicsOfNamespaceResponse", "GetSchema", "GetSchemaResponse", "AuthChallenge", "AuthResponse", "AckResponse", "GetOrCreateSchema", "GetOrCreateSchemaResponse", "NewTxn", "NewTxnResponse", "AddPartitionToTxn", "AddPartitionToTxnResponse", "AddSubscriptionToTxn", "AddSubscriptionToTxnResponse", "EndTxn", "EndTxnResponse", "EndTxnOnPartition", "EndTxnOnPartitionResponse", "EndTxnOnSubscription", "EndTxnOnSubscriptionResponse" }, null, new[]{ typeof(global::Pulsar.Proto.BaseCommand.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CompressionType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("LZ4")] Lz4 = 1,
    [pbr::OriginalName("ZLIB")] Zlib = 2,
    [pbr::OriginalName("ZSTD")] Zstd = 3,
    [pbr::OriginalName("SNAPPY")] Snappy = 4,
  }

  public enum ServerError {
    [pbr::OriginalName("UnknownError")] UnknownError = 0,
    /// <summary>
    /// Error with ZK/metadata
    /// </summary>
    [pbr::OriginalName("MetadataError")] MetadataError = 1,
    /// <summary>
    /// Error writing reading from BK
    /// </summary>
    [pbr::OriginalName("PersistenceError")] PersistenceError = 2,
    /// <summary>
    /// Non valid authentication
    /// </summary>
    [pbr::OriginalName("AuthenticationError")] AuthenticationError = 3,
    /// <summary>
    /// Not authorized to use resource
    /// </summary>
    [pbr::OriginalName("AuthorizationError")] AuthorizationError = 4,
    /// <summary>
    /// Unable to subscribe/unsubscribe because
    /// </summary>
    [pbr::OriginalName("ConsumerBusy")] ConsumerBusy = 5,
    /// <summary>
    /// other consumers are connected
    /// </summary>
    [pbr::OriginalName("ServiceNotReady")] ServiceNotReady = 6,
    /// <summary>
    /// Unable to create producer because backlog quota exceeded
    /// </summary>
    [pbr::OriginalName("ProducerBlockedQuotaExceededError")] ProducerBlockedQuotaExceededError = 7,
    /// <summary>
    /// Exception while creating producer because quota exceeded
    /// </summary>
    [pbr::OriginalName("ProducerBlockedQuotaExceededException")] ProducerBlockedQuotaExceededException = 8,
    /// <summary>
    /// Error while verifying message checksum
    /// </summary>
    [pbr::OriginalName("ChecksumError")] ChecksumError = 9,
    /// <summary>
    /// Error when an older client/version doesn't support a required feature
    /// </summary>
    [pbr::OriginalName("UnsupportedVersionError")] UnsupportedVersionError = 10,
    /// <summary>
    /// Topic not found
    /// </summary>
    [pbr::OriginalName("TopicNotFound")] TopicNotFound = 11,
    /// <summary>
    /// Subscription not found
    /// </summary>
    [pbr::OriginalName("SubscriptionNotFound")] SubscriptionNotFound = 12,
    /// <summary>
    /// Consumer not found
    /// </summary>
    [pbr::OriginalName("ConsumerNotFound")] ConsumerNotFound = 13,
    /// <summary>
    /// Error with too many simultaneously request
    /// </summary>
    [pbr::OriginalName("TooManyRequests")] TooManyRequests = 14,
    /// <summary>
    /// The topic has been terminated
    /// </summary>
    [pbr::OriginalName("TopicTerminatedError")] TopicTerminatedError = 15,
    /// <summary>
    /// Producer with same name is already connected
    /// </summary>
    [pbr::OriginalName("ProducerBusy")] ProducerBusy = 16,
    /// <summary>
    /// The topic name is not valid
    /// </summary>
    [pbr::OriginalName("InvalidTopicName")] InvalidTopicName = 17,
    /// <summary>
    /// Specified schema was incompatible with topic schema
    /// </summary>
    [pbr::OriginalName("IncompatibleSchema")] IncompatibleSchema = 18,
    /// <summary>
    /// Dispatcher assign consumer error
    /// </summary>
    [pbr::OriginalName("ConsumerAssignError")] ConsumerAssignError = 19,
    /// <summary>
    /// Transaction coordinator not found error
    /// </summary>
    [pbr::OriginalName("TransactionCoordinatorNotFound")] TransactionCoordinatorNotFound = 20,
    /// <summary>
    /// Invalid txn status error
    /// </summary>
    [pbr::OriginalName("InvalidTxnStatus")] InvalidTxnStatus = 21,
  }

  public enum AuthMethod {
    [pbr::OriginalName("AuthMethodNone")] None = 0,
    [pbr::OriginalName("AuthMethodYcaV1")] YcaV1 = 1,
    [pbr::OriginalName("AuthMethodAthens")] Athens = 2,
  }

  /// <summary>
  /// Each protocol version identify new features that are
  /// incrementally added to the protocol
  /// </summary>
  public enum ProtocolVersion {
    /// <summary>
    /// Initial versioning
    /// </summary>
    [pbr::OriginalName("v0")] V0 = 0,
    /// <summary>
    /// Added application keep-alive
    /// </summary>
    [pbr::OriginalName("v1")] V1 = 1,
    /// <summary>
    /// Added RedeliverUnacknowledgedMessages Command
    /// </summary>
    [pbr::OriginalName("v2")] V2 = 2,
    /// <summary>
    /// Added compression with LZ4 and ZLib
    /// </summary>
    [pbr::OriginalName("v3")] V3 = 3,
    /// <summary>
    /// Added batch message support
    /// </summary>
    [pbr::OriginalName("v4")] V4 = 4,
    /// <summary>
    /// Added disconnect client w/o closing connection
    /// </summary>
    [pbr::OriginalName("v5")] V5 = 5,
    /// <summary>
    /// Added checksum computation for metadata + payload
    /// </summary>
    [pbr::OriginalName("v6")] V6 = 6,
    /// <summary>
    /// Added CommandLookupTopic - Binary Lookup
    /// </summary>
    [pbr::OriginalName("v7")] V7 = 7,
    /// <summary>
    /// Added CommandConsumerStats - Client fetches broker side consumer stats
    /// </summary>
    [pbr::OriginalName("v8")] V8 = 8,
    /// <summary>
    /// Added end of topic notification
    /// </summary>
    [pbr::OriginalName("v9")] V9 = 9,
    /// <summary>
    /// Added proxy to broker
    /// </summary>
    [pbr::OriginalName("v10")] V10 = 10,
    /// <summary>
    /// C++ consumers before this version are not correctly handling the checksum field
    /// </summary>
    [pbr::OriginalName("v11")] V11 = 11,
    /// <summary>
    /// Added get topic's last messageId from broker
    /// </summary>
    [pbr::OriginalName("v12")] V12 = 12,
    /// <summary>
    /// Added CommandActiveConsumerChange
    /// Added CommandGetTopicsOfNamespace
    /// </summary>
    [pbr::OriginalName("v13")] V13 = 13,
    /// <summary>
    /// Add CommandAuthChallenge and CommandAuthResponse for mutual auth
    /// </summary>
    [pbr::OriginalName("v14")] V14 = 14,
    /// <summary>
    /// Added Key_Shared subscription
    /// </summary>
    [pbr::OriginalName("v15")] V15 = 15,
  }

  public enum KeySharedMode {
    [pbr::OriginalName("AUTO_SPLIT")] AutoSplit = 0,
    [pbr::OriginalName("STICKY")] Sticky = 1,
  }

  public enum TxnAction {
    [pbr::OriginalName("COMMIT")] Commit = 0,
    [pbr::OriginalName("ABORT")] Abort = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Schema : pb::IMessage<Schema> {
    private static readonly pb::MessageParser<Schema> _parser = new pb::MessageParser<Schema>(() => new Schema());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Schema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schema(Schema other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      schemaData_ = other.schemaData_;
      type_ = other.type_;
      properties_ = other.properties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Schema Clone() {
      return new Schema(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "schema_data" field.</summary>
    public const int SchemaDataFieldNumber = 3;
    private readonly static pb::ByteString SchemaDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString schemaData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SchemaData {
      get { return schemaData_ ?? SchemaDataDefaultValue; }
      set {
        schemaData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "schema_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchemaData {
      get { return schemaData_ != null; }
    }
    /// <summary>Clears the value of the "schema_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchemaData() {
      schemaData_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private readonly static global::Pulsar.Proto.Schema.Types.Type TypeDefaultValue = global::Pulsar.Proto.Schema.Types.Type.None;

    private global::Pulsar.Proto.Schema.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.Schema.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.KeyValue> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(42, global::Pulsar.Proto.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.KeyValue> properties_ = new pbc::RepeatedField<global::Pulsar.Proto.KeyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.KeyValue> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Schema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Schema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (SchemaData != other.SchemaData) return false;
      if (Type != other.Type) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasSchemaData) hash ^= SchemaData.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasSchemaData) {
        output.WriteRawTag(26);
        output.WriteBytes(SchemaData);
      }
      if (HasType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasSchemaData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SchemaData);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Schema other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasSchemaData) {
        SchemaData = other.SchemaData;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      properties_.Add(other.properties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            SchemaData = input.ReadBytes();
            break;
          }
          case 32: {
            Type = (global::Pulsar.Proto.Schema.Types.Type) input.ReadEnum();
            break;
          }
          case 42: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Schema message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("String")] String = 1,
        [pbr::OriginalName("Json")] Json = 2,
        [pbr::OriginalName("Protobuf")] Protobuf = 3,
        [pbr::OriginalName("Avro")] Avro = 4,
        [pbr::OriginalName("Bool")] Bool = 5,
        [pbr::OriginalName("Int8")] Int8 = 6,
        [pbr::OriginalName("Int16")] Int16 = 7,
        [pbr::OriginalName("Int32")] Int32 = 8,
        [pbr::OriginalName("Int64")] Int64 = 9,
        [pbr::OriginalName("Float")] Float = 10,
        [pbr::OriginalName("Double")] Double = 11,
        [pbr::OriginalName("Date")] Date = 12,
        [pbr::OriginalName("Time")] Time = 13,
        [pbr::OriginalName("Timestamp")] Timestamp = 14,
        [pbr::OriginalName("KeyValue")] KeyValue = 15,
      }

    }
    #endregion

  }

  public sealed partial class MessageIdData : pb::IMessage<MessageIdData> {
    private static readonly pb::MessageParser<MessageIdData> _parser = new pb::MessageParser<MessageIdData>(() => new MessageIdData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageIdData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageIdData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageIdData(MessageIdData other) : this() {
      _hasBits0 = other._hasBits0;
      ledgerId_ = other.ledgerId_;
      entryId_ = other.entryId_;
      partition_ = other.partition_;
      batchIndex_ = other.batchIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageIdData Clone() {
      return new MessageIdData(this);
    }

    /// <summary>Field number for the "ledgerId" field.</summary>
    public const int LedgerIdFieldNumber = 1;
    private readonly static ulong LedgerIdDefaultValue = 0UL;

    private ulong ledgerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LedgerId {
      get { if ((_hasBits0 & 1) != 0) { return ledgerId_; } else { return LedgerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        ledgerId_ = value;
      }
    }
    /// <summary>Gets whether the "ledgerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLedgerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ledgerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLedgerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "entryId" field.</summary>
    public const int EntryIdFieldNumber = 2;
    private readonly static ulong EntryIdDefaultValue = 0UL;

    private ulong entryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntryId {
      get { if ((_hasBits0 & 2) != 0) { return entryId_; } else { return EntryIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        entryId_ = value;
      }
    }
    /// <summary>Gets whether the "entryId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntryId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "entryId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntryId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "partition" field.</summary>
    public const int PartitionFieldNumber = 3;
    private readonly static int PartitionDefaultValue = -1;

    private int partition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Partition {
      get { if ((_hasBits0 & 4) != 0) { return partition_; } else { return PartitionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        partition_ = value;
      }
    }
    /// <summary>Gets whether the "partition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartition {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "partition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartition() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "batch_index" field.</summary>
    public const int BatchIndexFieldNumber = 4;
    private readonly static int BatchIndexDefaultValue = -1;

    private int batchIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatchIndex {
      get { if ((_hasBits0 & 8) != 0) { return batchIndex_; } else { return BatchIndexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        batchIndex_ = value;
      }
    }
    /// <summary>Gets whether the "batch_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBatchIndex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "batch_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBatchIndex() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageIdData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageIdData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LedgerId != other.LedgerId) return false;
      if (EntryId != other.EntryId) return false;
      if (Partition != other.Partition) return false;
      if (BatchIndex != other.BatchIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLedgerId) hash ^= LedgerId.GetHashCode();
      if (HasEntryId) hash ^= EntryId.GetHashCode();
      if (HasPartition) hash ^= Partition.GetHashCode();
      if (HasBatchIndex) hash ^= BatchIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLedgerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(LedgerId);
      }
      if (HasEntryId) {
        output.WriteRawTag(16);
        output.WriteUInt64(EntryId);
      }
      if (HasPartition) {
        output.WriteRawTag(24);
        output.WriteInt32(Partition);
      }
      if (HasBatchIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(BatchIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLedgerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LedgerId);
      }
      if (HasEntryId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntryId);
      }
      if (HasPartition) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Partition);
      }
      if (HasBatchIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageIdData other) {
      if (other == null) {
        return;
      }
      if (other.HasLedgerId) {
        LedgerId = other.LedgerId;
      }
      if (other.HasEntryId) {
        EntryId = other.EntryId;
      }
      if (other.HasPartition) {
        Partition = other.Partition;
      }
      if (other.HasBatchIndex) {
        BatchIndex = other.BatchIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LedgerId = input.ReadUInt64();
            break;
          }
          case 16: {
            EntryId = input.ReadUInt64();
            break;
          }
          case 24: {
            Partition = input.ReadInt32();
            break;
          }
          case 32: {
            BatchIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyValue : pb::IMessage<KeyValue> {
    private static readonly pb::MessageParser<KeyValue> _parser = new pb::MessageParser<KeyValue>(() => new KeyValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValue(KeyValue other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValue Clone() {
      return new KeyValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static string ValueDefaultValue = "";

    private string value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValue other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyLongValue : pb::IMessage<KeyLongValue> {
    private static readonly pb::MessageParser<KeyLongValue> _parser = new pb::MessageParser<KeyLongValue>(() => new KeyLongValue());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyLongValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLongValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLongValue(KeyLongValue other) : this() {
      _hasBits0 = other._hasBits0;
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLongValue Clone() {
      return new KeyLongValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static ulong ValueDefaultValue = 0UL;

    private ulong value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Value {
      get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyLongValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyLongValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(16);
        output.WriteUInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyLongValue other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntRange : pb::IMessage<IntRange> {
    private static readonly pb::MessageParser<IntRange> _parser = new pb::MessageParser<IntRange>(() => new IntRange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntRange(IntRange other) : this() {
      _hasBits0 = other._hasBits0;
      start_ = other.start_;
      end_ = other.end_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntRange Clone() {
      return new IntRange(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private readonly static int StartDefaultValue = 0;

    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { if ((_hasBits0 & 1) != 0) { return start_; } else { return StartDefaultValue; } }
      set {
        _hasBits0 |= 1;
        start_ = value;
      }
    }
    /// <summary>Gets whether the "start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStart {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStart() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private readonly static int EndDefaultValue = 0;

    private int end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int End {
      get { if ((_hasBits0 & 2) != 0) { return end_; } else { return EndDefaultValue; } }
      set {
        _hasBits0 |= 2;
        end_ = value;
      }
    }
    /// <summary>Gets whether the "end" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnd {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "end" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEnd() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStart) hash ^= Start.GetHashCode();
      if (HasEnd) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStart) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (HasEnd) {
        output.WriteRawTag(16);
        output.WriteInt32(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStart) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (HasEnd) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntRange other) {
      if (other == null) {
        return;
      }
      if (other.HasStart) {
        Start = other.Start;
      }
      if (other.HasEnd) {
        End = other.End;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            End = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EncryptionKeys : pb::IMessage<EncryptionKeys> {
    private static readonly pb::MessageParser<EncryptionKeys> _parser = new pb::MessageParser<EncryptionKeys>(() => new EncryptionKeys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncryptionKeys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptionKeys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptionKeys(EncryptionKeys other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      metadata_ = other.metadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptionKeys Clone() {
      return new EncryptionKeys(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private readonly static string KeyDefaultValue = "";

    private string key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_ ?? ValueDefaultValue; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValue {
      get { return value_ != null; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      value_ = null;
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.KeyValue> _repeated_metadata_codec
        = pb::FieldCodec.ForMessage(26, global::Pulsar.Proto.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.KeyValue> metadata_ = new pbc::RepeatedField<global::Pulsar.Proto.KeyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.KeyValue> Metadata {
      get { return metadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncryptionKeys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncryptionKeys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if(!metadata_.Equals(other.metadata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      hash ^= metadata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasKey) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HasValue) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      metadata_.WriteTo(output, _repeated_metadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      size += metadata_.CalculateSize(_repeated_metadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncryptionKeys other) {
      if (other == null) {
        return;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      metadata_.Add(other.metadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
          case 26: {
            metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageMetadata : pb::IMessage<MessageMetadata> {
    private static readonly pb::MessageParser<MessageMetadata> _parser = new pb::MessageParser<MessageMetadata>(() => new MessageMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageMetadata(MessageMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      producerName_ = other.producerName_;
      sequenceId_ = other.sequenceId_;
      publishTime_ = other.publishTime_;
      properties_ = other.properties_.Clone();
      replicatedFrom_ = other.replicatedFrom_;
      partitionKey_ = other.partitionKey_;
      replicateTo_ = other.replicateTo_.Clone();
      compression_ = other.compression_;
      uncompressedSize_ = other.uncompressedSize_;
      numMessagesInBatch_ = other.numMessagesInBatch_;
      eventTime_ = other.eventTime_;
      encryptionKeys_ = other.encryptionKeys_.Clone();
      encryptionAlgo_ = other.encryptionAlgo_;
      encryptionParam_ = other.encryptionParam_;
      schemaVersion_ = other.schemaVersion_;
      partitionKeyB64Encoded_ = other.partitionKeyB64Encoded_;
      orderingKey_ = other.orderingKey_;
      deliverAtTime_ = other.deliverAtTime_;
      markerType_ = other.markerType_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      highestSequenceId_ = other.highestSequenceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageMetadata Clone() {
      return new MessageMetadata(this);
    }

    /// <summary>Field number for the "producer_name" field.</summary>
    public const int ProducerNameFieldNumber = 1;
    private readonly static string ProducerNameDefaultValue = "";

    private string producerName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProducerName {
      get { return producerName_ ?? ProducerNameDefaultValue; }
      set {
        producerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "producer_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerName {
      get { return producerName_ != null; }
    }
    /// <summary>Clears the value of the "producer_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerName() {
      producerName_ = null;
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 2;
    private readonly static ulong SequenceIdDefaultValue = 0UL;

    private ulong sequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceId {
      get { if ((_hasBits0 & 1) != 0) { return sequenceId_; } else { return SequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "publish_time" field.</summary>
    public const int PublishTimeFieldNumber = 3;
    private readonly static ulong PublishTimeDefaultValue = 0UL;

    private ulong publishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PublishTime {
      get { if ((_hasBits0 & 2) != 0) { return publishTime_; } else { return PublishTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        publishTime_ = value;
      }
    }
    /// <summary>Gets whether the "publish_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPublishTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "publish_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPublishTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.KeyValue> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(34, global::Pulsar.Proto.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.KeyValue> properties_ = new pbc::RepeatedField<global::Pulsar.Proto.KeyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.KeyValue> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "replicated_from" field.</summary>
    public const int ReplicatedFromFieldNumber = 5;
    private readonly static string ReplicatedFromDefaultValue = "";

    private string replicatedFrom_;
    /// <summary>
    /// Property set on replicated message,
    /// includes the source cluster name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReplicatedFrom {
      get { return replicatedFrom_ ?? ReplicatedFromDefaultValue; }
      set {
        replicatedFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "replicated_from" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplicatedFrom {
      get { return replicatedFrom_ != null; }
    }
    /// <summary>Clears the value of the "replicated_from" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplicatedFrom() {
      replicatedFrom_ = null;
    }

    /// <summary>Field number for the "partition_key" field.</summary>
    public const int PartitionKeyFieldNumber = 6;
    private readonly static string PartitionKeyDefaultValue = "";

    private string partitionKey_;
    /// <summary>
    ///key to decide partition for the msg
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartitionKey {
      get { return partitionKey_ ?? PartitionKeyDefaultValue; }
      set {
        partitionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "partition_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitionKey {
      get { return partitionKey_ != null; }
    }
    /// <summary>Clears the value of the "partition_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitionKey() {
      partitionKey_ = null;
    }

    /// <summary>Field number for the "replicate_to" field.</summary>
    public const int ReplicateToFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_replicateTo_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> replicateTo_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Override namespace's replication
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReplicateTo {
      get { return replicateTo_; }
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 8;
    private readonly static global::Pulsar.Proto.CompressionType CompressionDefaultValue = global::Pulsar.Proto.CompressionType.None;

    private global::Pulsar.Proto.CompressionType compression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CompressionType Compression {
      get { if ((_hasBits0 & 4) != 0) { return compression_; } else { return CompressionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        compression_ = value;
      }
    }
    /// <summary>Gets whether the "compression" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompression {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "compression" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompression() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "uncompressed_size" field.</summary>
    public const int UncompressedSizeFieldNumber = 9;
    private readonly static uint UncompressedSizeDefaultValue = 0;

    private uint uncompressedSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UncompressedSize {
      get { if ((_hasBits0 & 8) != 0) { return uncompressedSize_; } else { return UncompressedSizeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        uncompressedSize_ = value;
      }
    }
    /// <summary>Gets whether the "uncompressed_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUncompressedSize {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "uncompressed_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUncompressedSize() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "num_messages_in_batch" field.</summary>
    public const int NumMessagesInBatchFieldNumber = 11;
    private readonly static int NumMessagesInBatchDefaultValue = 1;

    private int numMessagesInBatch_;
    /// <summary>
    /// Removed below checksum field from Metadata as
    /// it should be part of send-command which keeps checksum of header + payload
    ///optional sfixed64 checksum = 10;
    /// differentiate single and batch message metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumMessagesInBatch {
      get { if ((_hasBits0 & 16) != 0) { return numMessagesInBatch_; } else { return NumMessagesInBatchDefaultValue; } }
      set {
        _hasBits0 |= 16;
        numMessagesInBatch_ = value;
      }
    }
    /// <summary>Gets whether the "num_messages_in_batch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumMessagesInBatch {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "num_messages_in_batch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumMessagesInBatch() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 12;
    private readonly static ulong EventTimeDefaultValue = 0UL;

    private ulong eventTime_;
    /// <summary>
    /// the timestamp that this event occurs. it is typically set by applications.
    /// if this field is omitted, `publish_time` can be used for the purpose of `event_time`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventTime {
      get { if ((_hasBits0 & 32) != 0) { return eventTime_; } else { return EventTimeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        eventTime_ = value;
      }
    }
    /// <summary>Gets whether the "event_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventTime {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "event_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventTime() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "encryption_keys" field.</summary>
    public const int EncryptionKeysFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.EncryptionKeys> _repeated_encryptionKeys_codec
        = pb::FieldCodec.ForMessage(106, global::Pulsar.Proto.EncryptionKeys.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.EncryptionKeys> encryptionKeys_ = new pbc::RepeatedField<global::Pulsar.Proto.EncryptionKeys>();
    /// <summary>
    /// Contains encryption key name, encrypted key and metadata to describe the key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.EncryptionKeys> EncryptionKeys {
      get { return encryptionKeys_; }
    }

    /// <summary>Field number for the "encryption_algo" field.</summary>
    public const int EncryptionAlgoFieldNumber = 14;
    private readonly static string EncryptionAlgoDefaultValue = "";

    private string encryptionAlgo_;
    /// <summary>
    /// Algorithm used to encrypt data key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncryptionAlgo {
      get { return encryptionAlgo_ ?? EncryptionAlgoDefaultValue; }
      set {
        encryptionAlgo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "encryption_algo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncryptionAlgo {
      get { return encryptionAlgo_ != null; }
    }
    /// <summary>Clears the value of the "encryption_algo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncryptionAlgo() {
      encryptionAlgo_ = null;
    }

    /// <summary>Field number for the "encryption_param" field.</summary>
    public const int EncryptionParamFieldNumber = 15;
    private readonly static pb::ByteString EncryptionParamDefaultValue = pb::ByteString.Empty;

    private pb::ByteString encryptionParam_;
    /// <summary>
    /// Additional parameters required by encryption
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptionParam {
      get { return encryptionParam_ ?? EncryptionParamDefaultValue; }
      set {
        encryptionParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "encryption_param" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncryptionParam {
      get { return encryptionParam_ != null; }
    }
    /// <summary>Clears the value of the "encryption_param" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncryptionParam() {
      encryptionParam_ = null;
    }

    /// <summary>Field number for the "schema_version" field.</summary>
    public const int SchemaVersionFieldNumber = 16;
    private readonly static pb::ByteString SchemaVersionDefaultValue = pb::ByteString.Empty;

    private pb::ByteString schemaVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SchemaVersion {
      get { return schemaVersion_ ?? SchemaVersionDefaultValue; }
      set {
        schemaVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "schema_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchemaVersion {
      get { return schemaVersion_ != null; }
    }
    /// <summary>Clears the value of the "schema_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchemaVersion() {
      schemaVersion_ = null;
    }

    /// <summary>Field number for the "partition_key_b64_encoded" field.</summary>
    public const int PartitionKeyB64EncodedFieldNumber = 17;
    private readonly static bool PartitionKeyB64EncodedDefaultValue = false;

    private bool partitionKeyB64Encoded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PartitionKeyB64Encoded {
      get { if ((_hasBits0 & 64) != 0) { return partitionKeyB64Encoded_; } else { return PartitionKeyB64EncodedDefaultValue; } }
      set {
        _hasBits0 |= 64;
        partitionKeyB64Encoded_ = value;
      }
    }
    /// <summary>Gets whether the "partition_key_b64_encoded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitionKeyB64Encoded {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "partition_key_b64_encoded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitionKeyB64Encoded() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "ordering_key" field.</summary>
    public const int OrderingKeyFieldNumber = 18;
    private readonly static pb::ByteString OrderingKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString orderingKey_;
    /// <summary>
    /// Specific a key to overwrite the message key which used for ordering dispatch in Key_Shared mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrderingKey {
      get { return orderingKey_ ?? OrderingKeyDefaultValue; }
      set {
        orderingKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ordering_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderingKey {
      get { return orderingKey_ != null; }
    }
    /// <summary>Clears the value of the "ordering_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderingKey() {
      orderingKey_ = null;
    }

    /// <summary>Field number for the "deliver_at_time" field.</summary>
    public const int DeliverAtTimeFieldNumber = 19;
    private readonly static long DeliverAtTimeDefaultValue = 0L;

    private long deliverAtTime_;
    /// <summary>
    /// Mark the message to be delivered at or after the specified timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeliverAtTime {
      get { if ((_hasBits0 & 128) != 0) { return deliverAtTime_; } else { return DeliverAtTimeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        deliverAtTime_ = value;
      }
    }
    /// <summary>Gets whether the "deliver_at_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeliverAtTime {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "deliver_at_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeliverAtTime() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "marker_type" field.</summary>
    public const int MarkerTypeFieldNumber = 20;
    private readonly static int MarkerTypeDefaultValue = 0;

    private int markerType_;
    /// <summary>
    /// Identify whether a message is a "marker" message used for
    /// internal metadata instead of application published data.
    /// Markers will generally not be propagated back to clients
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarkerType {
      get { if ((_hasBits0 & 256) != 0) { return markerType_; } else { return MarkerTypeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        markerType_ = value;
      }
    }
    /// <summary>Gets whether the "marker_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarkerType {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "marker_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarkerType() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 22;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    /// <summary>
    /// transaction related message info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 512) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 23;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 1024) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "highest_sequence_id" field.</summary>
    public const int HighestSequenceIdFieldNumber = 24;
    private readonly static ulong HighestSequenceIdDefaultValue = 0UL;

    private ulong highestSequenceId_;
    /// <summary>
    //// Add highest sequence id to support batch message with external sequence id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HighestSequenceId {
      get { if ((_hasBits0 & 2048) != 0) { return highestSequenceId_; } else { return HighestSequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        highestSequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "highest_sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHighestSequenceId {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "highest_sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHighestSequenceId() {
      _hasBits0 &= ~2048;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProducerName != other.ProducerName) return false;
      if (SequenceId != other.SequenceId) return false;
      if (PublishTime != other.PublishTime) return false;
      if(!properties_.Equals(other.properties_)) return false;
      if (ReplicatedFrom != other.ReplicatedFrom) return false;
      if (PartitionKey != other.PartitionKey) return false;
      if(!replicateTo_.Equals(other.replicateTo_)) return false;
      if (Compression != other.Compression) return false;
      if (UncompressedSize != other.UncompressedSize) return false;
      if (NumMessagesInBatch != other.NumMessagesInBatch) return false;
      if (EventTime != other.EventTime) return false;
      if(!encryptionKeys_.Equals(other.encryptionKeys_)) return false;
      if (EncryptionAlgo != other.EncryptionAlgo) return false;
      if (EncryptionParam != other.EncryptionParam) return false;
      if (SchemaVersion != other.SchemaVersion) return false;
      if (PartitionKeyB64Encoded != other.PartitionKeyB64Encoded) return false;
      if (OrderingKey != other.OrderingKey) return false;
      if (DeliverAtTime != other.DeliverAtTime) return false;
      if (MarkerType != other.MarkerType) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (HighestSequenceId != other.HighestSequenceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProducerName) hash ^= ProducerName.GetHashCode();
      if (HasSequenceId) hash ^= SequenceId.GetHashCode();
      if (HasPublishTime) hash ^= PublishTime.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (HasReplicatedFrom) hash ^= ReplicatedFrom.GetHashCode();
      if (HasPartitionKey) hash ^= PartitionKey.GetHashCode();
      hash ^= replicateTo_.GetHashCode();
      if (HasCompression) hash ^= Compression.GetHashCode();
      if (HasUncompressedSize) hash ^= UncompressedSize.GetHashCode();
      if (HasNumMessagesInBatch) hash ^= NumMessagesInBatch.GetHashCode();
      if (HasEventTime) hash ^= EventTime.GetHashCode();
      hash ^= encryptionKeys_.GetHashCode();
      if (HasEncryptionAlgo) hash ^= EncryptionAlgo.GetHashCode();
      if (HasEncryptionParam) hash ^= EncryptionParam.GetHashCode();
      if (HasSchemaVersion) hash ^= SchemaVersion.GetHashCode();
      if (HasPartitionKeyB64Encoded) hash ^= PartitionKeyB64Encoded.GetHashCode();
      if (HasOrderingKey) hash ^= OrderingKey.GetHashCode();
      if (HasDeliverAtTime) hash ^= DeliverAtTime.GetHashCode();
      if (HasMarkerType) hash ^= MarkerType.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasHighestSequenceId) hash ^= HighestSequenceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasProducerName) {
        output.WriteRawTag(10);
        output.WriteString(ProducerName);
      }
      if (HasSequenceId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SequenceId);
      }
      if (HasPublishTime) {
        output.WriteRawTag(24);
        output.WriteUInt64(PublishTime);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (HasReplicatedFrom) {
        output.WriteRawTag(42);
        output.WriteString(ReplicatedFrom);
      }
      if (HasPartitionKey) {
        output.WriteRawTag(50);
        output.WriteString(PartitionKey);
      }
      replicateTo_.WriteTo(output, _repeated_replicateTo_codec);
      if (HasCompression) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Compression);
      }
      if (HasUncompressedSize) {
        output.WriteRawTag(72);
        output.WriteUInt32(UncompressedSize);
      }
      if (HasNumMessagesInBatch) {
        output.WriteRawTag(88);
        output.WriteInt32(NumMessagesInBatch);
      }
      if (HasEventTime) {
        output.WriteRawTag(96);
        output.WriteUInt64(EventTime);
      }
      encryptionKeys_.WriteTo(output, _repeated_encryptionKeys_codec);
      if (HasEncryptionAlgo) {
        output.WriteRawTag(114);
        output.WriteString(EncryptionAlgo);
      }
      if (HasEncryptionParam) {
        output.WriteRawTag(122);
        output.WriteBytes(EncryptionParam);
      }
      if (HasSchemaVersion) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(SchemaVersion);
      }
      if (HasPartitionKeyB64Encoded) {
        output.WriteRawTag(136, 1);
        output.WriteBool(PartitionKeyB64Encoded);
      }
      if (HasOrderingKey) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(OrderingKey);
      }
      if (HasDeliverAtTime) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(DeliverAtTime);
      }
      if (HasMarkerType) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MarkerType);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasHighestSequenceId) {
        output.WriteRawTag(192, 1);
        output.WriteUInt64(HighestSequenceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProducerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProducerName);
      }
      if (HasSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceId);
      }
      if (HasPublishTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PublishTime);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (HasReplicatedFrom) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplicatedFrom);
      }
      if (HasPartitionKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartitionKey);
      }
      size += replicateTo_.CalculateSize(_repeated_replicateTo_codec);
      if (HasCompression) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
      }
      if (HasUncompressedSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UncompressedSize);
      }
      if (HasNumMessagesInBatch) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumMessagesInBatch);
      }
      if (HasEventTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTime);
      }
      size += encryptionKeys_.CalculateSize(_repeated_encryptionKeys_codec);
      if (HasEncryptionAlgo) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncryptionAlgo);
      }
      if (HasEncryptionParam) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptionParam);
      }
      if (HasSchemaVersion) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SchemaVersion);
      }
      if (HasPartitionKeyB64Encoded) {
        size += 2 + 1;
      }
      if (HasOrderingKey) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(OrderingKey);
      }
      if (HasDeliverAtTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DeliverAtTime);
      }
      if (HasMarkerType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarkerType);
      }
      if (HasTxnidLeastBits) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasHighestSequenceId) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(HighestSequenceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasProducerName) {
        ProducerName = other.ProducerName;
      }
      if (other.HasSequenceId) {
        SequenceId = other.SequenceId;
      }
      if (other.HasPublishTime) {
        PublishTime = other.PublishTime;
      }
      properties_.Add(other.properties_);
      if (other.HasReplicatedFrom) {
        ReplicatedFrom = other.ReplicatedFrom;
      }
      if (other.HasPartitionKey) {
        PartitionKey = other.PartitionKey;
      }
      replicateTo_.Add(other.replicateTo_);
      if (other.HasCompression) {
        Compression = other.Compression;
      }
      if (other.HasUncompressedSize) {
        UncompressedSize = other.UncompressedSize;
      }
      if (other.HasNumMessagesInBatch) {
        NumMessagesInBatch = other.NumMessagesInBatch;
      }
      if (other.HasEventTime) {
        EventTime = other.EventTime;
      }
      encryptionKeys_.Add(other.encryptionKeys_);
      if (other.HasEncryptionAlgo) {
        EncryptionAlgo = other.EncryptionAlgo;
      }
      if (other.HasEncryptionParam) {
        EncryptionParam = other.EncryptionParam;
      }
      if (other.HasSchemaVersion) {
        SchemaVersion = other.SchemaVersion;
      }
      if (other.HasPartitionKeyB64Encoded) {
        PartitionKeyB64Encoded = other.PartitionKeyB64Encoded;
      }
      if (other.HasOrderingKey) {
        OrderingKey = other.OrderingKey;
      }
      if (other.HasDeliverAtTime) {
        DeliverAtTime = other.DeliverAtTime;
      }
      if (other.HasMarkerType) {
        MarkerType = other.MarkerType;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasHighestSequenceId) {
        HighestSequenceId = other.HighestSequenceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProducerName = input.ReadString();
            break;
          }
          case 16: {
            SequenceId = input.ReadUInt64();
            break;
          }
          case 24: {
            PublishTime = input.ReadUInt64();
            break;
          }
          case 34: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
          case 42: {
            ReplicatedFrom = input.ReadString();
            break;
          }
          case 50: {
            PartitionKey = input.ReadString();
            break;
          }
          case 58: {
            replicateTo_.AddEntriesFrom(input, _repeated_replicateTo_codec);
            break;
          }
          case 64: {
            Compression = (global::Pulsar.Proto.CompressionType) input.ReadEnum();
            break;
          }
          case 72: {
            UncompressedSize = input.ReadUInt32();
            break;
          }
          case 88: {
            NumMessagesInBatch = input.ReadInt32();
            break;
          }
          case 96: {
            EventTime = input.ReadUInt64();
            break;
          }
          case 106: {
            encryptionKeys_.AddEntriesFrom(input, _repeated_encryptionKeys_codec);
            break;
          }
          case 114: {
            EncryptionAlgo = input.ReadString();
            break;
          }
          case 122: {
            EncryptionParam = input.ReadBytes();
            break;
          }
          case 130: {
            SchemaVersion = input.ReadBytes();
            break;
          }
          case 136: {
            PartitionKeyB64Encoded = input.ReadBool();
            break;
          }
          case 146: {
            OrderingKey = input.ReadBytes();
            break;
          }
          case 152: {
            DeliverAtTime = input.ReadInt64();
            break;
          }
          case 160: {
            MarkerType = input.ReadInt32();
            break;
          }
          case 176: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 184: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 192: {
            HighestSequenceId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleMessageMetadata : pb::IMessage<SingleMessageMetadata> {
    private static readonly pb::MessageParser<SingleMessageMetadata> _parser = new pb::MessageParser<SingleMessageMetadata>(() => new SingleMessageMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleMessageMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleMessageMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleMessageMetadata(SingleMessageMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      properties_ = other.properties_.Clone();
      partitionKey_ = other.partitionKey_;
      payloadSize_ = other.payloadSize_;
      compactedOut_ = other.compactedOut_;
      eventTime_ = other.eventTime_;
      partitionKeyB64Encoded_ = other.partitionKeyB64Encoded_;
      orderingKey_ = other.orderingKey_;
      sequenceId_ = other.sequenceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleMessageMetadata Clone() {
      return new SingleMessageMetadata(this);
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.KeyValue> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(10, global::Pulsar.Proto.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.KeyValue> properties_ = new pbc::RepeatedField<global::Pulsar.Proto.KeyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.KeyValue> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "partition_key" field.</summary>
    public const int PartitionKeyFieldNumber = 2;
    private readonly static string PartitionKeyDefaultValue = "";

    private string partitionKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartitionKey {
      get { return partitionKey_ ?? PartitionKeyDefaultValue; }
      set {
        partitionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "partition_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitionKey {
      get { return partitionKey_ != null; }
    }
    /// <summary>Clears the value of the "partition_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitionKey() {
      partitionKey_ = null;
    }

    /// <summary>Field number for the "payload_size" field.</summary>
    public const int PayloadSizeFieldNumber = 3;
    private readonly static int PayloadSizeDefaultValue = 0;

    private int payloadSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayloadSize {
      get { if ((_hasBits0 & 1) != 0) { return payloadSize_; } else { return PayloadSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        payloadSize_ = value;
      }
    }
    /// <summary>Gets whether the "payload_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPayloadSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "payload_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayloadSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "compacted_out" field.</summary>
    public const int CompactedOutFieldNumber = 4;
    private readonly static bool CompactedOutDefaultValue = false;

    private bool compactedOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompactedOut {
      get { if ((_hasBits0 & 2) != 0) { return compactedOut_; } else { return CompactedOutDefaultValue; } }
      set {
        _hasBits0 |= 2;
        compactedOut_ = value;
      }
    }
    /// <summary>Gets whether the "compacted_out" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompactedOut {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "compacted_out" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompactedOut() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "event_time" field.</summary>
    public const int EventTimeFieldNumber = 5;
    private readonly static ulong EventTimeDefaultValue = 0UL;

    private ulong eventTime_;
    /// <summary>
    /// the timestamp that this event occurs. it is typically set by applications.
    /// if this field is omitted, `publish_time` can be used for the purpose of `event_time`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EventTime {
      get { if ((_hasBits0 & 4) != 0) { return eventTime_; } else { return EventTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        eventTime_ = value;
      }
    }
    /// <summary>Gets whether the "event_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEventTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "event_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "partition_key_b64_encoded" field.</summary>
    public const int PartitionKeyB64EncodedFieldNumber = 6;
    private readonly static bool PartitionKeyB64EncodedDefaultValue = false;

    private bool partitionKeyB64Encoded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PartitionKeyB64Encoded {
      get { if ((_hasBits0 & 8) != 0) { return partitionKeyB64Encoded_; } else { return PartitionKeyB64EncodedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        partitionKeyB64Encoded_ = value;
      }
    }
    /// <summary>Gets whether the "partition_key_b64_encoded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitionKeyB64Encoded {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "partition_key_b64_encoded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitionKeyB64Encoded() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ordering_key" field.</summary>
    public const int OrderingKeyFieldNumber = 7;
    private readonly static pb::ByteString OrderingKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString orderingKey_;
    /// <summary>
    /// Specific a key to overwrite the message key which used for ordering dispatch in Key_Shared mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrderingKey {
      get { return orderingKey_ ?? OrderingKeyDefaultValue; }
      set {
        orderingKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ordering_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrderingKey {
      get { return orderingKey_ != null; }
    }
    /// <summary>Clears the value of the "ordering_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrderingKey() {
      orderingKey_ = null;
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 8;
    private readonly static ulong SequenceIdDefaultValue = 0UL;

    private ulong sequenceId_;
    /// <summary>
    /// Allows consumer retrieve the sequence id that the producer set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceId {
      get { if ((_hasBits0 & 16) != 0) { return sequenceId_; } else { return SequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        sequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceId() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleMessageMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleMessageMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!properties_.Equals(other.properties_)) return false;
      if (PartitionKey != other.PartitionKey) return false;
      if (PayloadSize != other.PayloadSize) return false;
      if (CompactedOut != other.CompactedOut) return false;
      if (EventTime != other.EventTime) return false;
      if (PartitionKeyB64Encoded != other.PartitionKeyB64Encoded) return false;
      if (OrderingKey != other.OrderingKey) return false;
      if (SequenceId != other.SequenceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= properties_.GetHashCode();
      if (HasPartitionKey) hash ^= PartitionKey.GetHashCode();
      if (HasPayloadSize) hash ^= PayloadSize.GetHashCode();
      if (HasCompactedOut) hash ^= CompactedOut.GetHashCode();
      if (HasEventTime) hash ^= EventTime.GetHashCode();
      if (HasPartitionKeyB64Encoded) hash ^= PartitionKeyB64Encoded.GetHashCode();
      if (HasOrderingKey) hash ^= OrderingKey.GetHashCode();
      if (HasSequenceId) hash ^= SequenceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      properties_.WriteTo(output, _repeated_properties_codec);
      if (HasPartitionKey) {
        output.WriteRawTag(18);
        output.WriteString(PartitionKey);
      }
      if (HasPayloadSize) {
        output.WriteRawTag(24);
        output.WriteInt32(PayloadSize);
      }
      if (HasCompactedOut) {
        output.WriteRawTag(32);
        output.WriteBool(CompactedOut);
      }
      if (HasEventTime) {
        output.WriteRawTag(40);
        output.WriteUInt64(EventTime);
      }
      if (HasPartitionKeyB64Encoded) {
        output.WriteRawTag(48);
        output.WriteBool(PartitionKeyB64Encoded);
      }
      if (HasOrderingKey) {
        output.WriteRawTag(58);
        output.WriteBytes(OrderingKey);
      }
      if (HasSequenceId) {
        output.WriteRawTag(64);
        output.WriteUInt64(SequenceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (HasPartitionKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartitionKey);
      }
      if (HasPayloadSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayloadSize);
      }
      if (HasCompactedOut) {
        size += 1 + 1;
      }
      if (HasEventTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTime);
      }
      if (HasPartitionKeyB64Encoded) {
        size += 1 + 1;
      }
      if (HasOrderingKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OrderingKey);
      }
      if (HasSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleMessageMetadata other) {
      if (other == null) {
        return;
      }
      properties_.Add(other.properties_);
      if (other.HasPartitionKey) {
        PartitionKey = other.PartitionKey;
      }
      if (other.HasPayloadSize) {
        PayloadSize = other.PayloadSize;
      }
      if (other.HasCompactedOut) {
        CompactedOut = other.CompactedOut;
      }
      if (other.HasEventTime) {
        EventTime = other.EventTime;
      }
      if (other.HasPartitionKeyB64Encoded) {
        PartitionKeyB64Encoded = other.PartitionKeyB64Encoded;
      }
      if (other.HasOrderingKey) {
        OrderingKey = other.OrderingKey;
      }
      if (other.HasSequenceId) {
        SequenceId = other.SequenceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
          case 18: {
            PartitionKey = input.ReadString();
            break;
          }
          case 24: {
            PayloadSize = input.ReadInt32();
            break;
          }
          case 32: {
            CompactedOut = input.ReadBool();
            break;
          }
          case 40: {
            EventTime = input.ReadUInt64();
            break;
          }
          case 48: {
            PartitionKeyB64Encoded = input.ReadBool();
            break;
          }
          case 58: {
            OrderingKey = input.ReadBytes();
            break;
          }
          case 64: {
            SequenceId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandConnect : pb::IMessage<CommandConnect> {
    private static readonly pb::MessageParser<CommandConnect> _parser = new pb::MessageParser<CommandConnect>(() => new CommandConnect());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConnect(CommandConnect other) : this() {
      _hasBits0 = other._hasBits0;
      clientVersion_ = other.clientVersion_;
      authMethod_ = other.authMethod_;
      authMethodName_ = other.authMethodName_;
      authData_ = other.authData_;
      protocolVersion_ = other.protocolVersion_;
      proxyToBrokerUrl_ = other.proxyToBrokerUrl_;
      originalPrincipal_ = other.originalPrincipal_;
      originalAuthData_ = other.originalAuthData_;
      originalAuthMethod_ = other.originalAuthMethod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConnect Clone() {
      return new CommandConnect(this);
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private readonly static string ClientVersionDefaultValue = "";

    private string clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_ ?? ClientVersionDefaultValue; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "client_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return clientVersion_ != null; }
    }
    /// <summary>Clears the value of the "client_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      clientVersion_ = null;
    }

    /// <summary>Field number for the "auth_method" field.</summary>
    public const int AuthMethodFieldNumber = 2;
    private readonly static global::Pulsar.Proto.AuthMethod AuthMethodDefaultValue = global::Pulsar.Proto.AuthMethod.None;

    private global::Pulsar.Proto.AuthMethod authMethod_;
    /// <summary>
    /// Deprecated. Use "auth_method_name" instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.AuthMethod AuthMethod {
      get { if ((_hasBits0 & 1) != 0) { return authMethod_; } else { return AuthMethodDefaultValue; } }
      set {
        _hasBits0 |= 1;
        authMethod_ = value;
      }
    }
    /// <summary>Gets whether the "auth_method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthMethod {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "auth_method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthMethod() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "auth_method_name" field.</summary>
    public const int AuthMethodNameFieldNumber = 5;
    private readonly static string AuthMethodNameDefaultValue = "";

    private string authMethodName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthMethodName {
      get { return authMethodName_ ?? AuthMethodNameDefaultValue; }
      set {
        authMethodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "auth_method_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthMethodName {
      get { return authMethodName_ != null; }
    }
    /// <summary>Clears the value of the "auth_method_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthMethodName() {
      authMethodName_ = null;
    }

    /// <summary>Field number for the "auth_data" field.</summary>
    public const int AuthDataFieldNumber = 3;
    private readonly static pb::ByteString AuthDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString authData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthData {
      get { return authData_ ?? AuthDataDefaultValue; }
      set {
        authData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "auth_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthData {
      get { return authData_ != null; }
    }
    /// <summary>Clears the value of the "auth_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthData() {
      authData_ = null;
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 4;
    private readonly static int ProtocolVersionDefaultValue = 0;

    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { if ((_hasBits0 & 2) != 0) { return protocolVersion_; } else { return ProtocolVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        protocolVersion_ = value;
      }
    }
    /// <summary>Gets whether the "protocol_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProtocolVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "protocol_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProtocolVersion() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "proxy_to_broker_url" field.</summary>
    public const int ProxyToBrokerUrlFieldNumber = 6;
    private readonly static string ProxyToBrokerUrlDefaultValue = "";

    private string proxyToBrokerUrl_;
    /// <summary>
    /// Client can ask to be proxyied to a specific broker
    /// This is only honored by a Pulsar proxy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProxyToBrokerUrl {
      get { return proxyToBrokerUrl_ ?? ProxyToBrokerUrlDefaultValue; }
      set {
        proxyToBrokerUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "proxy_to_broker_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProxyToBrokerUrl {
      get { return proxyToBrokerUrl_ != null; }
    }
    /// <summary>Clears the value of the "proxy_to_broker_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProxyToBrokerUrl() {
      proxyToBrokerUrl_ = null;
    }

    /// <summary>Field number for the "original_principal" field.</summary>
    public const int OriginalPrincipalFieldNumber = 7;
    private readonly static string OriginalPrincipalDefaultValue = "";

    private string originalPrincipal_;
    /// <summary>
    /// Original principal that was verified by
    /// a Pulsar proxy. In this case the auth info above
    /// will be the auth of the proxy itself
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalPrincipal {
      get { return originalPrincipal_ ?? OriginalPrincipalDefaultValue; }
      set {
        originalPrincipal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_principal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalPrincipal {
      get { return originalPrincipal_ != null; }
    }
    /// <summary>Clears the value of the "original_principal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalPrincipal() {
      originalPrincipal_ = null;
    }

    /// <summary>Field number for the "original_auth_data" field.</summary>
    public const int OriginalAuthDataFieldNumber = 8;
    private readonly static string OriginalAuthDataDefaultValue = "";

    private string originalAuthData_;
    /// <summary>
    /// Original auth role and auth Method that was passed
    /// to the proxy. In this case the auth info above
    /// will be the auth of the proxy itself
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalAuthData {
      get { return originalAuthData_ ?? OriginalAuthDataDefaultValue; }
      set {
        originalAuthData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_auth_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalAuthData {
      get { return originalAuthData_ != null; }
    }
    /// <summary>Clears the value of the "original_auth_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalAuthData() {
      originalAuthData_ = null;
    }

    /// <summary>Field number for the "original_auth_method" field.</summary>
    public const int OriginalAuthMethodFieldNumber = 9;
    private readonly static string OriginalAuthMethodDefaultValue = "";

    private string originalAuthMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalAuthMethod {
      get { return originalAuthMethod_ ?? OriginalAuthMethodDefaultValue; }
      set {
        originalAuthMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_auth_method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalAuthMethod {
      get { return originalAuthMethod_ != null; }
    }
    /// <summary>Clears the value of the "original_auth_method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalAuthMethod() {
      originalAuthMethod_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (AuthMethod != other.AuthMethod) return false;
      if (AuthMethodName != other.AuthMethodName) return false;
      if (AuthData != other.AuthData) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (ProxyToBrokerUrl != other.ProxyToBrokerUrl) return false;
      if (OriginalPrincipal != other.OriginalPrincipal) return false;
      if (OriginalAuthData != other.OriginalAuthData) return false;
      if (OriginalAuthMethod != other.OriginalAuthMethod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (HasAuthMethod) hash ^= AuthMethod.GetHashCode();
      if (HasAuthMethodName) hash ^= AuthMethodName.GetHashCode();
      if (HasAuthData) hash ^= AuthData.GetHashCode();
      if (HasProtocolVersion) hash ^= ProtocolVersion.GetHashCode();
      if (HasProxyToBrokerUrl) hash ^= ProxyToBrokerUrl.GetHashCode();
      if (HasOriginalPrincipal) hash ^= OriginalPrincipal.GetHashCode();
      if (HasOriginalAuthData) hash ^= OriginalAuthData.GetHashCode();
      if (HasOriginalAuthMethod) hash ^= OriginalAuthMethod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClientVersion) {
        output.WriteRawTag(10);
        output.WriteString(ClientVersion);
      }
      if (HasAuthMethod) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AuthMethod);
      }
      if (HasAuthData) {
        output.WriteRawTag(26);
        output.WriteBytes(AuthData);
      }
      if (HasProtocolVersion) {
        output.WriteRawTag(32);
        output.WriteInt32(ProtocolVersion);
      }
      if (HasAuthMethodName) {
        output.WriteRawTag(42);
        output.WriteString(AuthMethodName);
      }
      if (HasProxyToBrokerUrl) {
        output.WriteRawTag(50);
        output.WriteString(ProxyToBrokerUrl);
      }
      if (HasOriginalPrincipal) {
        output.WriteRawTag(58);
        output.WriteString(OriginalPrincipal);
      }
      if (HasOriginalAuthData) {
        output.WriteRawTag(66);
        output.WriteString(OriginalAuthData);
      }
      if (HasOriginalAuthMethod) {
        output.WriteRawTag(74);
        output.WriteString(OriginalAuthMethod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (HasAuthMethod) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthMethod);
      }
      if (HasAuthMethodName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthMethodName);
      }
      if (HasAuthData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthData);
      }
      if (HasProtocolVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (HasProxyToBrokerUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProxyToBrokerUrl);
      }
      if (HasOriginalPrincipal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalPrincipal);
      }
      if (HasOriginalAuthData) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalAuthData);
      }
      if (HasOriginalAuthMethod) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalAuthMethod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandConnect other) {
      if (other == null) {
        return;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      if (other.HasAuthMethod) {
        AuthMethod = other.AuthMethod;
      }
      if (other.HasAuthMethodName) {
        AuthMethodName = other.AuthMethodName;
      }
      if (other.HasAuthData) {
        AuthData = other.AuthData;
      }
      if (other.HasProtocolVersion) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.HasProxyToBrokerUrl) {
        ProxyToBrokerUrl = other.ProxyToBrokerUrl;
      }
      if (other.HasOriginalPrincipal) {
        OriginalPrincipal = other.OriginalPrincipal;
      }
      if (other.HasOriginalAuthData) {
        OriginalAuthData = other.OriginalAuthData;
      }
      if (other.HasOriginalAuthMethod) {
        OriginalAuthMethod = other.OriginalAuthMethod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientVersion = input.ReadString();
            break;
          }
          case 16: {
            AuthMethod = (global::Pulsar.Proto.AuthMethod) input.ReadEnum();
            break;
          }
          case 26: {
            AuthData = input.ReadBytes();
            break;
          }
          case 32: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
          case 42: {
            AuthMethodName = input.ReadString();
            break;
          }
          case 50: {
            ProxyToBrokerUrl = input.ReadString();
            break;
          }
          case 58: {
            OriginalPrincipal = input.ReadString();
            break;
          }
          case 66: {
            OriginalAuthData = input.ReadString();
            break;
          }
          case 74: {
            OriginalAuthMethod = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandConnected : pb::IMessage<CommandConnected> {
    private static readonly pb::MessageParser<CommandConnected> _parser = new pb::MessageParser<CommandConnected>(() => new CommandConnected());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandConnected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConnected(CommandConnected other) : this() {
      _hasBits0 = other._hasBits0;
      serverVersion_ = other.serverVersion_;
      protocolVersion_ = other.protocolVersion_;
      maxMessageSize_ = other.maxMessageSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConnected Clone() {
      return new CommandConnected(this);
    }

    /// <summary>Field number for the "server_version" field.</summary>
    public const int ServerVersionFieldNumber = 1;
    private readonly static string ServerVersionDefaultValue = "";

    private string serverVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerVersion {
      get { return serverVersion_ ?? ServerVersionDefaultValue; }
      set {
        serverVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "server_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerVersion {
      get { return serverVersion_ != null; }
    }
    /// <summary>Clears the value of the "server_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerVersion() {
      serverVersion_ = null;
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 2;
    private readonly static int ProtocolVersionDefaultValue = 0;

    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { if ((_hasBits0 & 1) != 0) { return protocolVersion_; } else { return ProtocolVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        protocolVersion_ = value;
      }
    }
    /// <summary>Gets whether the "protocol_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProtocolVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "protocol_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProtocolVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_message_size" field.</summary>
    public const int MaxMessageSizeFieldNumber = 3;
    private readonly static int MaxMessageSizeDefaultValue = 0;

    private int maxMessageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMessageSize {
      get { if ((_hasBits0 & 2) != 0) { return maxMessageSize_; } else { return MaxMessageSizeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxMessageSize_ = value;
      }
    }
    /// <summary>Gets whether the "max_message_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxMessageSize {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_message_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxMessageSize() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandConnected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandConnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerVersion != other.ServerVersion) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (MaxMessageSize != other.MaxMessageSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerVersion) hash ^= ServerVersion.GetHashCode();
      if (HasProtocolVersion) hash ^= ProtocolVersion.GetHashCode();
      if (HasMaxMessageSize) hash ^= MaxMessageSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasServerVersion) {
        output.WriteRawTag(10);
        output.WriteString(ServerVersion);
      }
      if (HasProtocolVersion) {
        output.WriteRawTag(16);
        output.WriteInt32(ProtocolVersion);
      }
      if (HasMaxMessageSize) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxMessageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServerVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerVersion);
      }
      if (HasProtocolVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (HasMaxMessageSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMessageSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandConnected other) {
      if (other == null) {
        return;
      }
      if (other.HasServerVersion) {
        ServerVersion = other.ServerVersion;
      }
      if (other.HasProtocolVersion) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.HasMaxMessageSize) {
        MaxMessageSize = other.MaxMessageSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerVersion = input.ReadString();
            break;
          }
          case 16: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
          case 24: {
            MaxMessageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandAuthResponse : pb::IMessage<CommandAuthResponse> {
    private static readonly pb::MessageParser<CommandAuthResponse> _parser = new pb::MessageParser<CommandAuthResponse>(() => new CommandAuthResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandAuthResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAuthResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAuthResponse(CommandAuthResponse other) : this() {
      _hasBits0 = other._hasBits0;
      clientVersion_ = other.clientVersion_;
      response_ = other.HasResponse ? other.response_.Clone() : null;
      protocolVersion_ = other.protocolVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAuthResponse Clone() {
      return new CommandAuthResponse(this);
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private readonly static string ClientVersionDefaultValue = "";

    private string clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_ ?? ClientVersionDefaultValue; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "client_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientVersion {
      get { return clientVersion_ != null; }
    }
    /// <summary>Clears the value of the "client_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientVersion() {
      clientVersion_ = null;
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private global::Pulsar.Proto.AuthData response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.AuthData Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }
    /// <summary>Gets whether the response field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return response_ != null; }
    }
    /// <summary>Clears the value of the response field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      response_ = null;
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 3;
    private readonly static int ProtocolVersionDefaultValue = 0;

    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { if ((_hasBits0 & 1) != 0) { return protocolVersion_; } else { return ProtocolVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        protocolVersion_ = value;
      }
    }
    /// <summary>Gets whether the "protocol_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProtocolVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "protocol_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProtocolVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandAuthResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandAuthResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasClientVersion) hash ^= ClientVersion.GetHashCode();
      if (HasResponse) hash ^= Response.GetHashCode();
      if (HasProtocolVersion) hash ^= ProtocolVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasClientVersion) {
        output.WriteRawTag(10);
        output.WriteString(ClientVersion);
      }
      if (HasResponse) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
      if (HasProtocolVersion) {
        output.WriteRawTag(24);
        output.WriteInt32(ProtocolVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasClientVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (HasProtocolVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandAuthResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      if (other.HasResponse) {
        if (!HasResponse) {
          Response = new global::Pulsar.Proto.AuthData();
        }
        Response.MergeFrom(other.Response);
      }
      if (other.HasProtocolVersion) {
        ProtocolVersion = other.ProtocolVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientVersion = input.ReadString();
            break;
          }
          case 18: {
            if (!HasResponse) {
              Response = new global::Pulsar.Proto.AuthData();
            }
            input.ReadMessage(Response);
            break;
          }
          case 24: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandAuthChallenge : pb::IMessage<CommandAuthChallenge> {
    private static readonly pb::MessageParser<CommandAuthChallenge> _parser = new pb::MessageParser<CommandAuthChallenge>(() => new CommandAuthChallenge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandAuthChallenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAuthChallenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAuthChallenge(CommandAuthChallenge other) : this() {
      _hasBits0 = other._hasBits0;
      serverVersion_ = other.serverVersion_;
      challenge_ = other.HasChallenge ? other.challenge_.Clone() : null;
      protocolVersion_ = other.protocolVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAuthChallenge Clone() {
      return new CommandAuthChallenge(this);
    }

    /// <summary>Field number for the "server_version" field.</summary>
    public const int ServerVersionFieldNumber = 1;
    private readonly static string ServerVersionDefaultValue = "";

    private string serverVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerVersion {
      get { return serverVersion_ ?? ServerVersionDefaultValue; }
      set {
        serverVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "server_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerVersion {
      get { return serverVersion_ != null; }
    }
    /// <summary>Clears the value of the "server_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerVersion() {
      serverVersion_ = null;
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 2;
    private global::Pulsar.Proto.AuthData challenge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.AuthData Challenge {
      get { return challenge_; }
      set {
        challenge_ = value;
      }
    }
    /// <summary>Gets whether the challenge field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChallenge {
      get { return challenge_ != null; }
    }
    /// <summary>Clears the value of the challenge field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallenge() {
      challenge_ = null;
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 3;
    private readonly static int ProtocolVersionDefaultValue = 0;

    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { if ((_hasBits0 & 1) != 0) { return protocolVersion_; } else { return ProtocolVersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        protocolVersion_ = value;
      }
    }
    /// <summary>Gets whether the "protocol_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProtocolVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "protocol_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProtocolVersion() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandAuthChallenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandAuthChallenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerVersion != other.ServerVersion) return false;
      if (!object.Equals(Challenge, other.Challenge)) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasServerVersion) hash ^= ServerVersion.GetHashCode();
      if (HasChallenge) hash ^= Challenge.GetHashCode();
      if (HasProtocolVersion) hash ^= ProtocolVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasServerVersion) {
        output.WriteRawTag(10);
        output.WriteString(ServerVersion);
      }
      if (HasChallenge) {
        output.WriteRawTag(18);
        output.WriteMessage(Challenge);
      }
      if (HasProtocolVersion) {
        output.WriteRawTag(24);
        output.WriteInt32(ProtocolVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasServerVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerVersion);
      }
      if (HasChallenge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Challenge);
      }
      if (HasProtocolVersion) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandAuthChallenge other) {
      if (other == null) {
        return;
      }
      if (other.HasServerVersion) {
        ServerVersion = other.ServerVersion;
      }
      if (other.HasChallenge) {
        if (!HasChallenge) {
          Challenge = new global::Pulsar.Proto.AuthData();
        }
        Challenge.MergeFrom(other.Challenge);
      }
      if (other.HasProtocolVersion) {
        ProtocolVersion = other.ProtocolVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerVersion = input.ReadString();
            break;
          }
          case 18: {
            if (!HasChallenge) {
              Challenge = new global::Pulsar.Proto.AuthData();
            }
            input.ReadMessage(Challenge);
            break;
          }
          case 24: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// To support mutual authentication type, such as Sasl, reuse this command to mutual auth.
  /// </summary>
  public sealed partial class AuthData : pb::IMessage<AuthData> {
    private static readonly pb::MessageParser<AuthData> _parser = new pb::MessageParser<AuthData>(() => new AuthData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthData(AuthData other) : this() {
      authMethodName_ = other.authMethodName_;
      authData_ = other.authData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthData Clone() {
      return new AuthData(this);
    }

    /// <summary>Field number for the "auth_method_name" field.</summary>
    public const int AuthMethodNameFieldNumber = 1;
    private readonly static string AuthMethodNameDefaultValue = "";

    private string authMethodName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthMethodName {
      get { return authMethodName_ ?? AuthMethodNameDefaultValue; }
      set {
        authMethodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "auth_method_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthMethodName {
      get { return authMethodName_ != null; }
    }
    /// <summary>Clears the value of the "auth_method_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthMethodName() {
      authMethodName_ = null;
    }

    /// <summary>Field number for the "auth_data" field.</summary>
    public const int AuthData_FieldNumber = 2;
    private readonly static pb::ByteString AuthData_DefaultValue = pb::ByteString.Empty;

    private pb::ByteString authData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AuthData_ {
      get { return authData_ ?? AuthData_DefaultValue; }
      set {
        authData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "auth_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthData_ {
      get { return authData_ != null; }
    }
    /// <summary>Clears the value of the "auth_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthData_() {
      authData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthMethodName != other.AuthMethodName) return false;
      if (AuthData_ != other.AuthData_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAuthMethodName) hash ^= AuthMethodName.GetHashCode();
      if (HasAuthData_) hash ^= AuthData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasAuthMethodName) {
        output.WriteRawTag(10);
        output.WriteString(AuthMethodName);
      }
      if (HasAuthData_) {
        output.WriteRawTag(18);
        output.WriteBytes(AuthData_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAuthMethodName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthMethodName);
      }
      if (HasAuthData_) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AuthData_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthData other) {
      if (other == null) {
        return;
      }
      if (other.HasAuthMethodName) {
        AuthMethodName = other.AuthMethodName;
      }
      if (other.HasAuthData_) {
        AuthData_ = other.AuthData_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AuthMethodName = input.ReadString();
            break;
          }
          case 18: {
            AuthData_ = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeySharedMeta : pb::IMessage<KeySharedMeta> {
    private static readonly pb::MessageParser<KeySharedMeta> _parser = new pb::MessageParser<KeySharedMeta>(() => new KeySharedMeta());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeySharedMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeySharedMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeySharedMeta(KeySharedMeta other) : this() {
      _hasBits0 = other._hasBits0;
      keySharedMode_ = other.keySharedMode_;
      hashRanges_ = other.hashRanges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeySharedMeta Clone() {
      return new KeySharedMeta(this);
    }

    /// <summary>Field number for the "keySharedMode" field.</summary>
    public const int KeySharedModeFieldNumber = 1;
    private readonly static global::Pulsar.Proto.KeySharedMode KeySharedModeDefaultValue = global::Pulsar.Proto.KeySharedMode.AutoSplit;

    private global::Pulsar.Proto.KeySharedMode keySharedMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.KeySharedMode KeySharedMode {
      get { if ((_hasBits0 & 1) != 0) { return keySharedMode_; } else { return KeySharedModeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        keySharedMode_ = value;
      }
    }
    /// <summary>Gets whether the "keySharedMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKeySharedMode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "keySharedMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeySharedMode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "hashRanges" field.</summary>
    public const int HashRangesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.IntRange> _repeated_hashRanges_codec
        = pb::FieldCodec.ForMessage(26, global::Pulsar.Proto.IntRange.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.IntRange> hashRanges_ = new pbc::RepeatedField<global::Pulsar.Proto.IntRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.IntRange> HashRanges {
      get { return hashRanges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeySharedMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeySharedMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeySharedMode != other.KeySharedMode) return false;
      if(!hashRanges_.Equals(other.hashRanges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKeySharedMode) hash ^= KeySharedMode.GetHashCode();
      hash ^= hashRanges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasKeySharedMode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) KeySharedMode);
      }
      hashRanges_.WriteTo(output, _repeated_hashRanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasKeySharedMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeySharedMode);
      }
      size += hashRanges_.CalculateSize(_repeated_hashRanges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeySharedMeta other) {
      if (other == null) {
        return;
      }
      if (other.HasKeySharedMode) {
        KeySharedMode = other.KeySharedMode;
      }
      hashRanges_.Add(other.hashRanges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KeySharedMode = (global::Pulsar.Proto.KeySharedMode) input.ReadEnum();
            break;
          }
          case 26: {
            hashRanges_.AddEntriesFrom(input, _repeated_hashRanges_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandSubscribe : pb::IMessage<CommandSubscribe> {
    private static readonly pb::MessageParser<CommandSubscribe> _parser = new pb::MessageParser<CommandSubscribe>(() => new CommandSubscribe());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandSubscribe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSubscribe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSubscribe(CommandSubscribe other) : this() {
      _hasBits0 = other._hasBits0;
      topic_ = other.topic_;
      subscription_ = other.subscription_;
      subType_ = other.subType_;
      consumerId_ = other.consumerId_;
      requestId_ = other.requestId_;
      consumerName_ = other.consumerName_;
      priorityLevel_ = other.priorityLevel_;
      durable_ = other.durable_;
      startMessageId_ = other.HasStartMessageId ? other.startMessageId_.Clone() : null;
      metadata_ = other.metadata_.Clone();
      readCompacted_ = other.readCompacted_;
      schema_ = other.HasSchema ? other.schema_.Clone() : null;
      initialPosition_ = other.initialPosition_;
      replicateSubscriptionState_ = other.replicateSubscriptionState_;
      forceTopicCreation_ = other.forceTopicCreation_;
      startMessageRollbackDurationSec_ = other.startMessageRollbackDurationSec_;
      keySharedMeta_ = other.HasKeySharedMeta ? other.keySharedMeta_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSubscribe Clone() {
      return new CommandSubscribe(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "subscription" field.</summary>
    public const int SubscriptionFieldNumber = 2;
    private readonly static string SubscriptionDefaultValue = "";

    private string subscription_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subscription {
      get { return subscription_ ?? SubscriptionDefaultValue; }
      set {
        subscription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subscription" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscription {
      get { return subscription_ != null; }
    }
    /// <summary>Clears the value of the "subscription" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscription() {
      subscription_ = null;
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 3;
    private readonly static global::Pulsar.Proto.CommandSubscribe.Types.SubType SubTypeDefaultValue = global::Pulsar.Proto.CommandSubscribe.Types.SubType.Exclusive;

    private global::Pulsar.Proto.CommandSubscribe.Types.SubType subType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandSubscribe.Types.SubType SubType {
      get { if ((_hasBits0 & 1) != 0) { return subType_; } else { return SubTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subType_ = value;
      }
    }
    /// <summary>Gets whether the "subType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 4;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 2) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 5;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 4) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "consumer_name" field.</summary>
    public const int ConsumerNameFieldNumber = 6;
    private readonly static string ConsumerNameDefaultValue = "";

    private string consumerName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerName {
      get { return consumerName_ ?? ConsumerNameDefaultValue; }
      set {
        consumerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "consumer_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerName {
      get { return consumerName_ != null; }
    }
    /// <summary>Clears the value of the "consumer_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerName() {
      consumerName_ = null;
    }

    /// <summary>Field number for the "priority_level" field.</summary>
    public const int PriorityLevelFieldNumber = 7;
    private readonly static int PriorityLevelDefaultValue = 0;

    private int priorityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriorityLevel {
      get { if ((_hasBits0 & 8) != 0) { return priorityLevel_; } else { return PriorityLevelDefaultValue; } }
      set {
        _hasBits0 |= 8;
        priorityLevel_ = value;
      }
    }
    /// <summary>Gets whether the "priority_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPriorityLevel {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "priority_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPriorityLevel() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "durable" field.</summary>
    public const int DurableFieldNumber = 8;
    private readonly static bool DurableDefaultValue = true;

    private bool durable_;
    /// <summary>
    /// Signal wether the subscription should be backed by a
    /// durable cursor or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Durable {
      get { if ((_hasBits0 & 16) != 0) { return durable_; } else { return DurableDefaultValue; } }
      set {
        _hasBits0 |= 16;
        durable_ = value;
      }
    }
    /// <summary>Gets whether the "durable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDurable {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "durable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDurable() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "start_message_id" field.</summary>
    public const int StartMessageIdFieldNumber = 9;
    private global::Pulsar.Proto.MessageIdData startMessageId_;
    /// <summary>
    /// If specified, the subscription will position the cursor
    /// markd-delete position  on the particular message id and
    /// will send messages from that point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.MessageIdData StartMessageId {
      get { return startMessageId_; }
      set {
        startMessageId_ = value;
      }
    }
    /// <summary>Gets whether the start_message_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartMessageId {
      get { return startMessageId_ != null; }
    }
    /// <summary>Clears the value of the start_message_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartMessageId() {
      startMessageId_ = null;
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.KeyValue> _repeated_metadata_codec
        = pb::FieldCodec.ForMessage(82, global::Pulsar.Proto.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.KeyValue> metadata_ = new pbc::RepeatedField<global::Pulsar.Proto.KeyValue>();
    /// <summary>
    //// Add optional metadata key=value to this consumer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.KeyValue> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "read_compacted" field.</summary>
    public const int ReadCompactedFieldNumber = 11;
    private readonly static bool ReadCompactedDefaultValue = false;

    private bool readCompacted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReadCompacted {
      get { if ((_hasBits0 & 32) != 0) { return readCompacted_; } else { return ReadCompactedDefaultValue; } }
      set {
        _hasBits0 |= 32;
        readCompacted_ = value;
      }
    }
    /// <summary>Gets whether the "read_compacted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReadCompacted {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "read_compacted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReadCompacted() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 12;
    private global::Pulsar.Proto.Schema schema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }
    /// <summary>Gets whether the schema field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchema {
      get { return schema_ != null; }
    }
    /// <summary>Clears the value of the schema field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchema() {
      schema_ = null;
    }

    /// <summary>Field number for the "initialPosition" field.</summary>
    public const int InitialPositionFieldNumber = 13;
    private readonly static global::Pulsar.Proto.CommandSubscribe.Types.InitialPosition InitialPositionDefaultValue = global::Pulsar.Proto.CommandSubscribe.Types.InitialPosition.Latest;

    private global::Pulsar.Proto.CommandSubscribe.Types.InitialPosition initialPosition_;
    /// <summary>
    /// Signal whether the subscription will initialize on latest
    /// or not -- earliest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandSubscribe.Types.InitialPosition InitialPosition {
      get { if ((_hasBits0 & 64) != 0) { return initialPosition_; } else { return InitialPositionDefaultValue; } }
      set {
        _hasBits0 |= 64;
        initialPosition_ = value;
      }
    }
    /// <summary>Gets whether the "initialPosition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInitialPosition {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "initialPosition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInitialPosition() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "replicate_subscription_state" field.</summary>
    public const int ReplicateSubscriptionStateFieldNumber = 14;
    private readonly static bool ReplicateSubscriptionStateDefaultValue = false;

    private bool replicateSubscriptionState_;
    /// <summary>
    /// Mark the subscription as "replicated". Pulsar will make sure
    /// to periodically sync the state of replicated subscriptions
    /// across different clusters (when using geo-replication).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReplicateSubscriptionState {
      get { if ((_hasBits0 & 128) != 0) { return replicateSubscriptionState_; } else { return ReplicateSubscriptionStateDefaultValue; } }
      set {
        _hasBits0 |= 128;
        replicateSubscriptionState_ = value;
      }
    }
    /// <summary>Gets whether the "replicate_subscription_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplicateSubscriptionState {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "replicate_subscription_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplicateSubscriptionState() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "force_topic_creation" field.</summary>
    public const int ForceTopicCreationFieldNumber = 15;
    private readonly static bool ForceTopicCreationDefaultValue = true;

    private bool forceTopicCreation_;
    /// <summary>
    /// If true, the subscribe operation will cause a topic to be 
    /// created if it does not exist already (and if topic auto-creation
    /// is allowed by broker.
    /// If false, the subscribe operation will fail if the topic 
    /// does not exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceTopicCreation {
      get { if ((_hasBits0 & 256) != 0) { return forceTopicCreation_; } else { return ForceTopicCreationDefaultValue; } }
      set {
        _hasBits0 |= 256;
        forceTopicCreation_ = value;
      }
    }
    /// <summary>Gets whether the "force_topic_creation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasForceTopicCreation {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "force_topic_creation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearForceTopicCreation() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "start_message_rollback_duration_sec" field.</summary>
    public const int StartMessageRollbackDurationSecFieldNumber = 16;
    private readonly static ulong StartMessageRollbackDurationSecDefaultValue = 0UL;

    private ulong startMessageRollbackDurationSec_;
    /// <summary>
    /// If specified, the subscription will reset cursor's position back 
    /// to specified seconds and  will send messages from that point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartMessageRollbackDurationSec {
      get { if ((_hasBits0 & 512) != 0) { return startMessageRollbackDurationSec_; } else { return StartMessageRollbackDurationSecDefaultValue; } }
      set {
        _hasBits0 |= 512;
        startMessageRollbackDurationSec_ = value;
      }
    }
    /// <summary>Gets whether the "start_message_rollback_duration_sec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartMessageRollbackDurationSec {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "start_message_rollback_duration_sec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartMessageRollbackDurationSec() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "keySharedMeta" field.</summary>
    public const int KeySharedMetaFieldNumber = 17;
    private global::Pulsar.Proto.KeySharedMeta keySharedMeta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.KeySharedMeta KeySharedMeta {
      get { return keySharedMeta_; }
      set {
        keySharedMeta_ = value;
      }
    }
    /// <summary>Gets whether the keySharedMeta field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKeySharedMeta {
      get { return keySharedMeta_ != null; }
    }
    /// <summary>Clears the value of the keySharedMeta field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKeySharedMeta() {
      keySharedMeta_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandSubscribe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandSubscribe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (Subscription != other.Subscription) return false;
      if (SubType != other.SubType) return false;
      if (ConsumerId != other.ConsumerId) return false;
      if (RequestId != other.RequestId) return false;
      if (ConsumerName != other.ConsumerName) return false;
      if (PriorityLevel != other.PriorityLevel) return false;
      if (Durable != other.Durable) return false;
      if (!object.Equals(StartMessageId, other.StartMessageId)) return false;
      if(!metadata_.Equals(other.metadata_)) return false;
      if (ReadCompacted != other.ReadCompacted) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      if (InitialPosition != other.InitialPosition) return false;
      if (ReplicateSubscriptionState != other.ReplicateSubscriptionState) return false;
      if (ForceTopicCreation != other.ForceTopicCreation) return false;
      if (StartMessageRollbackDurationSec != other.StartMessageRollbackDurationSec) return false;
      if (!object.Equals(KeySharedMeta, other.KeySharedMeta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasSubscription) hash ^= Subscription.GetHashCode();
      if (HasSubType) hash ^= SubType.GetHashCode();
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasConsumerName) hash ^= ConsumerName.GetHashCode();
      if (HasPriorityLevel) hash ^= PriorityLevel.GetHashCode();
      if (HasDurable) hash ^= Durable.GetHashCode();
      if (HasStartMessageId) hash ^= StartMessageId.GetHashCode();
      hash ^= metadata_.GetHashCode();
      if (HasReadCompacted) hash ^= ReadCompacted.GetHashCode();
      if (HasSchema) hash ^= Schema.GetHashCode();
      if (HasInitialPosition) hash ^= InitialPosition.GetHashCode();
      if (HasReplicateSubscriptionState) hash ^= ReplicateSubscriptionState.GetHashCode();
      if (HasForceTopicCreation) hash ^= ForceTopicCreation.GetHashCode();
      if (HasStartMessageRollbackDurationSec) hash ^= StartMessageRollbackDurationSec.GetHashCode();
      if (HasKeySharedMeta) hash ^= KeySharedMeta.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTopic) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (HasSubscription) {
        output.WriteRawTag(18);
        output.WriteString(Subscription);
      }
      if (HasSubType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SubType);
      }
      if (HasConsumerId) {
        output.WriteRawTag(32);
        output.WriteUInt64(ConsumerId);
      }
      if (HasRequestId) {
        output.WriteRawTag(40);
        output.WriteUInt64(RequestId);
      }
      if (HasConsumerName) {
        output.WriteRawTag(50);
        output.WriteString(ConsumerName);
      }
      if (HasPriorityLevel) {
        output.WriteRawTag(56);
        output.WriteInt32(PriorityLevel);
      }
      if (HasDurable) {
        output.WriteRawTag(64);
        output.WriteBool(Durable);
      }
      if (HasStartMessageId) {
        output.WriteRawTag(74);
        output.WriteMessage(StartMessageId);
      }
      metadata_.WriteTo(output, _repeated_metadata_codec);
      if (HasReadCompacted) {
        output.WriteRawTag(88);
        output.WriteBool(ReadCompacted);
      }
      if (HasSchema) {
        output.WriteRawTag(98);
        output.WriteMessage(Schema);
      }
      if (HasInitialPosition) {
        output.WriteRawTag(104);
        output.WriteEnum((int) InitialPosition);
      }
      if (HasReplicateSubscriptionState) {
        output.WriteRawTag(112);
        output.WriteBool(ReplicateSubscriptionState);
      }
      if (HasForceTopicCreation) {
        output.WriteRawTag(120);
        output.WriteBool(ForceTopicCreation);
      }
      if (HasStartMessageRollbackDurationSec) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(StartMessageRollbackDurationSec);
      }
      if (HasKeySharedMeta) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(KeySharedMeta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasSubscription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subscription);
      }
      if (HasSubType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SubType);
      }
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasConsumerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerName);
      }
      if (HasPriorityLevel) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriorityLevel);
      }
      if (HasDurable) {
        size += 1 + 1;
      }
      if (HasStartMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartMessageId);
      }
      size += metadata_.CalculateSize(_repeated_metadata_codec);
      if (HasReadCompacted) {
        size += 1 + 1;
      }
      if (HasSchema) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (HasInitialPosition) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InitialPosition);
      }
      if (HasReplicateSubscriptionState) {
        size += 1 + 1;
      }
      if (HasForceTopicCreation) {
        size += 1 + 1;
      }
      if (HasStartMessageRollbackDurationSec) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(StartMessageRollbackDurationSec);
      }
      if (HasKeySharedMeta) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(KeySharedMeta);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandSubscribe other) {
      if (other == null) {
        return;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasSubscription) {
        Subscription = other.Subscription;
      }
      if (other.HasSubType) {
        SubType = other.SubType;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasConsumerName) {
        ConsumerName = other.ConsumerName;
      }
      if (other.HasPriorityLevel) {
        PriorityLevel = other.PriorityLevel;
      }
      if (other.HasDurable) {
        Durable = other.Durable;
      }
      if (other.HasStartMessageId) {
        if (!HasStartMessageId) {
          StartMessageId = new global::Pulsar.Proto.MessageIdData();
        }
        StartMessageId.MergeFrom(other.StartMessageId);
      }
      metadata_.Add(other.metadata_);
      if (other.HasReadCompacted) {
        ReadCompacted = other.ReadCompacted;
      }
      if (other.HasSchema) {
        if (!HasSchema) {
          Schema = new global::Pulsar.Proto.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      if (other.HasInitialPosition) {
        InitialPosition = other.InitialPosition;
      }
      if (other.HasReplicateSubscriptionState) {
        ReplicateSubscriptionState = other.ReplicateSubscriptionState;
      }
      if (other.HasForceTopicCreation) {
        ForceTopicCreation = other.ForceTopicCreation;
      }
      if (other.HasStartMessageRollbackDurationSec) {
        StartMessageRollbackDurationSec = other.StartMessageRollbackDurationSec;
      }
      if (other.HasKeySharedMeta) {
        if (!HasKeySharedMeta) {
          KeySharedMeta = new global::Pulsar.Proto.KeySharedMeta();
        }
        KeySharedMeta.MergeFrom(other.KeySharedMeta);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            Subscription = input.ReadString();
            break;
          }
          case 24: {
            SubType = (global::Pulsar.Proto.CommandSubscribe.Types.SubType) input.ReadEnum();
            break;
          }
          case 32: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 40: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 50: {
            ConsumerName = input.ReadString();
            break;
          }
          case 56: {
            PriorityLevel = input.ReadInt32();
            break;
          }
          case 64: {
            Durable = input.ReadBool();
            break;
          }
          case 74: {
            if (!HasStartMessageId) {
              StartMessageId = new global::Pulsar.Proto.MessageIdData();
            }
            input.ReadMessage(StartMessageId);
            break;
          }
          case 82: {
            metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
            break;
          }
          case 88: {
            ReadCompacted = input.ReadBool();
            break;
          }
          case 98: {
            if (!HasSchema) {
              Schema = new global::Pulsar.Proto.Schema();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 104: {
            InitialPosition = (global::Pulsar.Proto.CommandSubscribe.Types.InitialPosition) input.ReadEnum();
            break;
          }
          case 112: {
            ReplicateSubscriptionState = input.ReadBool();
            break;
          }
          case 120: {
            ForceTopicCreation = input.ReadBool();
            break;
          }
          case 128: {
            StartMessageRollbackDurationSec = input.ReadUInt64();
            break;
          }
          case 138: {
            if (!HasKeySharedMeta) {
              KeySharedMeta = new global::Pulsar.Proto.KeySharedMeta();
            }
            input.ReadMessage(KeySharedMeta);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommandSubscribe message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SubType {
        [pbr::OriginalName("Exclusive")] Exclusive = 0,
        [pbr::OriginalName("Shared")] Shared = 1,
        [pbr::OriginalName("Failover")] Failover = 2,
        [pbr::OriginalName("Key_Shared")] KeyShared = 3,
      }

      public enum InitialPosition {
        [pbr::OriginalName("Latest")] Latest = 0,
        [pbr::OriginalName("Earliest")] Earliest = 1,
      }

    }
    #endregion

  }

  public sealed partial class CommandPartitionedTopicMetadata : pb::IMessage<CommandPartitionedTopicMetadata> {
    private static readonly pb::MessageParser<CommandPartitionedTopicMetadata> _parser = new pb::MessageParser<CommandPartitionedTopicMetadata>(() => new CommandPartitionedTopicMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandPartitionedTopicMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPartitionedTopicMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPartitionedTopicMetadata(CommandPartitionedTopicMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      topic_ = other.topic_;
      requestId_ = other.requestId_;
      originalPrincipal_ = other.originalPrincipal_;
      originalAuthData_ = other.originalAuthData_;
      originalAuthMethod_ = other.originalAuthMethod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPartitionedTopicMetadata Clone() {
      return new CommandPartitionedTopicMetadata(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "original_principal" field.</summary>
    public const int OriginalPrincipalFieldNumber = 3;
    private readonly static string OriginalPrincipalDefaultValue = "";

    private string originalPrincipal_;
    /// <summary>
    /// TODO - Remove original_principal, original_auth_data, original_auth_method
    /// Original principal that was verified by
    /// a Pulsar proxy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalPrincipal {
      get { return originalPrincipal_ ?? OriginalPrincipalDefaultValue; }
      set {
        originalPrincipal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_principal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalPrincipal {
      get { return originalPrincipal_ != null; }
    }
    /// <summary>Clears the value of the "original_principal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalPrincipal() {
      originalPrincipal_ = null;
    }

    /// <summary>Field number for the "original_auth_data" field.</summary>
    public const int OriginalAuthDataFieldNumber = 4;
    private readonly static string OriginalAuthDataDefaultValue = "";

    private string originalAuthData_;
    /// <summary>
    /// Original auth role and auth Method that was passed
    /// to the proxy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalAuthData {
      get { return originalAuthData_ ?? OriginalAuthDataDefaultValue; }
      set {
        originalAuthData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_auth_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalAuthData {
      get { return originalAuthData_ != null; }
    }
    /// <summary>Clears the value of the "original_auth_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalAuthData() {
      originalAuthData_ = null;
    }

    /// <summary>Field number for the "original_auth_method" field.</summary>
    public const int OriginalAuthMethodFieldNumber = 5;
    private readonly static string OriginalAuthMethodDefaultValue = "";

    private string originalAuthMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalAuthMethod {
      get { return originalAuthMethod_ ?? OriginalAuthMethodDefaultValue; }
      set {
        originalAuthMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_auth_method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalAuthMethod {
      get { return originalAuthMethod_ != null; }
    }
    /// <summary>Clears the value of the "original_auth_method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalAuthMethod() {
      originalAuthMethod_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandPartitionedTopicMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandPartitionedTopicMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (RequestId != other.RequestId) return false;
      if (OriginalPrincipal != other.OriginalPrincipal) return false;
      if (OriginalAuthData != other.OriginalAuthData) return false;
      if (OriginalAuthMethod != other.OriginalAuthMethod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasOriginalPrincipal) hash ^= OriginalPrincipal.GetHashCode();
      if (HasOriginalAuthData) hash ^= OriginalAuthData.GetHashCode();
      if (HasOriginalAuthMethod) hash ^= OriginalAuthMethod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTopic) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (HasOriginalPrincipal) {
        output.WriteRawTag(26);
        output.WriteString(OriginalPrincipal);
      }
      if (HasOriginalAuthData) {
        output.WriteRawTag(34);
        output.WriteString(OriginalAuthData);
      }
      if (HasOriginalAuthMethod) {
        output.WriteRawTag(42);
        output.WriteString(OriginalAuthMethod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasOriginalPrincipal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalPrincipal);
      }
      if (HasOriginalAuthData) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalAuthData);
      }
      if (HasOriginalAuthMethod) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalAuthMethod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandPartitionedTopicMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasOriginalPrincipal) {
        OriginalPrincipal = other.OriginalPrincipal;
      }
      if (other.HasOriginalAuthData) {
        OriginalAuthData = other.OriginalAuthData;
      }
      if (other.HasOriginalAuthMethod) {
        OriginalAuthMethod = other.OriginalAuthMethod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 26: {
            OriginalPrincipal = input.ReadString();
            break;
          }
          case 34: {
            OriginalAuthData = input.ReadString();
            break;
          }
          case 42: {
            OriginalAuthMethod = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandPartitionedTopicMetadataResponse : pb::IMessage<CommandPartitionedTopicMetadataResponse> {
    private static readonly pb::MessageParser<CommandPartitionedTopicMetadataResponse> _parser = new pb::MessageParser<CommandPartitionedTopicMetadataResponse>(() => new CommandPartitionedTopicMetadataResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandPartitionedTopicMetadataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPartitionedTopicMetadataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPartitionedTopicMetadataResponse(CommandPartitionedTopicMetadataResponse other) : this() {
      _hasBits0 = other._hasBits0;
      partitions_ = other.partitions_;
      requestId_ = other.requestId_;
      response_ = other.response_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPartitionedTopicMetadataResponse Clone() {
      return new CommandPartitionedTopicMetadataResponse(this);
    }

    /// <summary>Field number for the "partitions" field.</summary>
    public const int PartitionsFieldNumber = 1;
    private readonly static uint PartitionsDefaultValue = 0;

    private uint partitions_;
    /// <summary>
    /// Optional in case of error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Partitions {
      get { if ((_hasBits0 & 1) != 0) { return partitions_; } else { return PartitionsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        partitions_ = value;
      }
    }
    /// <summary>Gets whether the "partitions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitions {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "partitions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitions() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 2) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    private readonly static global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse.Types.LookupType ResponseDefaultValue = global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse.Types.LookupType.Success;

    private global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse.Types.LookupType response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse.Types.LookupType Response {
      get { if ((_hasBits0 & 4) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 4;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandPartitionedTopicMetadataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandPartitionedTopicMetadataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Partitions != other.Partitions) return false;
      if (RequestId != other.RequestId) return false;
      if (Response != other.Response) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPartitions) hash ^= Partitions.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasResponse) hash ^= Response.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPartitions) {
        output.WriteRawTag(8);
        output.WriteUInt32(Partitions);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (HasResponse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Response);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPartitions) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Partitions);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandPartitionedTopicMetadataResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasPartitions) {
        Partitions = other.Partitions;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Partitions = input.ReadUInt32();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 24: {
            Response = (global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse.Types.LookupType) input.ReadEnum();
            break;
          }
          case 32: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommandPartitionedTopicMetadataResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LookupType {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("Failed")] Failed = 1,
      }

    }
    #endregion

  }

  public sealed partial class CommandLookupTopic : pb::IMessage<CommandLookupTopic> {
    private static readonly pb::MessageParser<CommandLookupTopic> _parser = new pb::MessageParser<CommandLookupTopic>(() => new CommandLookupTopic());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandLookupTopic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandLookupTopic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandLookupTopic(CommandLookupTopic other) : this() {
      _hasBits0 = other._hasBits0;
      topic_ = other.topic_;
      requestId_ = other.requestId_;
      authoritative_ = other.authoritative_;
      originalPrincipal_ = other.originalPrincipal_;
      originalAuthData_ = other.originalAuthData_;
      originalAuthMethod_ = other.originalAuthMethod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandLookupTopic Clone() {
      return new CommandLookupTopic(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "authoritative" field.</summary>
    public const int AuthoritativeFieldNumber = 3;
    private readonly static bool AuthoritativeDefaultValue = false;

    private bool authoritative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authoritative {
      get { if ((_hasBits0 & 2) != 0) { return authoritative_; } else { return AuthoritativeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        authoritative_ = value;
      }
    }
    /// <summary>Gets whether the "authoritative" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthoritative {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "authoritative" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthoritative() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "original_principal" field.</summary>
    public const int OriginalPrincipalFieldNumber = 4;
    private readonly static string OriginalPrincipalDefaultValue = "";

    private string originalPrincipal_;
    /// <summary>
    /// TODO - Remove original_principal, original_auth_data, original_auth_method
    /// Original principal that was verified by
    /// a Pulsar proxy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalPrincipal {
      get { return originalPrincipal_ ?? OriginalPrincipalDefaultValue; }
      set {
        originalPrincipal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_principal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalPrincipal {
      get { return originalPrincipal_ != null; }
    }
    /// <summary>Clears the value of the "original_principal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalPrincipal() {
      originalPrincipal_ = null;
    }

    /// <summary>Field number for the "original_auth_data" field.</summary>
    public const int OriginalAuthDataFieldNumber = 5;
    private readonly static string OriginalAuthDataDefaultValue = "";

    private string originalAuthData_;
    /// <summary>
    /// Original auth role and auth Method that was passed
    /// to the proxy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalAuthData {
      get { return originalAuthData_ ?? OriginalAuthDataDefaultValue; }
      set {
        originalAuthData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_auth_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalAuthData {
      get { return originalAuthData_ != null; }
    }
    /// <summary>Clears the value of the "original_auth_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalAuthData() {
      originalAuthData_ = null;
    }

    /// <summary>Field number for the "original_auth_method" field.</summary>
    public const int OriginalAuthMethodFieldNumber = 6;
    private readonly static string OriginalAuthMethodDefaultValue = "";

    private string originalAuthMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalAuthMethod {
      get { return originalAuthMethod_ ?? OriginalAuthMethodDefaultValue; }
      set {
        originalAuthMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "original_auth_method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOriginalAuthMethod {
      get { return originalAuthMethod_ != null; }
    }
    /// <summary>Clears the value of the "original_auth_method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOriginalAuthMethod() {
      originalAuthMethod_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandLookupTopic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandLookupTopic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (RequestId != other.RequestId) return false;
      if (Authoritative != other.Authoritative) return false;
      if (OriginalPrincipal != other.OriginalPrincipal) return false;
      if (OriginalAuthData != other.OriginalAuthData) return false;
      if (OriginalAuthMethod != other.OriginalAuthMethod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasAuthoritative) hash ^= Authoritative.GetHashCode();
      if (HasOriginalPrincipal) hash ^= OriginalPrincipal.GetHashCode();
      if (HasOriginalAuthData) hash ^= OriginalAuthData.GetHashCode();
      if (HasOriginalAuthMethod) hash ^= OriginalAuthMethod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTopic) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (HasAuthoritative) {
        output.WriteRawTag(24);
        output.WriteBool(Authoritative);
      }
      if (HasOriginalPrincipal) {
        output.WriteRawTag(34);
        output.WriteString(OriginalPrincipal);
      }
      if (HasOriginalAuthData) {
        output.WriteRawTag(42);
        output.WriteString(OriginalAuthData);
      }
      if (HasOriginalAuthMethod) {
        output.WriteRawTag(50);
        output.WriteString(OriginalAuthMethod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasAuthoritative) {
        size += 1 + 1;
      }
      if (HasOriginalPrincipal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalPrincipal);
      }
      if (HasOriginalAuthData) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalAuthData);
      }
      if (HasOriginalAuthMethod) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalAuthMethod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandLookupTopic other) {
      if (other == null) {
        return;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasAuthoritative) {
        Authoritative = other.Authoritative;
      }
      if (other.HasOriginalPrincipal) {
        OriginalPrincipal = other.OriginalPrincipal;
      }
      if (other.HasOriginalAuthData) {
        OriginalAuthData = other.OriginalAuthData;
      }
      if (other.HasOriginalAuthMethod) {
        OriginalAuthMethod = other.OriginalAuthMethod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 24: {
            Authoritative = input.ReadBool();
            break;
          }
          case 34: {
            OriginalPrincipal = input.ReadString();
            break;
          }
          case 42: {
            OriginalAuthData = input.ReadString();
            break;
          }
          case 50: {
            OriginalAuthMethod = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandLookupTopicResponse : pb::IMessage<CommandLookupTopicResponse> {
    private static readonly pb::MessageParser<CommandLookupTopicResponse> _parser = new pb::MessageParser<CommandLookupTopicResponse>(() => new CommandLookupTopicResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandLookupTopicResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandLookupTopicResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandLookupTopicResponse(CommandLookupTopicResponse other) : this() {
      _hasBits0 = other._hasBits0;
      brokerServiceUrl_ = other.brokerServiceUrl_;
      brokerServiceUrlTls_ = other.brokerServiceUrlTls_;
      response_ = other.response_;
      requestId_ = other.requestId_;
      authoritative_ = other.authoritative_;
      error_ = other.error_;
      message_ = other.message_;
      proxyThroughServiceUrl_ = other.proxyThroughServiceUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandLookupTopicResponse Clone() {
      return new CommandLookupTopicResponse(this);
    }

    /// <summary>Field number for the "brokerServiceUrl" field.</summary>
    public const int BrokerServiceUrlFieldNumber = 1;
    private readonly static string BrokerServiceUrlDefaultValue = "";

    private string brokerServiceUrl_;
    /// <summary>
    /// Optional in case of error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerServiceUrl {
      get { return brokerServiceUrl_ ?? BrokerServiceUrlDefaultValue; }
      set {
        brokerServiceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "brokerServiceUrl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBrokerServiceUrl {
      get { return brokerServiceUrl_ != null; }
    }
    /// <summary>Clears the value of the "brokerServiceUrl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBrokerServiceUrl() {
      brokerServiceUrl_ = null;
    }

    /// <summary>Field number for the "brokerServiceUrlTls" field.</summary>
    public const int BrokerServiceUrlTlsFieldNumber = 2;
    private readonly static string BrokerServiceUrlTlsDefaultValue = "";

    private string brokerServiceUrlTls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BrokerServiceUrlTls {
      get { return brokerServiceUrlTls_ ?? BrokerServiceUrlTlsDefaultValue; }
      set {
        brokerServiceUrlTls_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "brokerServiceUrlTls" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBrokerServiceUrlTls {
      get { return brokerServiceUrlTls_ != null; }
    }
    /// <summary>Clears the value of the "brokerServiceUrlTls" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBrokerServiceUrlTls() {
      brokerServiceUrlTls_ = null;
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    private readonly static global::Pulsar.Proto.CommandLookupTopicResponse.Types.LookupType ResponseDefaultValue = global::Pulsar.Proto.CommandLookupTopicResponse.Types.LookupType.Redirect;

    private global::Pulsar.Proto.CommandLookupTopicResponse.Types.LookupType response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandLookupTopicResponse.Types.LookupType Response {
      get { if ((_hasBits0 & 1) != 0) { return response_; } else { return ResponseDefaultValue; } }
      set {
        _hasBits0 |= 1;
        response_ = value;
      }
    }
    /// <summary>Gets whether the "response" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResponse {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "response" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 4;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 2) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "authoritative" field.</summary>
    public const int AuthoritativeFieldNumber = 5;
    private readonly static bool AuthoritativeDefaultValue = false;

    private bool authoritative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authoritative {
      get { if ((_hasBits0 & 4) != 0) { return authoritative_; } else { return AuthoritativeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        authoritative_ = value;
      }
    }
    /// <summary>Gets whether the "authoritative" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthoritative {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "authoritative" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthoritative() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 6;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 7;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "proxy_through_service_url" field.</summary>
    public const int ProxyThroughServiceUrlFieldNumber = 8;
    private readonly static bool ProxyThroughServiceUrlDefaultValue = false;

    private bool proxyThroughServiceUrl_;
    /// <summary>
    /// If it's true, indicates to the client that it must
    /// always connect through the service url after the
    /// lookup has been completed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProxyThroughServiceUrl {
      get { if ((_hasBits0 & 16) != 0) { return proxyThroughServiceUrl_; } else { return ProxyThroughServiceUrlDefaultValue; } }
      set {
        _hasBits0 |= 16;
        proxyThroughServiceUrl_ = value;
      }
    }
    /// <summary>Gets whether the "proxy_through_service_url" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProxyThroughServiceUrl {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "proxy_through_service_url" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProxyThroughServiceUrl() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandLookupTopicResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandLookupTopicResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrokerServiceUrl != other.BrokerServiceUrl) return false;
      if (BrokerServiceUrlTls != other.BrokerServiceUrlTls) return false;
      if (Response != other.Response) return false;
      if (RequestId != other.RequestId) return false;
      if (Authoritative != other.Authoritative) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (ProxyThroughServiceUrl != other.ProxyThroughServiceUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBrokerServiceUrl) hash ^= BrokerServiceUrl.GetHashCode();
      if (HasBrokerServiceUrlTls) hash ^= BrokerServiceUrlTls.GetHashCode();
      if (HasResponse) hash ^= Response.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasAuthoritative) hash ^= Authoritative.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasProxyThroughServiceUrl) hash ^= ProxyThroughServiceUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBrokerServiceUrl) {
        output.WriteRawTag(10);
        output.WriteString(BrokerServiceUrl);
      }
      if (HasBrokerServiceUrlTls) {
        output.WriteRawTag(18);
        output.WriteString(BrokerServiceUrlTls);
      }
      if (HasResponse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Response);
      }
      if (HasRequestId) {
        output.WriteRawTag(32);
        output.WriteUInt64(RequestId);
      }
      if (HasAuthoritative) {
        output.WriteRawTag(40);
        output.WriteBool(Authoritative);
      }
      if (HasError) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(58);
        output.WriteString(Message);
      }
      if (HasProxyThroughServiceUrl) {
        output.WriteRawTag(64);
        output.WriteBool(ProxyThroughServiceUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBrokerServiceUrl) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerServiceUrl);
      }
      if (HasBrokerServiceUrlTls) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BrokerServiceUrlTls);
      }
      if (HasResponse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Response);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasAuthoritative) {
        size += 1 + 1;
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (HasProxyThroughServiceUrl) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandLookupTopicResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasBrokerServiceUrl) {
        BrokerServiceUrl = other.BrokerServiceUrl;
      }
      if (other.HasBrokerServiceUrlTls) {
        BrokerServiceUrlTls = other.BrokerServiceUrlTls;
      }
      if (other.HasResponse) {
        Response = other.Response;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasAuthoritative) {
        Authoritative = other.Authoritative;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      if (other.HasProxyThroughServiceUrl) {
        ProxyThroughServiceUrl = other.ProxyThroughServiceUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BrokerServiceUrl = input.ReadString();
            break;
          }
          case 18: {
            BrokerServiceUrlTls = input.ReadString();
            break;
          }
          case 24: {
            Response = (global::Pulsar.Proto.CommandLookupTopicResponse.Types.LookupType) input.ReadEnum();
            break;
          }
          case 32: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 40: {
            Authoritative = input.ReadBool();
            break;
          }
          case 48: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 58: {
            Message = input.ReadString();
            break;
          }
          case 64: {
            ProxyThroughServiceUrl = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommandLookupTopicResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LookupType {
        [pbr::OriginalName("Redirect")] Redirect = 0,
        [pbr::OriginalName("Connect")] Connect = 1,
        [pbr::OriginalName("Failed")] Failed = 2,
      }

    }
    #endregion

  }

  /// <summary>
  //// Create a new Producer on a topic, assigning the given producer_id,
  //// all messages sent with this producer_id will be persisted on the topic
  /// </summary>
  public sealed partial class CommandProducer : pb::IMessage<CommandProducer> {
    private static readonly pb::MessageParser<CommandProducer> _parser = new pb::MessageParser<CommandProducer>(() => new CommandProducer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandProducer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandProducer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandProducer(CommandProducer other) : this() {
      _hasBits0 = other._hasBits0;
      topic_ = other.topic_;
      producerId_ = other.producerId_;
      requestId_ = other.requestId_;
      producerName_ = other.producerName_;
      encrypted_ = other.encrypted_;
      metadata_ = other.metadata_.Clone();
      schema_ = other.HasSchema ? other.schema_.Clone() : null;
      epoch_ = other.epoch_;
      userProvidedProducerName_ = other.userProvidedProducerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandProducer Clone() {
      return new CommandProducer(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "producer_id" field.</summary>
    public const int ProducerIdFieldNumber = 2;
    private readonly static ulong ProducerIdDefaultValue = 0UL;

    private ulong producerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProducerId {
      get { if ((_hasBits0 & 1) != 0) { return producerId_; } else { return ProducerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        producerId_ = value;
      }
    }
    /// <summary>Gets whether the "producer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "producer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 2) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "producer_name" field.</summary>
    public const int ProducerNameFieldNumber = 4;
    private readonly static string ProducerNameDefaultValue = "";

    private string producerName_;
    /// <summary>
    //// If a producer name is specified, the name will be used,
    //// otherwise the broker will generate a unique name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProducerName {
      get { return producerName_ ?? ProducerNameDefaultValue; }
      set {
        producerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "producer_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerName {
      get { return producerName_ != null; }
    }
    /// <summary>Clears the value of the "producer_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerName() {
      producerName_ = null;
    }

    /// <summary>Field number for the "encrypted" field.</summary>
    public const int EncryptedFieldNumber = 5;
    private readonly static bool EncryptedDefaultValue = false;

    private bool encrypted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Encrypted {
      get { if ((_hasBits0 & 4) != 0) { return encrypted_; } else { return EncryptedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        encrypted_ = value;
      }
    }
    /// <summary>Gets whether the "encrypted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncrypted {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "encrypted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncrypted() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.KeyValue> _repeated_metadata_codec
        = pb::FieldCodec.ForMessage(50, global::Pulsar.Proto.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.KeyValue> metadata_ = new pbc::RepeatedField<global::Pulsar.Proto.KeyValue>();
    /// <summary>
    //// Add optional metadata key=value to this producer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.KeyValue> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 7;
    private global::Pulsar.Proto.Schema schema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }
    /// <summary>Gets whether the schema field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchema {
      get { return schema_ != null; }
    }
    /// <summary>Clears the value of the schema field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchema() {
      schema_ = null;
    }

    /// <summary>Field number for the "epoch" field.</summary>
    public const int EpochFieldNumber = 8;
    private readonly static ulong EpochDefaultValue = 0UL;

    private ulong epoch_;
    /// <summary>
    /// If producer reconnect to broker, the epoch of this producer will +1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Epoch {
      get { if ((_hasBits0 & 8) != 0) { return epoch_; } else { return EpochDefaultValue; } }
      set {
        _hasBits0 |= 8;
        epoch_ = value;
      }
    }
    /// <summary>Gets whether the "epoch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEpoch {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "epoch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEpoch() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "user_provided_producer_name" field.</summary>
    public const int UserProvidedProducerNameFieldNumber = 9;
    private readonly static bool UserProvidedProducerNameDefaultValue = true;

    private bool userProvidedProducerName_;
    /// <summary>
    /// Indicate the name of the producer is generated or user provided
    /// Use default true here is in order to be forward compatible with the client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserProvidedProducerName {
      get { if ((_hasBits0 & 16) != 0) { return userProvidedProducerName_; } else { return UserProvidedProducerNameDefaultValue; } }
      set {
        _hasBits0 |= 16;
        userProvidedProducerName_ = value;
      }
    }
    /// <summary>Gets whether the "user_provided_producer_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserProvidedProducerName {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "user_provided_producer_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserProvidedProducerName() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandProducer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandProducer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (ProducerId != other.ProducerId) return false;
      if (RequestId != other.RequestId) return false;
      if (ProducerName != other.ProducerName) return false;
      if (Encrypted != other.Encrypted) return false;
      if(!metadata_.Equals(other.metadata_)) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      if (Epoch != other.Epoch) return false;
      if (UserProvidedProducerName != other.UserProvidedProducerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasProducerId) hash ^= ProducerId.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasProducerName) hash ^= ProducerName.GetHashCode();
      if (HasEncrypted) hash ^= Encrypted.GetHashCode();
      hash ^= metadata_.GetHashCode();
      if (HasSchema) hash ^= Schema.GetHashCode();
      if (HasEpoch) hash ^= Epoch.GetHashCode();
      if (HasUserProvidedProducerName) hash ^= UserProvidedProducerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTopic) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (HasProducerId) {
        output.WriteRawTag(16);
        output.WriteUInt64(ProducerId);
      }
      if (HasRequestId) {
        output.WriteRawTag(24);
        output.WriteUInt64(RequestId);
      }
      if (HasProducerName) {
        output.WriteRawTag(34);
        output.WriteString(ProducerName);
      }
      if (HasEncrypted) {
        output.WriteRawTag(40);
        output.WriteBool(Encrypted);
      }
      metadata_.WriteTo(output, _repeated_metadata_codec);
      if (HasSchema) {
        output.WriteRawTag(58);
        output.WriteMessage(Schema);
      }
      if (HasEpoch) {
        output.WriteRawTag(64);
        output.WriteUInt64(Epoch);
      }
      if (HasUserProvidedProducerName) {
        output.WriteRawTag(72);
        output.WriteBool(UserProvidedProducerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasProducerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProducerId);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasProducerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProducerName);
      }
      if (HasEncrypted) {
        size += 1 + 1;
      }
      size += metadata_.CalculateSize(_repeated_metadata_codec);
      if (HasSchema) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (HasEpoch) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Epoch);
      }
      if (HasUserProvidedProducerName) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandProducer other) {
      if (other == null) {
        return;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasProducerId) {
        ProducerId = other.ProducerId;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasProducerName) {
        ProducerName = other.ProducerName;
      }
      if (other.HasEncrypted) {
        Encrypted = other.Encrypted;
      }
      metadata_.Add(other.metadata_);
      if (other.HasSchema) {
        if (!HasSchema) {
          Schema = new global::Pulsar.Proto.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      if (other.HasEpoch) {
        Epoch = other.Epoch;
      }
      if (other.HasUserProvidedProducerName) {
        UserProvidedProducerName = other.UserProvidedProducerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 16: {
            ProducerId = input.ReadUInt64();
            break;
          }
          case 24: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 34: {
            ProducerName = input.ReadString();
            break;
          }
          case 40: {
            Encrypted = input.ReadBool();
            break;
          }
          case 50: {
            metadata_.AddEntriesFrom(input, _repeated_metadata_codec);
            break;
          }
          case 58: {
            if (!HasSchema) {
              Schema = new global::Pulsar.Proto.Schema();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 64: {
            Epoch = input.ReadUInt64();
            break;
          }
          case 72: {
            UserProvidedProducerName = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandSend : pb::IMessage<CommandSend> {
    private static readonly pb::MessageParser<CommandSend> _parser = new pb::MessageParser<CommandSend>(() => new CommandSend());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSend(CommandSend other) : this() {
      _hasBits0 = other._hasBits0;
      producerId_ = other.producerId_;
      sequenceId_ = other.sequenceId_;
      numMessages_ = other.numMessages_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      highestSequenceId_ = other.highestSequenceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSend Clone() {
      return new CommandSend(this);
    }

    /// <summary>Field number for the "producer_id" field.</summary>
    public const int ProducerIdFieldNumber = 1;
    private readonly static ulong ProducerIdDefaultValue = 0UL;

    private ulong producerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProducerId {
      get { if ((_hasBits0 & 1) != 0) { return producerId_; } else { return ProducerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        producerId_ = value;
      }
    }
    /// <summary>Gets whether the "producer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "producer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 2;
    private readonly static ulong SequenceIdDefaultValue = 0UL;

    private ulong sequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceId {
      get { if ((_hasBits0 & 2) != 0) { return sequenceId_; } else { return SequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "num_messages" field.</summary>
    public const int NumMessagesFieldNumber = 3;
    private readonly static int NumMessagesDefaultValue = 1;

    private int numMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumMessages {
      get { if ((_hasBits0 & 4) != 0) { return numMessages_; } else { return NumMessagesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        numMessages_ = value;
      }
    }
    /// <summary>Gets whether the "num_messages" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumMessages {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "num_messages" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumMessages() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 4;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 8) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 5;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 16) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "highest_sequence_id" field.</summary>
    public const int HighestSequenceIdFieldNumber = 6;
    private readonly static ulong HighestSequenceIdDefaultValue = 0UL;

    private ulong highestSequenceId_;
    /// <summary>
    //// Add highest sequence id to support batch message with external sequence id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HighestSequenceId {
      get { if ((_hasBits0 & 32) != 0) { return highestSequenceId_; } else { return HighestSequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        highestSequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "highest_sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHighestSequenceId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "highest_sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHighestSequenceId() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProducerId != other.ProducerId) return false;
      if (SequenceId != other.SequenceId) return false;
      if (NumMessages != other.NumMessages) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (HighestSequenceId != other.HighestSequenceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProducerId) hash ^= ProducerId.GetHashCode();
      if (HasSequenceId) hash ^= SequenceId.GetHashCode();
      if (HasNumMessages) hash ^= NumMessages.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasHighestSequenceId) hash ^= HighestSequenceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasProducerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ProducerId);
      }
      if (HasSequenceId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SequenceId);
      }
      if (HasNumMessages) {
        output.WriteRawTag(24);
        output.WriteInt32(NumMessages);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(32);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(40);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasHighestSequenceId) {
        output.WriteRawTag(48);
        output.WriteUInt64(HighestSequenceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProducerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProducerId);
      }
      if (HasSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceId);
      }
      if (HasNumMessages) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumMessages);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasHighestSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HighestSequenceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandSend other) {
      if (other == null) {
        return;
      }
      if (other.HasProducerId) {
        ProducerId = other.ProducerId;
      }
      if (other.HasSequenceId) {
        SequenceId = other.SequenceId;
      }
      if (other.HasNumMessages) {
        NumMessages = other.NumMessages;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasHighestSequenceId) {
        HighestSequenceId = other.HighestSequenceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProducerId = input.ReadUInt64();
            break;
          }
          case 16: {
            SequenceId = input.ReadUInt64();
            break;
          }
          case 24: {
            NumMessages = input.ReadInt32();
            break;
          }
          case 32: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 40: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 48: {
            HighestSequenceId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandSendReceipt : pb::IMessage<CommandSendReceipt> {
    private static readonly pb::MessageParser<CommandSendReceipt> _parser = new pb::MessageParser<CommandSendReceipt>(() => new CommandSendReceipt());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandSendReceipt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSendReceipt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSendReceipt(CommandSendReceipt other) : this() {
      _hasBits0 = other._hasBits0;
      producerId_ = other.producerId_;
      sequenceId_ = other.sequenceId_;
      messageId_ = other.HasMessageId ? other.messageId_.Clone() : null;
      highestSequenceId_ = other.highestSequenceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSendReceipt Clone() {
      return new CommandSendReceipt(this);
    }

    /// <summary>Field number for the "producer_id" field.</summary>
    public const int ProducerIdFieldNumber = 1;
    private readonly static ulong ProducerIdDefaultValue = 0UL;

    private ulong producerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProducerId {
      get { if ((_hasBits0 & 1) != 0) { return producerId_; } else { return ProducerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        producerId_ = value;
      }
    }
    /// <summary>Gets whether the "producer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "producer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 2;
    private readonly static ulong SequenceIdDefaultValue = 0UL;

    private ulong sequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceId {
      get { if ((_hasBits0 & 2) != 0) { return sequenceId_; } else { return SequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 3;
    private global::Pulsar.Proto.MessageIdData messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.MessageIdData MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }
    /// <summary>Gets whether the message_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageId {
      get { return messageId_ != null; }
    }
    /// <summary>Clears the value of the message_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageId() {
      messageId_ = null;
    }

    /// <summary>Field number for the "highest_sequence_id" field.</summary>
    public const int HighestSequenceIdFieldNumber = 4;
    private readonly static ulong HighestSequenceIdDefaultValue = 0UL;

    private ulong highestSequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HighestSequenceId {
      get { if ((_hasBits0 & 4) != 0) { return highestSequenceId_; } else { return HighestSequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        highestSequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "highest_sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHighestSequenceId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "highest_sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHighestSequenceId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandSendReceipt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandSendReceipt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProducerId != other.ProducerId) return false;
      if (SequenceId != other.SequenceId) return false;
      if (!object.Equals(MessageId, other.MessageId)) return false;
      if (HighestSequenceId != other.HighestSequenceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProducerId) hash ^= ProducerId.GetHashCode();
      if (HasSequenceId) hash ^= SequenceId.GetHashCode();
      if (HasMessageId) hash ^= MessageId.GetHashCode();
      if (HasHighestSequenceId) hash ^= HighestSequenceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasProducerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ProducerId);
      }
      if (HasSequenceId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SequenceId);
      }
      if (HasMessageId) {
        output.WriteRawTag(26);
        output.WriteMessage(MessageId);
      }
      if (HasHighestSequenceId) {
        output.WriteRawTag(32);
        output.WriteUInt64(HighestSequenceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProducerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProducerId);
      }
      if (HasSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceId);
      }
      if (HasMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageId);
      }
      if (HasHighestSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HighestSequenceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandSendReceipt other) {
      if (other == null) {
        return;
      }
      if (other.HasProducerId) {
        ProducerId = other.ProducerId;
      }
      if (other.HasSequenceId) {
        SequenceId = other.SequenceId;
      }
      if (other.HasMessageId) {
        if (!HasMessageId) {
          MessageId = new global::Pulsar.Proto.MessageIdData();
        }
        MessageId.MergeFrom(other.MessageId);
      }
      if (other.HasHighestSequenceId) {
        HighestSequenceId = other.HighestSequenceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProducerId = input.ReadUInt64();
            break;
          }
          case 16: {
            SequenceId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (!HasMessageId) {
              MessageId = new global::Pulsar.Proto.MessageIdData();
            }
            input.ReadMessage(MessageId);
            break;
          }
          case 32: {
            HighestSequenceId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandSendError : pb::IMessage<CommandSendError> {
    private static readonly pb::MessageParser<CommandSendError> _parser = new pb::MessageParser<CommandSendError>(() => new CommandSendError());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandSendError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSendError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSendError(CommandSendError other) : this() {
      _hasBits0 = other._hasBits0;
      producerId_ = other.producerId_;
      sequenceId_ = other.sequenceId_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSendError Clone() {
      return new CommandSendError(this);
    }

    /// <summary>Field number for the "producer_id" field.</summary>
    public const int ProducerIdFieldNumber = 1;
    private readonly static ulong ProducerIdDefaultValue = 0UL;

    private ulong producerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProducerId {
      get { if ((_hasBits0 & 1) != 0) { return producerId_; } else { return ProducerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        producerId_ = value;
      }
    }
    /// <summary>Gets whether the "producer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "producer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sequence_id" field.</summary>
    public const int SequenceIdFieldNumber = 2;
    private readonly static ulong SequenceIdDefaultValue = 0UL;

    private ulong sequenceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceId {
      get { if ((_hasBits0 & 2) != 0) { return sequenceId_; } else { return SequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequenceId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequenceId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 4) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandSendError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandSendError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProducerId != other.ProducerId) return false;
      if (SequenceId != other.SequenceId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProducerId) hash ^= ProducerId.GetHashCode();
      if (HasSequenceId) hash ^= SequenceId.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasProducerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ProducerId);
      }
      if (HasSequenceId) {
        output.WriteRawTag(16);
        output.WriteUInt64(SequenceId);
      }
      if (HasError) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProducerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProducerId);
      }
      if (HasSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceId);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandSendError other) {
      if (other == null) {
        return;
      }
      if (other.HasProducerId) {
        ProducerId = other.ProducerId;
      }
      if (other.HasSequenceId) {
        SequenceId = other.SequenceId;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProducerId = input.ReadUInt64();
            break;
          }
          case 16: {
            SequenceId = input.ReadUInt64();
            break;
          }
          case 24: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandMessage : pb::IMessage<CommandMessage> {
    private static readonly pb::MessageParser<CommandMessage> _parser = new pb::MessageParser<CommandMessage>(() => new CommandMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandMessage(CommandMessage other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      messageId_ = other.HasMessageId ? other.messageId_.Clone() : null;
      redeliveryCount_ = other.redeliveryCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandMessage Clone() {
      return new CommandMessage(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 2;
    private global::Pulsar.Proto.MessageIdData messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.MessageIdData MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }
    /// <summary>Gets whether the message_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageId {
      get { return messageId_ != null; }
    }
    /// <summary>Clears the value of the message_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageId() {
      messageId_ = null;
    }

    /// <summary>Field number for the "redelivery_count" field.</summary>
    public const int RedeliveryCountFieldNumber = 3;
    private readonly static uint RedeliveryCountDefaultValue = 0;

    private uint redeliveryCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RedeliveryCount {
      get { if ((_hasBits0 & 2) != 0) { return redeliveryCount_; } else { return RedeliveryCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        redeliveryCount_ = value;
      }
    }
    /// <summary>Gets whether the "redelivery_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRedeliveryCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "redelivery_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRedeliveryCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (!object.Equals(MessageId, other.MessageId)) return false;
      if (RedeliveryCount != other.RedeliveryCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasMessageId) hash ^= MessageId.GetHashCode();
      if (HasRedeliveryCount) hash ^= RedeliveryCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasMessageId) {
        output.WriteRawTag(18);
        output.WriteMessage(MessageId);
      }
      if (HasRedeliveryCount) {
        output.WriteRawTag(24);
        output.WriteUInt32(RedeliveryCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageId);
      }
      if (HasRedeliveryCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RedeliveryCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasMessageId) {
        if (!HasMessageId) {
          MessageId = new global::Pulsar.Proto.MessageIdData();
        }
        MessageId.MergeFrom(other.MessageId);
      }
      if (other.HasRedeliveryCount) {
        RedeliveryCount = other.RedeliveryCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasMessageId) {
              MessageId = new global::Pulsar.Proto.MessageIdData();
            }
            input.ReadMessage(MessageId);
            break;
          }
          case 24: {
            RedeliveryCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandAck : pb::IMessage<CommandAck> {
    private static readonly pb::MessageParser<CommandAck> _parser = new pb::MessageParser<CommandAck>(() => new CommandAck());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAck(CommandAck other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      ackType_ = other.ackType_;
      messageId_ = other.messageId_.Clone();
      validationError_ = other.validationError_;
      properties_ = other.properties_.Clone();
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAck Clone() {
      return new CommandAck(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ack_type" field.</summary>
    public const int AckTypeFieldNumber = 2;
    private readonly static global::Pulsar.Proto.CommandAck.Types.AckType AckTypeDefaultValue = global::Pulsar.Proto.CommandAck.Types.AckType.Individual;

    private global::Pulsar.Proto.CommandAck.Types.AckType ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAck.Types.AckType AckType {
      get { if ((_hasBits0 & 2) != 0) { return ackType_; } else { return AckTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ackType_ = value;
      }
    }
    /// <summary>Gets whether the "ack_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAckType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ack_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAckType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.MessageIdData> _repeated_messageId_codec
        = pb::FieldCodec.ForMessage(26, global::Pulsar.Proto.MessageIdData.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.MessageIdData> messageId_ = new pbc::RepeatedField<global::Pulsar.Proto.MessageIdData>();
    /// <summary>
    /// In case of individual acks, the client can pass a list of message ids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.MessageIdData> MessageId {
      get { return messageId_; }
    }

    /// <summary>Field number for the "validation_error" field.</summary>
    public const int ValidationErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.CommandAck.Types.ValidationError ValidationErrorDefaultValue = global::Pulsar.Proto.CommandAck.Types.ValidationError.UncompressedSizeCorruption;

    private global::Pulsar.Proto.CommandAck.Types.ValidationError validationError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAck.Types.ValidationError ValidationError {
      get { if ((_hasBits0 & 4) != 0) { return validationError_; } else { return ValidationErrorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        validationError_ = value;
      }
    }
    /// <summary>Gets whether the "validation_error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasValidationError {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "validation_error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValidationError() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.KeyLongValue> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(42, global::Pulsar.Proto.KeyLongValue.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.KeyLongValue> properties_ = new pbc::RepeatedField<global::Pulsar.Proto.KeyLongValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.KeyLongValue> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 6;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 8) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 7;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 16) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (AckType != other.AckType) return false;
      if(!messageId_.Equals(other.messageId_)) return false;
      if (ValidationError != other.ValidationError) return false;
      if(!properties_.Equals(other.properties_)) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasAckType) hash ^= AckType.GetHashCode();
      hash ^= messageId_.GetHashCode();
      if (HasValidationError) hash ^= ValidationError.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasAckType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AckType);
      }
      messageId_.WriteTo(output, _repeated_messageId_codec);
      if (HasValidationError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ValidationError);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (HasTxnidLeastBits) {
        output.WriteRawTag(48);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(56);
        output.WriteUInt64(TxnidMostBits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasAckType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AckType);
      }
      size += messageId_.CalculateSize(_repeated_messageId_codec);
      if (HasValidationError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValidationError);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandAck other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasAckType) {
        AckType = other.AckType;
      }
      messageId_.Add(other.messageId_);
      if (other.HasValidationError) {
        ValidationError = other.ValidationError;
      }
      properties_.Add(other.properties_);
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 16: {
            AckType = (global::Pulsar.Proto.CommandAck.Types.AckType) input.ReadEnum();
            break;
          }
          case 26: {
            messageId_.AddEntriesFrom(input, _repeated_messageId_codec);
            break;
          }
          case 32: {
            ValidationError = (global::Pulsar.Proto.CommandAck.Types.ValidationError) input.ReadEnum();
            break;
          }
          case 42: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
          case 48: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 56: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommandAck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AckType {
        [pbr::OriginalName("Individual")] Individual = 0,
        [pbr::OriginalName("Cumulative")] Cumulative = 1,
      }

      /// <summary>
      /// Acks can contain a flag to indicate the consumer
      /// received an invalid message that got discarded
      /// before being passed on to the application.
      /// </summary>
      public enum ValidationError {
        [pbr::OriginalName("UncompressedSizeCorruption")] UncompressedSizeCorruption = 0,
        [pbr::OriginalName("DecompressionError")] DecompressionError = 1,
        [pbr::OriginalName("ChecksumMismatch")] ChecksumMismatch = 2,
        [pbr::OriginalName("BatchDeSerializeError")] BatchDeSerializeError = 3,
        [pbr::OriginalName("DecryptionError")] DecryptionError = 4,
      }

    }
    #endregion

  }

  public sealed partial class CommandAckResponse : pb::IMessage<CommandAckResponse> {
    private static readonly pb::MessageParser<CommandAckResponse> _parser = new pb::MessageParser<CommandAckResponse>(() => new CommandAckResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandAckResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAckResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAckResponse(CommandAckResponse other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAckResponse Clone() {
      return new CommandAckResponse(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandAckResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandAckResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandAckResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 32: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// changes on active consumer
  /// </summary>
  public sealed partial class CommandActiveConsumerChange : pb::IMessage<CommandActiveConsumerChange> {
    private static readonly pb::MessageParser<CommandActiveConsumerChange> _parser = new pb::MessageParser<CommandActiveConsumerChange>(() => new CommandActiveConsumerChange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandActiveConsumerChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandActiveConsumerChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandActiveConsumerChange(CommandActiveConsumerChange other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      isActive_ = other.isActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandActiveConsumerChange Clone() {
      return new CommandActiveConsumerChange(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 2;
    private readonly static bool IsActiveDefaultValue = false;

    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { if ((_hasBits0 & 2) != 0) { return isActive_; } else { return IsActiveDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isActive_ = value;
      }
    }
    /// <summary>Gets whether the "is_active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsActive {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsActive() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandActiveConsumerChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandActiveConsumerChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (IsActive != other.IsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasIsActive) hash ^= IsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasIsActive) {
        output.WriteRawTag(16);
        output.WriteBool(IsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasIsActive) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandActiveConsumerChange other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasIsActive) {
        IsActive = other.IsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 16: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandFlow : pb::IMessage<CommandFlow> {
    private static readonly pb::MessageParser<CommandFlow> _parser = new pb::MessageParser<CommandFlow>(() => new CommandFlow());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandFlow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandFlow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandFlow(CommandFlow other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      messagePermits_ = other.messagePermits_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandFlow Clone() {
      return new CommandFlow(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "messagePermits" field.</summary>
    public const int MessagePermitsFieldNumber = 2;
    private readonly static uint MessagePermitsDefaultValue = 0;

    private uint messagePermits_;
    /// <summary>
    /// Max number of messages to prefetch, in addition
    /// of any number previously specified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessagePermits {
      get { if ((_hasBits0 & 2) != 0) { return messagePermits_; } else { return MessagePermitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        messagePermits_ = value;
      }
    }
    /// <summary>Gets whether the "messagePermits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessagePermits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "messagePermits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessagePermits() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandFlow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandFlow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (MessagePermits != other.MessagePermits) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasMessagePermits) hash ^= MessagePermits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasMessagePermits) {
        output.WriteRawTag(16);
        output.WriteUInt32(MessagePermits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasMessagePermits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessagePermits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandFlow other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasMessagePermits) {
        MessagePermits = other.MessagePermits;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 16: {
            MessagePermits = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandUnsubscribe : pb::IMessage<CommandUnsubscribe> {
    private static readonly pb::MessageParser<CommandUnsubscribe> _parser = new pb::MessageParser<CommandUnsubscribe>(() => new CommandUnsubscribe());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandUnsubscribe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandUnsubscribe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandUnsubscribe(CommandUnsubscribe other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandUnsubscribe Clone() {
      return new CommandUnsubscribe(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 2) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandUnsubscribe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandUnsubscribe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandUnsubscribe other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Reset an existing consumer to a particular message id
  /// </summary>
  public sealed partial class CommandSeek : pb::IMessage<CommandSeek> {
    private static readonly pb::MessageParser<CommandSeek> _parser = new pb::MessageParser<CommandSeek>(() => new CommandSeek());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandSeek> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSeek() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSeek(CommandSeek other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      requestId_ = other.requestId_;
      messageId_ = other.HasMessageId ? other.messageId_.Clone() : null;
      messagePublishTime_ = other.messagePublishTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSeek Clone() {
      return new CommandSeek(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 2) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 3;
    private global::Pulsar.Proto.MessageIdData messageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.MessageIdData MessageId {
      get { return messageId_; }
      set {
        messageId_ = value;
      }
    }
    /// <summary>Gets whether the message_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessageId {
      get { return messageId_ != null; }
    }
    /// <summary>Clears the value of the message_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageId() {
      messageId_ = null;
    }

    /// <summary>Field number for the "message_publish_time" field.</summary>
    public const int MessagePublishTimeFieldNumber = 4;
    private readonly static ulong MessagePublishTimeDefaultValue = 0UL;

    private ulong messagePublishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MessagePublishTime {
      get { if ((_hasBits0 & 4) != 0) { return messagePublishTime_; } else { return MessagePublishTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        messagePublishTime_ = value;
      }
    }
    /// <summary>Gets whether the "message_publish_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessagePublishTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "message_publish_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessagePublishTime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandSeek);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandSeek other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(MessageId, other.MessageId)) return false;
      if (MessagePublishTime != other.MessagePublishTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasMessageId) hash ^= MessageId.GetHashCode();
      if (HasMessagePublishTime) hash ^= MessagePublishTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (HasMessageId) {
        output.WriteRawTag(26);
        output.WriteMessage(MessageId);
      }
      if (HasMessagePublishTime) {
        output.WriteRawTag(32);
        output.WriteUInt64(MessagePublishTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageId);
      }
      if (HasMessagePublishTime) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MessagePublishTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandSeek other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasMessageId) {
        if (!HasMessageId) {
          MessageId = new global::Pulsar.Proto.MessageIdData();
        }
        MessageId.MergeFrom(other.MessageId);
      }
      if (other.HasMessagePublishTime) {
        MessagePublishTime = other.MessagePublishTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (!HasMessageId) {
              MessageId = new global::Pulsar.Proto.MessageIdData();
            }
            input.ReadMessage(MessageId);
            break;
          }
          case 32: {
            MessagePublishTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message sent by broker to client when a topic
  /// has been forcefully terminated and there are no more
  /// messages left to consume
  /// </summary>
  public sealed partial class CommandReachedEndOfTopic : pb::IMessage<CommandReachedEndOfTopic> {
    private static readonly pb::MessageParser<CommandReachedEndOfTopic> _parser = new pb::MessageParser<CommandReachedEndOfTopic>(() => new CommandReachedEndOfTopic());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandReachedEndOfTopic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandReachedEndOfTopic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandReachedEndOfTopic(CommandReachedEndOfTopic other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandReachedEndOfTopic Clone() {
      return new CommandReachedEndOfTopic(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandReachedEndOfTopic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandReachedEndOfTopic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandReachedEndOfTopic other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandCloseProducer : pb::IMessage<CommandCloseProducer> {
    private static readonly pb::MessageParser<CommandCloseProducer> _parser = new pb::MessageParser<CommandCloseProducer>(() => new CommandCloseProducer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandCloseProducer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandCloseProducer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandCloseProducer(CommandCloseProducer other) : this() {
      _hasBits0 = other._hasBits0;
      producerId_ = other.producerId_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandCloseProducer Clone() {
      return new CommandCloseProducer(this);
    }

    /// <summary>Field number for the "producer_id" field.</summary>
    public const int ProducerIdFieldNumber = 1;
    private readonly static ulong ProducerIdDefaultValue = 0UL;

    private ulong producerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProducerId {
      get { if ((_hasBits0 & 1) != 0) { return producerId_; } else { return ProducerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        producerId_ = value;
      }
    }
    /// <summary>Gets whether the "producer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "producer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 2) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandCloseProducer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandCloseProducer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProducerId != other.ProducerId) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProducerId) hash ^= ProducerId.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasProducerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ProducerId);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProducerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProducerId);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandCloseProducer other) {
      if (other == null) {
        return;
      }
      if (other.HasProducerId) {
        ProducerId = other.ProducerId;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProducerId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandCloseConsumer : pb::IMessage<CommandCloseConsumer> {
    private static readonly pb::MessageParser<CommandCloseConsumer> _parser = new pb::MessageParser<CommandCloseConsumer>(() => new CommandCloseConsumer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandCloseConsumer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandCloseConsumer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandCloseConsumer(CommandCloseConsumer other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandCloseConsumer Clone() {
      return new CommandCloseConsumer(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 2) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandCloseConsumer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandCloseConsumer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandCloseConsumer other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandRedeliverUnacknowledgedMessages : pb::IMessage<CommandRedeliverUnacknowledgedMessages> {
    private static readonly pb::MessageParser<CommandRedeliverUnacknowledgedMessages> _parser = new pb::MessageParser<CommandRedeliverUnacknowledgedMessages>(() => new CommandRedeliverUnacknowledgedMessages());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandRedeliverUnacknowledgedMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRedeliverUnacknowledgedMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRedeliverUnacknowledgedMessages(CommandRedeliverUnacknowledgedMessages other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      messageIds_ = other.messageIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandRedeliverUnacknowledgedMessages Clone() {
      return new CommandRedeliverUnacknowledgedMessages(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "message_ids" field.</summary>
    public const int MessageIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.MessageIdData> _repeated_messageIds_codec
        = pb::FieldCodec.ForMessage(18, global::Pulsar.Proto.MessageIdData.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.MessageIdData> messageIds_ = new pbc::RepeatedField<global::Pulsar.Proto.MessageIdData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.MessageIdData> MessageIds {
      get { return messageIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandRedeliverUnacknowledgedMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandRedeliverUnacknowledgedMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if(!messageIds_.Equals(other.messageIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      hash ^= messageIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      messageIds_.WriteTo(output, _repeated_messageIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      size += messageIds_.CalculateSize(_repeated_messageIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandRedeliverUnacknowledgedMessages other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      messageIds_.Add(other.messageIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 18: {
            messageIds_.AddEntriesFrom(input, _repeated_messageIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandSuccess : pb::IMessage<CommandSuccess> {
    private static readonly pb::MessageParser<CommandSuccess> _parser = new pb::MessageParser<CommandSuccess>(() => new CommandSuccess());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSuccess(CommandSuccess other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      schema_ = other.HasSchema ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandSuccess Clone() {
      return new CommandSuccess(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private global::Pulsar.Proto.Schema schema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }
    /// <summary>Gets whether the schema field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchema {
      get { return schema_ != null; }
    }
    /// <summary>Clears the value of the schema field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchema() {
      schema_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasSchema) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasSchema) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasSchema) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandSuccess other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasSchema) {
        if (!HasSchema) {
          Schema = new global::Pulsar.Proto.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (!HasSchema) {
              Schema = new global::Pulsar.Proto.Schema();
            }
            input.ReadMessage(Schema);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Response from CommandProducer
  /// </summary>
  public sealed partial class CommandProducerSuccess : pb::IMessage<CommandProducerSuccess> {
    private static readonly pb::MessageParser<CommandProducerSuccess> _parser = new pb::MessageParser<CommandProducerSuccess>(() => new CommandProducerSuccess());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandProducerSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandProducerSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandProducerSuccess(CommandProducerSuccess other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      producerName_ = other.producerName_;
      lastSequenceId_ = other.lastSequenceId_;
      schemaVersion_ = other.schemaVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandProducerSuccess Clone() {
      return new CommandProducerSuccess(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "producer_name" field.</summary>
    public const int ProducerNameFieldNumber = 2;
    private readonly static string ProducerNameDefaultValue = "";

    private string producerName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProducerName {
      get { return producerName_ ?? ProducerNameDefaultValue; }
      set {
        producerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "producer_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerName {
      get { return producerName_ != null; }
    }
    /// <summary>Clears the value of the "producer_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerName() {
      producerName_ = null;
    }

    /// <summary>Field number for the "last_sequence_id" field.</summary>
    public const int LastSequenceIdFieldNumber = 3;
    private readonly static long LastSequenceIdDefaultValue = -1L;

    private long lastSequenceId_;
    /// <summary>
    /// The last sequence id that was stored by this producer in the previous session
    /// This will only be meaningful if deduplication has been enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSequenceId {
      get { if ((_hasBits0 & 2) != 0) { return lastSequenceId_; } else { return LastSequenceIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastSequenceId_ = value;
      }
    }
    /// <summary>Gets whether the "last_sequence_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastSequenceId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "last_sequence_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastSequenceId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "schema_version" field.</summary>
    public const int SchemaVersionFieldNumber = 4;
    private readonly static pb::ByteString SchemaVersionDefaultValue = pb::ByteString.Empty;

    private pb::ByteString schemaVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SchemaVersion {
      get { return schemaVersion_ ?? SchemaVersionDefaultValue; }
      set {
        schemaVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "schema_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchemaVersion {
      get { return schemaVersion_ != null; }
    }
    /// <summary>Clears the value of the "schema_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchemaVersion() {
      schemaVersion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandProducerSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandProducerSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ProducerName != other.ProducerName) return false;
      if (LastSequenceId != other.LastSequenceId) return false;
      if (SchemaVersion != other.SchemaVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasProducerName) hash ^= ProducerName.GetHashCode();
      if (HasLastSequenceId) hash ^= LastSequenceId.GetHashCode();
      if (HasSchemaVersion) hash ^= SchemaVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasProducerName) {
        output.WriteRawTag(18);
        output.WriteString(ProducerName);
      }
      if (HasLastSequenceId) {
        output.WriteRawTag(24);
        output.WriteInt64(LastSequenceId);
      }
      if (HasSchemaVersion) {
        output.WriteRawTag(34);
        output.WriteBytes(SchemaVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasProducerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProducerName);
      }
      if (HasLastSequenceId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSequenceId);
      }
      if (HasSchemaVersion) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SchemaVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandProducerSuccess other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasProducerName) {
        ProducerName = other.ProducerName;
      }
      if (other.HasLastSequenceId) {
        LastSequenceId = other.LastSequenceId;
      }
      if (other.HasSchemaVersion) {
        SchemaVersion = other.SchemaVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 18: {
            ProducerName = input.ReadString();
            break;
          }
          case 24: {
            LastSequenceId = input.ReadInt64();
            break;
          }
          case 34: {
            SchemaVersion = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandError : pb::IMessage<CommandError> {
    private static readonly pb::MessageParser<CommandError> _parser = new pb::MessageParser<CommandError>(() => new CommandError());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandError(CommandError other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandError Clone() {
      return new CommandError(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 2) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 2;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasError) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandError other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Commands to probe the state of connection.
  /// When either client or broker doesn't receive commands for certain
  /// amount of time, they will send a Ping probe.
  /// </summary>
  public sealed partial class CommandPing : pb::IMessage<CommandPing> {
    private static readonly pb::MessageParser<CommandPing> _parser = new pb::MessageParser<CommandPing>(() => new CommandPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPing(CommandPing other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPing Clone() {
      return new CommandPing(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandPing other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CommandPong : pb::IMessage<CommandPong> {
    private static readonly pb::MessageParser<CommandPong> _parser = new pb::MessageParser<CommandPong>(() => new CommandPong());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandPong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPong(CommandPong other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandPong Clone() {
      return new CommandPong(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandPong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandPong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandPong other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CommandConsumerStats : pb::IMessage<CommandConsumerStats> {
    private static readonly pb::MessageParser<CommandConsumerStats> _parser = new pb::MessageParser<CommandConsumerStats>(() => new CommandConsumerStats());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandConsumerStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConsumerStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConsumerStats(CommandConsumerStats other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      consumerId_ = other.consumerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConsumerStats Clone() {
      return new CommandConsumerStats(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 4;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    /// <summary>
    /// required string topic_name         = 2;
    /// required string subscription_name  = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 2) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandConsumerStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandConsumerStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ConsumerId != other.ConsumerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasConsumerId) {
        output.WriteRawTag(32);
        output.WriteUInt64(ConsumerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandConsumerStats other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 32: {
            ConsumerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandConsumerStatsResponse : pb::IMessage<CommandConsumerStatsResponse> {
    private static readonly pb::MessageParser<CommandConsumerStatsResponse> _parser = new pb::MessageParser<CommandConsumerStatsResponse>(() => new CommandConsumerStatsResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandConsumerStatsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConsumerStatsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConsumerStatsResponse(CommandConsumerStatsResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
      msgRateOut_ = other.msgRateOut_;
      msgThroughputOut_ = other.msgThroughputOut_;
      msgRateRedeliver_ = other.msgRateRedeliver_;
      consumerName_ = other.consumerName_;
      availablePermits_ = other.availablePermits_;
      unackedMessages_ = other.unackedMessages_;
      blockedConsumerOnUnackedMsgs_ = other.blockedConsumerOnUnackedMsgs_;
      address_ = other.address_;
      connectedSince_ = other.connectedSince_;
      type_ = other.type_;
      msgRateExpired_ = other.msgRateExpired_;
      msgBacklog_ = other.msgBacklog_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandConsumerStatsResponse Clone() {
      return new CommandConsumerStatsResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private readonly static global::Pulsar.Proto.ServerError ErrorCodeDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError ErrorCode {
      get { if ((_hasBits0 & 2) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "error_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "error_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private readonly static string ErrorMessageDefaultValue = "";

    private string errorMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_ ?? ErrorMessageDefaultValue; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "error_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorMessage {
      get { return errorMessage_ != null; }
    }
    /// <summary>Clears the value of the "error_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorMessage() {
      errorMessage_ = null;
    }

    /// <summary>Field number for the "msgRateOut" field.</summary>
    public const int MsgRateOutFieldNumber = 4;
    private readonly static double MsgRateOutDefaultValue = 0D;

    private double msgRateOut_;
    /// <summary>
    //// Total rate of messages delivered to the consumer. msg/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MsgRateOut {
      get { if ((_hasBits0 & 4) != 0) { return msgRateOut_; } else { return MsgRateOutDefaultValue; } }
      set {
        _hasBits0 |= 4;
        msgRateOut_ = value;
      }
    }
    /// <summary>Gets whether the "msgRateOut" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgRateOut {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "msgRateOut" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgRateOut() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "msgThroughputOut" field.</summary>
    public const int MsgThroughputOutFieldNumber = 5;
    private readonly static double MsgThroughputOutDefaultValue = 0D;

    private double msgThroughputOut_;
    /// <summary>
    //// Total throughput delivered to the consumer. bytes/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MsgThroughputOut {
      get { if ((_hasBits0 & 8) != 0) { return msgThroughputOut_; } else { return MsgThroughputOutDefaultValue; } }
      set {
        _hasBits0 |= 8;
        msgThroughputOut_ = value;
      }
    }
    /// <summary>Gets whether the "msgThroughputOut" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgThroughputOut {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "msgThroughputOut" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgThroughputOut() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "msgRateRedeliver" field.</summary>
    public const int MsgRateRedeliverFieldNumber = 6;
    private readonly static double MsgRateRedeliverDefaultValue = 0D;

    private double msgRateRedeliver_;
    /// <summary>
    //// Total rate of messages redelivered by this consumer. msg/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MsgRateRedeliver {
      get { if ((_hasBits0 & 16) != 0) { return msgRateRedeliver_; } else { return MsgRateRedeliverDefaultValue; } }
      set {
        _hasBits0 |= 16;
        msgRateRedeliver_ = value;
      }
    }
    /// <summary>Gets whether the "msgRateRedeliver" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgRateRedeliver {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "msgRateRedeliver" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgRateRedeliver() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "consumerName" field.</summary>
    public const int ConsumerNameFieldNumber = 7;
    private readonly static string ConsumerNameDefaultValue = "";

    private string consumerName_;
    /// <summary>
    //// Name of the consumer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConsumerName {
      get { return consumerName_ ?? ConsumerNameDefaultValue; }
      set {
        consumerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "consumerName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerName {
      get { return consumerName_ != null; }
    }
    /// <summary>Clears the value of the "consumerName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerName() {
      consumerName_ = null;
    }

    /// <summary>Field number for the "availablePermits" field.</summary>
    public const int AvailablePermitsFieldNumber = 8;
    private readonly static ulong AvailablePermitsDefaultValue = 0UL;

    private ulong availablePermits_;
    /// <summary>
    //// Number of available message permits for the consumer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AvailablePermits {
      get { if ((_hasBits0 & 32) != 0) { return availablePermits_; } else { return AvailablePermitsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        availablePermits_ = value;
      }
    }
    /// <summary>Gets whether the "availablePermits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvailablePermits {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "availablePermits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvailablePermits() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "unackedMessages" field.</summary>
    public const int UnackedMessagesFieldNumber = 9;
    private readonly static ulong UnackedMessagesDefaultValue = 0UL;

    private ulong unackedMessages_;
    /// <summary>
    //// Number of unacknowledged messages for the consumer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnackedMessages {
      get { if ((_hasBits0 & 64) != 0) { return unackedMessages_; } else { return UnackedMessagesDefaultValue; } }
      set {
        _hasBits0 |= 64;
        unackedMessages_ = value;
      }
    }
    /// <summary>Gets whether the "unackedMessages" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnackedMessages {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "unackedMessages" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnackedMessages() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "blockedConsumerOnUnackedMsgs" field.</summary>
    public const int BlockedConsumerOnUnackedMsgsFieldNumber = 10;
    private readonly static bool BlockedConsumerOnUnackedMsgsDefaultValue = false;

    private bool blockedConsumerOnUnackedMsgs_;
    /// <summary>
    //// Flag to verify if consumer is blocked due to reaching threshold of unacked messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlockedConsumerOnUnackedMsgs {
      get { if ((_hasBits0 & 128) != 0) { return blockedConsumerOnUnackedMsgs_; } else { return BlockedConsumerOnUnackedMsgsDefaultValue; } }
      set {
        _hasBits0 |= 128;
        blockedConsumerOnUnackedMsgs_ = value;
      }
    }
    /// <summary>Gets whether the "blockedConsumerOnUnackedMsgs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlockedConsumerOnUnackedMsgs {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "blockedConsumerOnUnackedMsgs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlockedConsumerOnUnackedMsgs() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 11;
    private readonly static string AddressDefaultValue = "";

    private string address_;
    /// <summary>
    //// Address of this consumer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_ ?? AddressDefaultValue; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddress {
      get { return address_ != null; }
    }
    /// <summary>Clears the value of the "address" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddress() {
      address_ = null;
    }

    /// <summary>Field number for the "connectedSince" field.</summary>
    public const int ConnectedSinceFieldNumber = 12;
    private readonly static string ConnectedSinceDefaultValue = "";

    private string connectedSince_;
    /// <summary>
    //// Timestamp of connection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectedSince {
      get { return connectedSince_ ?? ConnectedSinceDefaultValue; }
      set {
        connectedSince_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "connectedSince" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConnectedSince {
      get { return connectedSince_ != null; }
    }
    /// <summary>Clears the value of the "connectedSince" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConnectedSince() {
      connectedSince_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 13;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    //// Whether this subscription is Exclusive or Shared or Failover
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "msgRateExpired" field.</summary>
    public const int MsgRateExpiredFieldNumber = 14;
    private readonly static double MsgRateExpiredDefaultValue = 0D;

    private double msgRateExpired_;
    /// <summary>
    //// Total rate of messages expired on this subscription. msg/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MsgRateExpired {
      get { if ((_hasBits0 & 256) != 0) { return msgRateExpired_; } else { return MsgRateExpiredDefaultValue; } }
      set {
        _hasBits0 |= 256;
        msgRateExpired_ = value;
      }
    }
    /// <summary>Gets whether the "msgRateExpired" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgRateExpired {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "msgRateExpired" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgRateExpired() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "msgBacklog" field.</summary>
    public const int MsgBacklogFieldNumber = 15;
    private readonly static ulong MsgBacklogDefaultValue = 0UL;

    private ulong msgBacklog_;
    /// <summary>
    //// Number of messages in the subscription backlog
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MsgBacklog {
      get { if ((_hasBits0 & 512) != 0) { return msgBacklog_; } else { return MsgBacklogDefaultValue; } }
      set {
        _hasBits0 |= 512;
        msgBacklog_ = value;
      }
    }
    /// <summary>Gets whether the "msgBacklog" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMsgBacklog {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "msgBacklog" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsgBacklog() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandConsumerStatsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandConsumerStatsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MsgRateOut, other.MsgRateOut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MsgThroughputOut, other.MsgThroughputOut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MsgRateRedeliver, other.MsgRateRedeliver)) return false;
      if (ConsumerName != other.ConsumerName) return false;
      if (AvailablePermits != other.AvailablePermits) return false;
      if (UnackedMessages != other.UnackedMessages) return false;
      if (BlockedConsumerOnUnackedMsgs != other.BlockedConsumerOnUnackedMsgs) return false;
      if (Address != other.Address) return false;
      if (ConnectedSince != other.ConnectedSince) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MsgRateExpired, other.MsgRateExpired)) return false;
      if (MsgBacklog != other.MsgBacklog) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasErrorMessage) hash ^= ErrorMessage.GetHashCode();
      if (HasMsgRateOut) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MsgRateOut);
      if (HasMsgThroughputOut) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MsgThroughputOut);
      if (HasMsgRateRedeliver) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MsgRateRedeliver);
      if (HasConsumerName) hash ^= ConsumerName.GetHashCode();
      if (HasAvailablePermits) hash ^= AvailablePermits.GetHashCode();
      if (HasUnackedMessages) hash ^= UnackedMessages.GetHashCode();
      if (HasBlockedConsumerOnUnackedMsgs) hash ^= BlockedConsumerOnUnackedMsgs.GetHashCode();
      if (HasAddress) hash ^= Address.GetHashCode();
      if (HasConnectedSince) hash ^= ConnectedSince.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasMsgRateExpired) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MsgRateExpired);
      if (HasMsgBacklog) hash ^= MsgBacklog.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasErrorCode) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
      if (HasErrorMessage) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (HasMsgRateOut) {
        output.WriteRawTag(33);
        output.WriteDouble(MsgRateOut);
      }
      if (HasMsgThroughputOut) {
        output.WriteRawTag(41);
        output.WriteDouble(MsgThroughputOut);
      }
      if (HasMsgRateRedeliver) {
        output.WriteRawTag(49);
        output.WriteDouble(MsgRateRedeliver);
      }
      if (HasConsumerName) {
        output.WriteRawTag(58);
        output.WriteString(ConsumerName);
      }
      if (HasAvailablePermits) {
        output.WriteRawTag(64);
        output.WriteUInt64(AvailablePermits);
      }
      if (HasUnackedMessages) {
        output.WriteRawTag(72);
        output.WriteUInt64(UnackedMessages);
      }
      if (HasBlockedConsumerOnUnackedMsgs) {
        output.WriteRawTag(80);
        output.WriteBool(BlockedConsumerOnUnackedMsgs);
      }
      if (HasAddress) {
        output.WriteRawTag(90);
        output.WriteString(Address);
      }
      if (HasConnectedSince) {
        output.WriteRawTag(98);
        output.WriteString(ConnectedSince);
      }
      if (HasType) {
        output.WriteRawTag(106);
        output.WriteString(Type);
      }
      if (HasMsgRateExpired) {
        output.WriteRawTag(113);
        output.WriteDouble(MsgRateExpired);
      }
      if (HasMsgBacklog) {
        output.WriteRawTag(120);
        output.WriteUInt64(MsgBacklog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (HasErrorMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (HasMsgRateOut) {
        size += 1 + 8;
      }
      if (HasMsgThroughputOut) {
        size += 1 + 8;
      }
      if (HasMsgRateRedeliver) {
        size += 1 + 8;
      }
      if (HasConsumerName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConsumerName);
      }
      if (HasAvailablePermits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AvailablePermits);
      }
      if (HasUnackedMessages) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnackedMessages);
      }
      if (HasBlockedConsumerOnUnackedMsgs) {
        size += 1 + 1;
      }
      if (HasAddress) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (HasConnectedSince) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectedSince);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasMsgRateExpired) {
        size += 1 + 8;
      }
      if (HasMsgBacklog) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MsgBacklog);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandConsumerStatsResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasErrorMessage) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.HasMsgRateOut) {
        MsgRateOut = other.MsgRateOut;
      }
      if (other.HasMsgThroughputOut) {
        MsgThroughputOut = other.MsgThroughputOut;
      }
      if (other.HasMsgRateRedeliver) {
        MsgRateRedeliver = other.MsgRateRedeliver;
      }
      if (other.HasConsumerName) {
        ConsumerName = other.ConsumerName;
      }
      if (other.HasAvailablePermits) {
        AvailablePermits = other.AvailablePermits;
      }
      if (other.HasUnackedMessages) {
        UnackedMessages = other.UnackedMessages;
      }
      if (other.HasBlockedConsumerOnUnackedMsgs) {
        BlockedConsumerOnUnackedMsgs = other.BlockedConsumerOnUnackedMsgs;
      }
      if (other.HasAddress) {
        Address = other.Address;
      }
      if (other.HasConnectedSince) {
        ConnectedSince = other.ConnectedSince;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasMsgRateExpired) {
        MsgRateExpired = other.MsgRateExpired;
      }
      if (other.HasMsgBacklog) {
        MsgBacklog = other.MsgBacklog;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            ErrorCode = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 33: {
            MsgRateOut = input.ReadDouble();
            break;
          }
          case 41: {
            MsgThroughputOut = input.ReadDouble();
            break;
          }
          case 49: {
            MsgRateRedeliver = input.ReadDouble();
            break;
          }
          case 58: {
            ConsumerName = input.ReadString();
            break;
          }
          case 64: {
            AvailablePermits = input.ReadUInt64();
            break;
          }
          case 72: {
            UnackedMessages = input.ReadUInt64();
            break;
          }
          case 80: {
            BlockedConsumerOnUnackedMsgs = input.ReadBool();
            break;
          }
          case 90: {
            Address = input.ReadString();
            break;
          }
          case 98: {
            ConnectedSince = input.ReadString();
            break;
          }
          case 106: {
            Type = input.ReadString();
            break;
          }
          case 113: {
            MsgRateExpired = input.ReadDouble();
            break;
          }
          case 120: {
            MsgBacklog = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandGetLastMessageId : pb::IMessage<CommandGetLastMessageId> {
    private static readonly pb::MessageParser<CommandGetLastMessageId> _parser = new pb::MessageParser<CommandGetLastMessageId>(() => new CommandGetLastMessageId());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGetLastMessageId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetLastMessageId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetLastMessageId(CommandGetLastMessageId other) : this() {
      _hasBits0 = other._hasBits0;
      consumerId_ = other.consumerId_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetLastMessageId Clone() {
      return new CommandGetLastMessageId(this);
    }

    /// <summary>Field number for the "consumer_id" field.</summary>
    public const int ConsumerIdFieldNumber = 1;
    private readonly static ulong ConsumerIdDefaultValue = 0UL;

    private ulong consumerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConsumerId {
      get { if ((_hasBits0 & 1) != 0) { return consumerId_; } else { return ConsumerIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        consumerId_ = value;
      }
    }
    /// <summary>Gets whether the "consumer_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "consumer_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 2) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGetLastMessageId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGetLastMessageId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConsumerId != other.ConsumerId) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConsumerId) hash ^= ConsumerId.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConsumerId) {
        output.WriteRawTag(8);
        output.WriteUInt64(ConsumerId);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConsumerId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsumerId);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGetLastMessageId other) {
      if (other == null) {
        return;
      }
      if (other.HasConsumerId) {
        ConsumerId = other.ConsumerId;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConsumerId = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandGetLastMessageIdResponse : pb::IMessage<CommandGetLastMessageIdResponse> {
    private static readonly pb::MessageParser<CommandGetLastMessageIdResponse> _parser = new pb::MessageParser<CommandGetLastMessageIdResponse>(() => new CommandGetLastMessageIdResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGetLastMessageIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetLastMessageIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetLastMessageIdResponse(CommandGetLastMessageIdResponse other) : this() {
      _hasBits0 = other._hasBits0;
      lastMessageId_ = other.HasLastMessageId ? other.lastMessageId_.Clone() : null;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetLastMessageIdResponse Clone() {
      return new CommandGetLastMessageIdResponse(this);
    }

    /// <summary>Field number for the "last_message_id" field.</summary>
    public const int LastMessageIdFieldNumber = 1;
    private global::Pulsar.Proto.MessageIdData lastMessageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.MessageIdData LastMessageId {
      get { return lastMessageId_; }
      set {
        lastMessageId_ = value;
      }
    }
    /// <summary>Gets whether the last_message_id field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastMessageId {
      get { return lastMessageId_ != null; }
    }
    /// <summary>Clears the value of the last_message_id field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastMessageId() {
      lastMessageId_ = null;
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 2;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGetLastMessageIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGetLastMessageIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LastMessageId, other.LastMessageId)) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasLastMessageId) hash ^= LastMessageId.GetHashCode();
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLastMessageId) {
        output.WriteRawTag(10);
        output.WriteMessage(LastMessageId);
      }
      if (HasRequestId) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasLastMessageId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastMessageId);
      }
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGetLastMessageIdResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasLastMessageId) {
        if (!HasLastMessageId) {
          LastMessageId = new global::Pulsar.Proto.MessageIdData();
        }
        LastMessageId.MergeFrom(other.LastMessageId);
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasLastMessageId) {
              LastMessageId = new global::Pulsar.Proto.MessageIdData();
            }
            input.ReadMessage(LastMessageId);
            break;
          }
          case 16: {
            RequestId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandGetTopicsOfNamespace : pb::IMessage<CommandGetTopicsOfNamespace> {
    private static readonly pb::MessageParser<CommandGetTopicsOfNamespace> _parser = new pb::MessageParser<CommandGetTopicsOfNamespace>(() => new CommandGetTopicsOfNamespace());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGetTopicsOfNamespace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetTopicsOfNamespace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetTopicsOfNamespace(CommandGetTopicsOfNamespace other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      namespace_ = other.namespace_;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetTopicsOfNamespace Clone() {
      return new CommandGetTopicsOfNamespace(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private readonly static string NamespaceDefaultValue = "";

    private string namespace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_ ?? NamespaceDefaultValue; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "namespace" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNamespace {
      get { return namespace_ != null; }
    }
    /// <summary>Clears the value of the "namespace" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNamespace() {
      namespace_ = null;
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 3;
    private readonly static global::Pulsar.Proto.CommandGetTopicsOfNamespace.Types.Mode ModeDefaultValue = global::Pulsar.Proto.CommandGetTopicsOfNamespace.Types.Mode.Persistent;

    private global::Pulsar.Proto.CommandGetTopicsOfNamespace.Types.Mode mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetTopicsOfNamespace.Types.Mode Mode {
      get { if ((_hasBits0 & 2) != 0) { return mode_; } else { return ModeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        mode_ = value;
      }
    }
    /// <summary>Gets whether the "mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMode() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGetTopicsOfNamespace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGetTopicsOfNamespace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (Namespace != other.Namespace) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasNamespace) hash ^= Namespace.GetHashCode();
      if (HasMode) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasNamespace) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (HasMode) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasNamespace) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (HasMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGetTopicsOfNamespace other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasNamespace) {
        Namespace = other.Namespace;
      }
      if (other.HasMode) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
          case 24: {
            Mode = (global::Pulsar.Proto.CommandGetTopicsOfNamespace.Types.Mode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommandGetTopicsOfNamespace message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("PERSISTENT")] Persistent = 0,
        [pbr::OriginalName("NON_PERSISTENT")] NonPersistent = 1,
        [pbr::OriginalName("ALL")] All = 2,
      }

    }
    #endregion

  }

  public sealed partial class CommandGetTopicsOfNamespaceResponse : pb::IMessage<CommandGetTopicsOfNamespaceResponse> {
    private static readonly pb::MessageParser<CommandGetTopicsOfNamespaceResponse> _parser = new pb::MessageParser<CommandGetTopicsOfNamespaceResponse>(() => new CommandGetTopicsOfNamespaceResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGetTopicsOfNamespaceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetTopicsOfNamespaceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetTopicsOfNamespaceResponse(CommandGetTopicsOfNamespaceResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      topics_ = other.topics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetTopicsOfNamespaceResponse Clone() {
      return new CommandGetTopicsOfNamespaceResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_topics_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> topics_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Topics {
      get { return topics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGetTopicsOfNamespaceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGetTopicsOfNamespaceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if(!topics_.Equals(other.topics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      hash ^= topics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      topics_.WriteTo(output, _repeated_topics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      size += topics_.CalculateSize(_repeated_topics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGetTopicsOfNamespaceResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      topics_.Add(other.topics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 18: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandGetSchema : pb::IMessage<CommandGetSchema> {
    private static readonly pb::MessageParser<CommandGetSchema> _parser = new pb::MessageParser<CommandGetSchema>(() => new CommandGetSchema());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGetSchema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetSchema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetSchema(CommandGetSchema other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      topic_ = other.topic_;
      schemaVersion_ = other.schemaVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetSchema Clone() {
      return new CommandGetSchema(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "schema_version" field.</summary>
    public const int SchemaVersionFieldNumber = 3;
    private readonly static pb::ByteString SchemaVersionDefaultValue = pb::ByteString.Empty;

    private pb::ByteString schemaVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SchemaVersion {
      get { return schemaVersion_ ?? SchemaVersionDefaultValue; }
      set {
        schemaVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "schema_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchemaVersion {
      get { return schemaVersion_ != null; }
    }
    /// <summary>Clears the value of the "schema_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchemaVersion() {
      schemaVersion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGetSchema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGetSchema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (Topic != other.Topic) return false;
      if (SchemaVersion != other.SchemaVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasSchemaVersion) hash ^= SchemaVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTopic) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (HasSchemaVersion) {
        output.WriteRawTag(26);
        output.WriteBytes(SchemaVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasSchemaVersion) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SchemaVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGetSchema other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasSchemaVersion) {
        SchemaVersion = other.SchemaVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 26: {
            SchemaVersion = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandGetSchemaResponse : pb::IMessage<CommandGetSchemaResponse> {
    private static readonly pb::MessageParser<CommandGetSchemaResponse> _parser = new pb::MessageParser<CommandGetSchemaResponse>(() => new CommandGetSchemaResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGetSchemaResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetSchemaResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetSchemaResponse(CommandGetSchemaResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
      schema_ = other.HasSchema ? other.schema_.Clone() : null;
      schemaVersion_ = other.schemaVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetSchemaResponse Clone() {
      return new CommandGetSchemaResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private readonly static global::Pulsar.Proto.ServerError ErrorCodeDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError ErrorCode {
      get { if ((_hasBits0 & 2) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "error_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "error_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private readonly static string ErrorMessageDefaultValue = "";

    private string errorMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_ ?? ErrorMessageDefaultValue; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "error_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorMessage {
      get { return errorMessage_ != null; }
    }
    /// <summary>Clears the value of the "error_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorMessage() {
      errorMessage_ = null;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 4;
    private global::Pulsar.Proto.Schema schema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }
    /// <summary>Gets whether the schema field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchema {
      get { return schema_ != null; }
    }
    /// <summary>Clears the value of the schema field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchema() {
      schema_ = null;
    }

    /// <summary>Field number for the "schema_version" field.</summary>
    public const int SchemaVersionFieldNumber = 5;
    private readonly static pb::ByteString SchemaVersionDefaultValue = pb::ByteString.Empty;

    private pb::ByteString schemaVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SchemaVersion {
      get { return schemaVersion_ ?? SchemaVersionDefaultValue; }
      set {
        schemaVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "schema_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchemaVersion {
      get { return schemaVersion_ != null; }
    }
    /// <summary>Clears the value of the "schema_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchemaVersion() {
      schemaVersion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGetSchemaResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGetSchemaResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      if (SchemaVersion != other.SchemaVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasErrorMessage) hash ^= ErrorMessage.GetHashCode();
      if (HasSchema) hash ^= Schema.GetHashCode();
      if (HasSchemaVersion) hash ^= SchemaVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasErrorCode) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
      if (HasErrorMessage) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (HasSchema) {
        output.WriteRawTag(34);
        output.WriteMessage(Schema);
      }
      if (HasSchemaVersion) {
        output.WriteRawTag(42);
        output.WriteBytes(SchemaVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (HasErrorMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (HasSchema) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (HasSchemaVersion) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SchemaVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGetSchemaResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasErrorMessage) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.HasSchema) {
        if (!HasSchema) {
          Schema = new global::Pulsar.Proto.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      if (other.HasSchemaVersion) {
        SchemaVersion = other.SchemaVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            ErrorCode = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 34: {
            if (!HasSchema) {
              Schema = new global::Pulsar.Proto.Schema();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 42: {
            SchemaVersion = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandGetOrCreateSchema : pb::IMessage<CommandGetOrCreateSchema> {
    private static readonly pb::MessageParser<CommandGetOrCreateSchema> _parser = new pb::MessageParser<CommandGetOrCreateSchema>(() => new CommandGetOrCreateSchema());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGetOrCreateSchema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetOrCreateSchema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetOrCreateSchema(CommandGetOrCreateSchema other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      topic_ = other.topic_;
      schema_ = other.HasSchema ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetOrCreateSchema Clone() {
      return new CommandGetOrCreateSchema(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 3;
    private global::Pulsar.Proto.Schema schema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.Schema Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }
    /// <summary>Gets whether the schema field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchema {
      get { return schema_ != null; }
    }
    /// <summary>Clears the value of the schema field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchema() {
      schema_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGetOrCreateSchema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGetOrCreateSchema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (Topic != other.Topic) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasSchema) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTopic) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (HasSchema) {
        output.WriteRawTag(26);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasSchema) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGetOrCreateSchema other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasSchema) {
        if (!HasSchema) {
          Schema = new global::Pulsar.Proto.Schema();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 26: {
            if (!HasSchema) {
              Schema = new global::Pulsar.Proto.Schema();
            }
            input.ReadMessage(Schema);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandGetOrCreateSchemaResponse : pb::IMessage<CommandGetOrCreateSchemaResponse> {
    private static readonly pb::MessageParser<CommandGetOrCreateSchemaResponse> _parser = new pb::MessageParser<CommandGetOrCreateSchemaResponse>(() => new CommandGetOrCreateSchemaResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGetOrCreateSchemaResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetOrCreateSchemaResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetOrCreateSchemaResponse(CommandGetOrCreateSchemaResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
      schemaVersion_ = other.schemaVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGetOrCreateSchemaResponse Clone() {
      return new CommandGetOrCreateSchemaResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private readonly static global::Pulsar.Proto.ServerError ErrorCodeDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError ErrorCode {
      get { if ((_hasBits0 & 2) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "error_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "error_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private readonly static string ErrorMessageDefaultValue = "";

    private string errorMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_ ?? ErrorMessageDefaultValue; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "error_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorMessage {
      get { return errorMessage_ != null; }
    }
    /// <summary>Clears the value of the "error_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorMessage() {
      errorMessage_ = null;
    }

    /// <summary>Field number for the "schema_version" field.</summary>
    public const int SchemaVersionFieldNumber = 4;
    private readonly static pb::ByteString SchemaVersionDefaultValue = pb::ByteString.Empty;

    private pb::ByteString schemaVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SchemaVersion {
      get { return schemaVersion_ ?? SchemaVersionDefaultValue; }
      set {
        schemaVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "schema_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSchemaVersion {
      get { return schemaVersion_ != null; }
    }
    /// <summary>Clears the value of the "schema_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSchemaVersion() {
      schemaVersion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGetOrCreateSchemaResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGetOrCreateSchemaResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (SchemaVersion != other.SchemaVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasErrorMessage) hash ^= ErrorMessage.GetHashCode();
      if (HasSchemaVersion) hash ^= SchemaVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasErrorCode) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrorCode);
      }
      if (HasErrorMessage) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (HasSchemaVersion) {
        output.WriteRawTag(34);
        output.WriteBytes(SchemaVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (HasErrorMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (HasSchemaVersion) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SchemaVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGetOrCreateSchemaResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasErrorMessage) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.HasSchemaVersion) {
        SchemaVersion = other.SchemaVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            ErrorCode = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 34: {
            SchemaVersion = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandNewTxn : pb::IMessage<CommandNewTxn> {
    private static readonly pb::MessageParser<CommandNewTxn> _parser = new pb::MessageParser<CommandNewTxn>(() => new CommandNewTxn());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandNewTxn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandNewTxn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandNewTxn(CommandNewTxn other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnTtlSeconds_ = other.txnTtlSeconds_;
      tcId_ = other.tcId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandNewTxn Clone() {
      return new CommandNewTxn(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txn_ttl_seconds" field.</summary>
    public const int TxnTtlSecondsFieldNumber = 2;
    private readonly static ulong TxnTtlSecondsDefaultValue = 0UL;

    private ulong txnTtlSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnTtlSeconds {
      get { if ((_hasBits0 & 2) != 0) { return txnTtlSeconds_; } else { return TxnTtlSecondsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnTtlSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "txn_ttl_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnTtlSeconds {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txn_ttl_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnTtlSeconds() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "tc_id" field.</summary>
    public const int TcIdFieldNumber = 3;
    private readonly static ulong TcIdDefaultValue = 0UL;

    private ulong tcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TcId {
      get { if ((_hasBits0 & 4) != 0) { return tcId_; } else { return TcIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tcId_ = value;
      }
    }
    /// <summary>Gets whether the "tc_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTcId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "tc_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTcId() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandNewTxn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandNewTxn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnTtlSeconds != other.TxnTtlSeconds) return false;
      if (TcId != other.TcId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnTtlSeconds) hash ^= TxnTtlSeconds.GetHashCode();
      if (HasTcId) hash ^= TcId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnTtlSeconds) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnTtlSeconds);
      }
      if (HasTcId) {
        output.WriteRawTag(24);
        output.WriteUInt64(TcId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnTtlSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnTtlSeconds);
      }
      if (HasTcId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TcId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandNewTxn other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnTtlSeconds) {
        TxnTtlSeconds = other.TxnTtlSeconds;
      }
      if (other.HasTcId) {
        TcId = other.TcId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnTtlSeconds = input.ReadUInt64();
            break;
          }
          case 24: {
            TcId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandNewTxnResponse : pb::IMessage<CommandNewTxnResponse> {
    private static readonly pb::MessageParser<CommandNewTxnResponse> _parser = new pb::MessageParser<CommandNewTxnResponse>(() => new CommandNewTxnResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandNewTxnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandNewTxnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandNewTxnResponse(CommandNewTxnResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandNewTxnResponse Clone() {
      return new CommandNewTxnResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandNewTxnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandNewTxnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandNewTxnResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 32: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandAddPartitionToTxn : pb::IMessage<CommandAddPartitionToTxn> {
    private static readonly pb::MessageParser<CommandAddPartitionToTxn> _parser = new pb::MessageParser<CommandAddPartitionToTxn>(() => new CommandAddPartitionToTxn());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandAddPartitionToTxn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddPartitionToTxn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddPartitionToTxn(CommandAddPartitionToTxn other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      partitions_ = other.partitions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddPartitionToTxn Clone() {
      return new CommandAddPartitionToTxn(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "partitions" field.</summary>
    public const int PartitionsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_partitions_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> partitions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Partitions {
      get { return partitions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandAddPartitionToTxn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandAddPartitionToTxn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if(!partitions_.Equals(other.partitions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      hash ^= partitions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      partitions_.WriteTo(output, _repeated_partitions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      size += partitions_.CalculateSize(_repeated_partitions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandAddPartitionToTxn other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      partitions_.Add(other.partitions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 34: {
            partitions_.AddEntriesFrom(input, _repeated_partitions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandAddPartitionToTxnResponse : pb::IMessage<CommandAddPartitionToTxnResponse> {
    private static readonly pb::MessageParser<CommandAddPartitionToTxnResponse> _parser = new pb::MessageParser<CommandAddPartitionToTxnResponse>(() => new CommandAddPartitionToTxnResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandAddPartitionToTxnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddPartitionToTxnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddPartitionToTxnResponse(CommandAddPartitionToTxnResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddPartitionToTxnResponse Clone() {
      return new CommandAddPartitionToTxnResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandAddPartitionToTxnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandAddPartitionToTxnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandAddPartitionToTxnResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 32: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Subscription : pb::IMessage<Subscription> {
    private static readonly pb::MessageParser<Subscription> _parser = new pb::MessageParser<Subscription>(() => new Subscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription(Subscription other) : this() {
      topic_ = other.topic_;
      subscription_ = other.subscription_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscription Clone() {
      return new Subscription(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "subscription" field.</summary>
    public const int Subscription_FieldNumber = 2;
    private readonly static string Subscription_DefaultValue = "";

    private string subscription_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subscription_ {
      get { return subscription_ ?? Subscription_DefaultValue; }
      set {
        subscription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "subscription" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscription_ {
      get { return subscription_ != null; }
    }
    /// <summary>Clears the value of the "subscription" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscription_() {
      subscription_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (Subscription_ != other.Subscription_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasSubscription_) hash ^= Subscription_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTopic) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (HasSubscription_) {
        output.WriteRawTag(18);
        output.WriteString(Subscription_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasSubscription_) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subscription_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subscription other) {
      if (other == null) {
        return;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasSubscription_) {
        Subscription_ = other.Subscription_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            Subscription_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandAddSubscriptionToTxn : pb::IMessage<CommandAddSubscriptionToTxn> {
    private static readonly pb::MessageParser<CommandAddSubscriptionToTxn> _parser = new pb::MessageParser<CommandAddSubscriptionToTxn>(() => new CommandAddSubscriptionToTxn());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandAddSubscriptionToTxn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddSubscriptionToTxn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddSubscriptionToTxn(CommandAddSubscriptionToTxn other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      subscription_ = other.subscription_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddSubscriptionToTxn Clone() {
      return new CommandAddSubscriptionToTxn(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "subscription" field.</summary>
    public const int SubscriptionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pulsar.Proto.Subscription> _repeated_subscription_codec
        = pb::FieldCodec.ForMessage(34, global::Pulsar.Proto.Subscription.Parser);
    private readonly pbc::RepeatedField<global::Pulsar.Proto.Subscription> subscription_ = new pbc::RepeatedField<global::Pulsar.Proto.Subscription>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pulsar.Proto.Subscription> Subscription {
      get { return subscription_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandAddSubscriptionToTxn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandAddSubscriptionToTxn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if(!subscription_.Equals(other.subscription_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      hash ^= subscription_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      subscription_.WriteTo(output, _repeated_subscription_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      size += subscription_.CalculateSize(_repeated_subscription_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandAddSubscriptionToTxn other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      subscription_.Add(other.subscription_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 34: {
            subscription_.AddEntriesFrom(input, _repeated_subscription_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandAddSubscriptionToTxnResponse : pb::IMessage<CommandAddSubscriptionToTxnResponse> {
    private static readonly pb::MessageParser<CommandAddSubscriptionToTxnResponse> _parser = new pb::MessageParser<CommandAddSubscriptionToTxnResponse>(() => new CommandAddSubscriptionToTxnResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandAddSubscriptionToTxnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddSubscriptionToTxnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddSubscriptionToTxnResponse(CommandAddSubscriptionToTxnResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandAddSubscriptionToTxnResponse Clone() {
      return new CommandAddSubscriptionToTxnResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandAddSubscriptionToTxnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandAddSubscriptionToTxnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandAddSubscriptionToTxnResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 32: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandEndTxn : pb::IMessage<CommandEndTxn> {
    private static readonly pb::MessageParser<CommandEndTxn> _parser = new pb::MessageParser<CommandEndTxn>(() => new CommandEndTxn());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandEndTxn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxn(CommandEndTxn other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      txnAction_ = other.txnAction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxn Clone() {
      return new CommandEndTxn(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "txn_action" field.</summary>
    public const int TxnActionFieldNumber = 4;
    private readonly static global::Pulsar.Proto.TxnAction TxnActionDefaultValue = global::Pulsar.Proto.TxnAction.Commit;

    private global::Pulsar.Proto.TxnAction txnAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.TxnAction TxnAction {
      get { if ((_hasBits0 & 8) != 0) { return txnAction_; } else { return TxnActionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        txnAction_ = value;
      }
    }
    /// <summary>Gets whether the "txn_action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnAction {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "txn_action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnAction() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandEndTxn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandEndTxn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (TxnAction != other.TxnAction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasTxnAction) hash ^= TxnAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasTxnAction) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TxnAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasTxnAction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TxnAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandEndTxn other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasTxnAction) {
        TxnAction = other.TxnAction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 32: {
            TxnAction = (global::Pulsar.Proto.TxnAction) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandEndTxnResponse : pb::IMessage<CommandEndTxnResponse> {
    private static readonly pb::MessageParser<CommandEndTxnResponse> _parser = new pb::MessageParser<CommandEndTxnResponse>(() => new CommandEndTxnResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandEndTxnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnResponse(CommandEndTxnResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnResponse Clone() {
      return new CommandEndTxnResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandEndTxnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandEndTxnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandEndTxnResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 32: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandEndTxnOnPartition : pb::IMessage<CommandEndTxnOnPartition> {
    private static readonly pb::MessageParser<CommandEndTxnOnPartition> _parser = new pb::MessageParser<CommandEndTxnOnPartition>(() => new CommandEndTxnOnPartition());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandEndTxnOnPartition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnPartition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnPartition(CommandEndTxnOnPartition other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      topic_ = other.topic_;
      txnAction_ = other.txnAction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnPartition Clone() {
      return new CommandEndTxnOnPartition(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 4;
    private readonly static string TopicDefaultValue = "";

    private string topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_ ?? TopicDefaultValue; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "topic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTopic {
      get { return topic_ != null; }
    }
    /// <summary>Clears the value of the "topic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTopic() {
      topic_ = null;
    }

    /// <summary>Field number for the "txn_action" field.</summary>
    public const int TxnActionFieldNumber = 5;
    private readonly static global::Pulsar.Proto.TxnAction TxnActionDefaultValue = global::Pulsar.Proto.TxnAction.Commit;

    private global::Pulsar.Proto.TxnAction txnAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.TxnAction TxnAction {
      get { if ((_hasBits0 & 8) != 0) { return txnAction_; } else { return TxnActionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        txnAction_ = value;
      }
    }
    /// <summary>Gets whether the "txn_action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnAction {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "txn_action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnAction() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandEndTxnOnPartition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandEndTxnOnPartition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (Topic != other.Topic) return false;
      if (TxnAction != other.TxnAction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasTopic) hash ^= Topic.GetHashCode();
      if (HasTxnAction) hash ^= TxnAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasTopic) {
        output.WriteRawTag(34);
        output.WriteString(Topic);
      }
      if (HasTxnAction) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TxnAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasTopic) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (HasTxnAction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TxnAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandEndTxnOnPartition other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasTopic) {
        Topic = other.Topic;
      }
      if (other.HasTxnAction) {
        TxnAction = other.TxnAction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 34: {
            Topic = input.ReadString();
            break;
          }
          case 40: {
            TxnAction = (global::Pulsar.Proto.TxnAction) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandEndTxnOnPartitionResponse : pb::IMessage<CommandEndTxnOnPartitionResponse> {
    private static readonly pb::MessageParser<CommandEndTxnOnPartitionResponse> _parser = new pb::MessageParser<CommandEndTxnOnPartitionResponse>(() => new CommandEndTxnOnPartitionResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandEndTxnOnPartitionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnPartitionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnPartitionResponse(CommandEndTxnOnPartitionResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnPartitionResponse Clone() {
      return new CommandEndTxnOnPartitionResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandEndTxnOnPartitionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandEndTxnOnPartitionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandEndTxnOnPartitionResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 32: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandEndTxnOnSubscription : pb::IMessage<CommandEndTxnOnSubscription> {
    private static readonly pb::MessageParser<CommandEndTxnOnSubscription> _parser = new pb::MessageParser<CommandEndTxnOnSubscription>(() => new CommandEndTxnOnSubscription());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandEndTxnOnSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnSubscription(CommandEndTxnOnSubscription other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      subscription_ = other.HasSubscription ? other.subscription_.Clone() : null;
      txnAction_ = other.txnAction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnSubscription Clone() {
      return new CommandEndTxnOnSubscription(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "subscription" field.</summary>
    public const int SubscriptionFieldNumber = 4;
    private global::Pulsar.Proto.Subscription subscription_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.Subscription Subscription {
      get { return subscription_; }
      set {
        subscription_ = value;
      }
    }
    /// <summary>Gets whether the subscription field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscription {
      get { return subscription_ != null; }
    }
    /// <summary>Clears the value of the subscription field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscription() {
      subscription_ = null;
    }

    /// <summary>Field number for the "txn_action" field.</summary>
    public const int TxnActionFieldNumber = 5;
    private readonly static global::Pulsar.Proto.TxnAction TxnActionDefaultValue = global::Pulsar.Proto.TxnAction.Commit;

    private global::Pulsar.Proto.TxnAction txnAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.TxnAction TxnAction {
      get { if ((_hasBits0 & 8) != 0) { return txnAction_; } else { return TxnActionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        txnAction_ = value;
      }
    }
    /// <summary>Gets whether the "txn_action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnAction {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "txn_action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnAction() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandEndTxnOnSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandEndTxnOnSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (!object.Equals(Subscription, other.Subscription)) return false;
      if (TxnAction != other.TxnAction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasSubscription) hash ^= Subscription.GetHashCode();
      if (HasTxnAction) hash ^= TxnAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasSubscription) {
        output.WriteRawTag(34);
        output.WriteMessage(Subscription);
      }
      if (HasTxnAction) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TxnAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasSubscription) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Subscription);
      }
      if (HasTxnAction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TxnAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandEndTxnOnSubscription other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasSubscription) {
        if (!HasSubscription) {
          Subscription = new global::Pulsar.Proto.Subscription();
        }
        Subscription.MergeFrom(other.Subscription);
      }
      if (other.HasTxnAction) {
        TxnAction = other.TxnAction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 34: {
            if (!HasSubscription) {
              Subscription = new global::Pulsar.Proto.Subscription();
            }
            input.ReadMessage(Subscription);
            break;
          }
          case 40: {
            TxnAction = (global::Pulsar.Proto.TxnAction) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandEndTxnOnSubscriptionResponse : pb::IMessage<CommandEndTxnOnSubscriptionResponse> {
    private static readonly pb::MessageParser<CommandEndTxnOnSubscriptionResponse> _parser = new pb::MessageParser<CommandEndTxnOnSubscriptionResponse>(() => new CommandEndTxnOnSubscriptionResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandEndTxnOnSubscriptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnSubscriptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnSubscriptionResponse(CommandEndTxnOnSubscriptionResponse other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      txnidLeastBits_ = other.txnidLeastBits_;
      txnidMostBits_ = other.txnidMostBits_;
      error_ = other.error_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandEndTxnOnSubscriptionResponse Clone() {
      return new CommandEndTxnOnSubscriptionResponse(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static ulong RequestIdDefaultValue = 0UL;

    private ulong requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "txnid_least_bits" field.</summary>
    public const int TxnidLeastBitsFieldNumber = 2;
    private readonly static ulong TxnidLeastBitsDefaultValue = 0UL;

    private ulong txnidLeastBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidLeastBits {
      get { if ((_hasBits0 & 2) != 0) { return txnidLeastBits_; } else { return TxnidLeastBitsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        txnidLeastBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_least_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidLeastBits {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "txnid_least_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidLeastBits() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "txnid_most_bits" field.</summary>
    public const int TxnidMostBitsFieldNumber = 3;
    private readonly static ulong TxnidMostBitsDefaultValue = 0UL;

    private ulong txnidMostBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TxnidMostBits {
      get { if ((_hasBits0 & 4) != 0) { return txnidMostBits_; } else { return TxnidMostBitsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        txnidMostBits_ = value;
      }
    }
    /// <summary>Gets whether the "txnid_most_bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTxnidMostBits {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "txnid_most_bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTxnidMostBits() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private readonly static global::Pulsar.Proto.ServerError ErrorDefaultValue = global::Pulsar.Proto.ServerError.UnknownError;

    private global::Pulsar.Proto.ServerError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.ServerError Error {
      get { if ((_hasBits0 & 8) != 0) { return error_; } else { return ErrorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        error_ = value;
      }
    }
    /// <summary>Gets whether the "error" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "error" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 5;
    private readonly static string MessageDefaultValue = "";

    private string message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_ ?? MessageDefaultValue; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the "message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandEndTxnOnSubscriptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandEndTxnOnSubscriptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (TxnidLeastBits != other.TxnidLeastBits) return false;
      if (TxnidMostBits != other.TxnidMostBits) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasTxnidLeastBits) hash ^= TxnidLeastBits.GetHashCode();
      if (HasTxnidMostBits) hash ^= TxnidMostBits.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt64(RequestId);
      }
      if (HasTxnidLeastBits) {
        output.WriteRawTag(16);
        output.WriteUInt64(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        output.WriteRawTag(24);
        output.WriteUInt64(TxnidMostBits);
      }
      if (HasError) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Error);
      }
      if (HasMessage) {
        output.WriteRawTag(42);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestId);
      }
      if (HasTxnidLeastBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidLeastBits);
      }
      if (HasTxnidMostBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TxnidMostBits);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandEndTxnOnSubscriptionResponse other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasTxnidLeastBits) {
        TxnidLeastBits = other.TxnidLeastBits;
      }
      if (other.HasTxnidMostBits) {
        TxnidMostBits = other.TxnidMostBits;
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt64();
            break;
          }
          case 16: {
            TxnidLeastBits = input.ReadUInt64();
            break;
          }
          case 24: {
            TxnidMostBits = input.ReadUInt64();
            break;
          }
          case 32: {
            Error = (global::Pulsar.Proto.ServerError) input.ReadEnum();
            break;
          }
          case 42: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BaseCommand : pb::IMessage<BaseCommand> {
    private static readonly pb::MessageParser<BaseCommand> _parser = new pb::MessageParser<BaseCommand>(() => new BaseCommand());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pulsar.Proto.PulsarApiReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseCommand(BaseCommand other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      connect_ = other.HasConnect ? other.connect_.Clone() : null;
      connected_ = other.HasConnected ? other.connected_.Clone() : null;
      subscribe_ = other.HasSubscribe ? other.subscribe_.Clone() : null;
      producer_ = other.HasProducer ? other.producer_.Clone() : null;
      send_ = other.HasSend ? other.send_.Clone() : null;
      sendReceipt_ = other.HasSendReceipt ? other.sendReceipt_.Clone() : null;
      sendError_ = other.HasSendError ? other.sendError_.Clone() : null;
      message_ = other.HasMessage ? other.message_.Clone() : null;
      ack_ = other.HasAck ? other.ack_.Clone() : null;
      flow_ = other.HasFlow ? other.flow_.Clone() : null;
      unsubscribe_ = other.HasUnsubscribe ? other.unsubscribe_.Clone() : null;
      success_ = other.HasSuccess ? other.success_.Clone() : null;
      error_ = other.HasError ? other.error_.Clone() : null;
      closeProducer_ = other.HasCloseProducer ? other.closeProducer_.Clone() : null;
      closeConsumer_ = other.HasCloseConsumer ? other.closeConsumer_.Clone() : null;
      producerSuccess_ = other.HasProducerSuccess ? other.producerSuccess_.Clone() : null;
      ping_ = other.HasPing ? other.ping_.Clone() : null;
      pong_ = other.HasPong ? other.pong_.Clone() : null;
      redeliverUnacknowledgedMessages_ = other.HasRedeliverUnacknowledgedMessages ? other.redeliverUnacknowledgedMessages_.Clone() : null;
      partitionMetadata_ = other.HasPartitionMetadata ? other.partitionMetadata_.Clone() : null;
      partitionMetadataResponse_ = other.HasPartitionMetadataResponse ? other.partitionMetadataResponse_.Clone() : null;
      lookupTopic_ = other.HasLookupTopic ? other.lookupTopic_.Clone() : null;
      lookupTopicResponse_ = other.HasLookupTopicResponse ? other.lookupTopicResponse_.Clone() : null;
      consumerStats_ = other.HasConsumerStats ? other.consumerStats_.Clone() : null;
      consumerStatsResponse_ = other.HasConsumerStatsResponse ? other.consumerStatsResponse_.Clone() : null;
      reachedEndOfTopic_ = other.HasReachedEndOfTopic ? other.reachedEndOfTopic_.Clone() : null;
      seek_ = other.HasSeek ? other.seek_.Clone() : null;
      getLastMessageId_ = other.HasGetLastMessageId ? other.getLastMessageId_.Clone() : null;
      getLastMessageIdResponse_ = other.HasGetLastMessageIdResponse ? other.getLastMessageIdResponse_.Clone() : null;
      activeConsumerChange_ = other.HasActiveConsumerChange ? other.activeConsumerChange_.Clone() : null;
      getTopicsOfNamespace_ = other.HasGetTopicsOfNamespace ? other.getTopicsOfNamespace_.Clone() : null;
      getTopicsOfNamespaceResponse_ = other.HasGetTopicsOfNamespaceResponse ? other.getTopicsOfNamespaceResponse_.Clone() : null;
      getSchema_ = other.HasGetSchema ? other.getSchema_.Clone() : null;
      getSchemaResponse_ = other.HasGetSchemaResponse ? other.getSchemaResponse_.Clone() : null;
      authChallenge_ = other.HasAuthChallenge ? other.authChallenge_.Clone() : null;
      authResponse_ = other.HasAuthResponse ? other.authResponse_.Clone() : null;
      ackResponse_ = other.HasAckResponse ? other.ackResponse_.Clone() : null;
      getOrCreateSchema_ = other.HasGetOrCreateSchema ? other.getOrCreateSchema_.Clone() : null;
      getOrCreateSchemaResponse_ = other.HasGetOrCreateSchemaResponse ? other.getOrCreateSchemaResponse_.Clone() : null;
      newTxn_ = other.HasNewTxn ? other.newTxn_.Clone() : null;
      newTxnResponse_ = other.HasNewTxnResponse ? other.newTxnResponse_.Clone() : null;
      addPartitionToTxn_ = other.HasAddPartitionToTxn ? other.addPartitionToTxn_.Clone() : null;
      addPartitionToTxnResponse_ = other.HasAddPartitionToTxnResponse ? other.addPartitionToTxnResponse_.Clone() : null;
      addSubscriptionToTxn_ = other.HasAddSubscriptionToTxn ? other.addSubscriptionToTxn_.Clone() : null;
      addSubscriptionToTxnResponse_ = other.HasAddSubscriptionToTxnResponse ? other.addSubscriptionToTxnResponse_.Clone() : null;
      endTxn_ = other.HasEndTxn ? other.endTxn_.Clone() : null;
      endTxnResponse_ = other.HasEndTxnResponse ? other.endTxnResponse_.Clone() : null;
      endTxnOnPartition_ = other.HasEndTxnOnPartition ? other.endTxnOnPartition_.Clone() : null;
      endTxnOnPartitionResponse_ = other.HasEndTxnOnPartitionResponse ? other.endTxnOnPartitionResponse_.Clone() : null;
      endTxnOnSubscription_ = other.HasEndTxnOnSubscription ? other.endTxnOnSubscription_.Clone() : null;
      endTxnOnSubscriptionResponse_ = other.HasEndTxnOnSubscriptionResponse ? other.endTxnOnSubscriptionResponse_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseCommand Clone() {
      return new BaseCommand(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Pulsar.Proto.BaseCommand.Types.Type TypeDefaultValue = global::Pulsar.Proto.BaseCommand.Types.Type.Connect;

    private global::Pulsar.Proto.BaseCommand.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.BaseCommand.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "connect" field.</summary>
    public const int ConnectFieldNumber = 2;
    private global::Pulsar.Proto.CommandConnect connect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandConnect Connect {
      get { return connect_; }
      set {
        connect_ = value;
      }
    }
    /// <summary>Gets whether the connect field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConnect {
      get { return connect_ != null; }
    }
    /// <summary>Clears the value of the connect field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConnect() {
      connect_ = null;
    }

    /// <summary>Field number for the "connected" field.</summary>
    public const int ConnectedFieldNumber = 3;
    private global::Pulsar.Proto.CommandConnected connected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandConnected Connected {
      get { return connected_; }
      set {
        connected_ = value;
      }
    }
    /// <summary>Gets whether the connected field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConnected {
      get { return connected_ != null; }
    }
    /// <summary>Clears the value of the connected field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConnected() {
      connected_ = null;
    }

    /// <summary>Field number for the "subscribe" field.</summary>
    public const int SubscribeFieldNumber = 4;
    private global::Pulsar.Proto.CommandSubscribe subscribe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandSubscribe Subscribe {
      get { return subscribe_; }
      set {
        subscribe_ = value;
      }
    }
    /// <summary>Gets whether the subscribe field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscribe {
      get { return subscribe_ != null; }
    }
    /// <summary>Clears the value of the subscribe field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscribe() {
      subscribe_ = null;
    }

    /// <summary>Field number for the "producer" field.</summary>
    public const int ProducerFieldNumber = 5;
    private global::Pulsar.Proto.CommandProducer producer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandProducer Producer {
      get { return producer_; }
      set {
        producer_ = value;
      }
    }
    /// <summary>Gets whether the producer field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducer {
      get { return producer_ != null; }
    }
    /// <summary>Clears the value of the producer field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducer() {
      producer_ = null;
    }

    /// <summary>Field number for the "send" field.</summary>
    public const int SendFieldNumber = 6;
    private global::Pulsar.Proto.CommandSend send_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandSend Send {
      get { return send_; }
      set {
        send_ = value;
      }
    }
    /// <summary>Gets whether the send field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSend {
      get { return send_ != null; }
    }
    /// <summary>Clears the value of the send field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSend() {
      send_ = null;
    }

    /// <summary>Field number for the "send_receipt" field.</summary>
    public const int SendReceiptFieldNumber = 7;
    private global::Pulsar.Proto.CommandSendReceipt sendReceipt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandSendReceipt SendReceipt {
      get { return sendReceipt_; }
      set {
        sendReceipt_ = value;
      }
    }
    /// <summary>Gets whether the send_receipt field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendReceipt {
      get { return sendReceipt_ != null; }
    }
    /// <summary>Clears the value of the send_receipt field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendReceipt() {
      sendReceipt_ = null;
    }

    /// <summary>Field number for the "send_error" field.</summary>
    public const int SendErrorFieldNumber = 8;
    private global::Pulsar.Proto.CommandSendError sendError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandSendError SendError {
      get { return sendError_; }
      set {
        sendError_ = value;
      }
    }
    /// <summary>Gets whether the send_error field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSendError {
      get { return sendError_ != null; }
    }
    /// <summary>Clears the value of the send_error field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSendError() {
      sendError_ = null;
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 9;
    private global::Pulsar.Proto.CommandMessage message_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandMessage Message {
      get { return message_; }
      set {
        message_ = value;
      }
    }
    /// <summary>Gets whether the message field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMessage {
      get { return message_ != null; }
    }
    /// <summary>Clears the value of the message field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      message_ = null;
    }

    /// <summary>Field number for the "ack" field.</summary>
    public const int AckFieldNumber = 10;
    private global::Pulsar.Proto.CommandAck ack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAck Ack {
      get { return ack_; }
      set {
        ack_ = value;
      }
    }
    /// <summary>Gets whether the ack field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAck {
      get { return ack_ != null; }
    }
    /// <summary>Clears the value of the ack field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAck() {
      ack_ = null;
    }

    /// <summary>Field number for the "flow" field.</summary>
    public const int FlowFieldNumber = 11;
    private global::Pulsar.Proto.CommandFlow flow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandFlow Flow {
      get { return flow_; }
      set {
        flow_ = value;
      }
    }
    /// <summary>Gets whether the flow field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlow {
      get { return flow_ != null; }
    }
    /// <summary>Clears the value of the flow field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlow() {
      flow_ = null;
    }

    /// <summary>Field number for the "unsubscribe" field.</summary>
    public const int UnsubscribeFieldNumber = 12;
    private global::Pulsar.Proto.CommandUnsubscribe unsubscribe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandUnsubscribe Unsubscribe {
      get { return unsubscribe_; }
      set {
        unsubscribe_ = value;
      }
    }
    /// <summary>Gets whether the unsubscribe field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnsubscribe {
      get { return unsubscribe_ != null; }
    }
    /// <summary>Clears the value of the unsubscribe field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnsubscribe() {
      unsubscribe_ = null;
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 13;
    private global::Pulsar.Proto.CommandSuccess success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandSuccess Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }
    /// <summary>Gets whether the success field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuccess {
      get { return success_ != null; }
    }
    /// <summary>Clears the value of the success field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuccess() {
      success_ = null;
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 14;
    private global::Pulsar.Proto.CommandError error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandError Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }
    /// <summary>Gets whether the error field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return error_ != null; }
    }
    /// <summary>Clears the value of the error field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearError() {
      error_ = null;
    }

    /// <summary>Field number for the "close_producer" field.</summary>
    public const int CloseProducerFieldNumber = 15;
    private global::Pulsar.Proto.CommandCloseProducer closeProducer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandCloseProducer CloseProducer {
      get { return closeProducer_; }
      set {
        closeProducer_ = value;
      }
    }
    /// <summary>Gets whether the close_producer field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCloseProducer {
      get { return closeProducer_ != null; }
    }
    /// <summary>Clears the value of the close_producer field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCloseProducer() {
      closeProducer_ = null;
    }

    /// <summary>Field number for the "close_consumer" field.</summary>
    public const int CloseConsumerFieldNumber = 16;
    private global::Pulsar.Proto.CommandCloseConsumer closeConsumer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandCloseConsumer CloseConsumer {
      get { return closeConsumer_; }
      set {
        closeConsumer_ = value;
      }
    }
    /// <summary>Gets whether the close_consumer field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCloseConsumer {
      get { return closeConsumer_ != null; }
    }
    /// <summary>Clears the value of the close_consumer field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCloseConsumer() {
      closeConsumer_ = null;
    }

    /// <summary>Field number for the "producer_success" field.</summary>
    public const int ProducerSuccessFieldNumber = 17;
    private global::Pulsar.Proto.CommandProducerSuccess producerSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandProducerSuccess ProducerSuccess {
      get { return producerSuccess_; }
      set {
        producerSuccess_ = value;
      }
    }
    /// <summary>Gets whether the producer_success field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProducerSuccess {
      get { return producerSuccess_ != null; }
    }
    /// <summary>Clears the value of the producer_success field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProducerSuccess() {
      producerSuccess_ = null;
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 18;
    private global::Pulsar.Proto.CommandPing ping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandPing Ping {
      get { return ping_; }
      set {
        ping_ = value;
      }
    }
    /// <summary>Gets whether the ping field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPing {
      get { return ping_ != null; }
    }
    /// <summary>Clears the value of the ping field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPing() {
      ping_ = null;
    }

    /// <summary>Field number for the "pong" field.</summary>
    public const int PongFieldNumber = 19;
    private global::Pulsar.Proto.CommandPong pong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandPong Pong {
      get { return pong_; }
      set {
        pong_ = value;
      }
    }
    /// <summary>Gets whether the pong field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPong {
      get { return pong_ != null; }
    }
    /// <summary>Clears the value of the pong field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPong() {
      pong_ = null;
    }

    /// <summary>Field number for the "redeliverUnacknowledgedMessages" field.</summary>
    public const int RedeliverUnacknowledgedMessagesFieldNumber = 20;
    private global::Pulsar.Proto.CommandRedeliverUnacknowledgedMessages redeliverUnacknowledgedMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandRedeliverUnacknowledgedMessages RedeliverUnacknowledgedMessages {
      get { return redeliverUnacknowledgedMessages_; }
      set {
        redeliverUnacknowledgedMessages_ = value;
      }
    }
    /// <summary>Gets whether the redeliverUnacknowledgedMessages field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRedeliverUnacknowledgedMessages {
      get { return redeliverUnacknowledgedMessages_ != null; }
    }
    /// <summary>Clears the value of the redeliverUnacknowledgedMessages field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRedeliverUnacknowledgedMessages() {
      redeliverUnacknowledgedMessages_ = null;
    }

    /// <summary>Field number for the "partitionMetadata" field.</summary>
    public const int PartitionMetadataFieldNumber = 21;
    private global::Pulsar.Proto.CommandPartitionedTopicMetadata partitionMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandPartitionedTopicMetadata PartitionMetadata {
      get { return partitionMetadata_; }
      set {
        partitionMetadata_ = value;
      }
    }
    /// <summary>Gets whether the partitionMetadata field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitionMetadata {
      get { return partitionMetadata_ != null; }
    }
    /// <summary>Clears the value of the partitionMetadata field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitionMetadata() {
      partitionMetadata_ = null;
    }

    /// <summary>Field number for the "partitionMetadataResponse" field.</summary>
    public const int PartitionMetadataResponseFieldNumber = 22;
    private global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse partitionMetadataResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse PartitionMetadataResponse {
      get { return partitionMetadataResponse_; }
      set {
        partitionMetadataResponse_ = value;
      }
    }
    /// <summary>Gets whether the partitionMetadataResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitionMetadataResponse {
      get { return partitionMetadataResponse_ != null; }
    }
    /// <summary>Clears the value of the partitionMetadataResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitionMetadataResponse() {
      partitionMetadataResponse_ = null;
    }

    /// <summary>Field number for the "lookupTopic" field.</summary>
    public const int LookupTopicFieldNumber = 23;
    private global::Pulsar.Proto.CommandLookupTopic lookupTopic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandLookupTopic LookupTopic {
      get { return lookupTopic_; }
      set {
        lookupTopic_ = value;
      }
    }
    /// <summary>Gets whether the lookupTopic field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLookupTopic {
      get { return lookupTopic_ != null; }
    }
    /// <summary>Clears the value of the lookupTopic field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLookupTopic() {
      lookupTopic_ = null;
    }

    /// <summary>Field number for the "lookupTopicResponse" field.</summary>
    public const int LookupTopicResponseFieldNumber = 24;
    private global::Pulsar.Proto.CommandLookupTopicResponse lookupTopicResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandLookupTopicResponse LookupTopicResponse {
      get { return lookupTopicResponse_; }
      set {
        lookupTopicResponse_ = value;
      }
    }
    /// <summary>Gets whether the lookupTopicResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLookupTopicResponse {
      get { return lookupTopicResponse_ != null; }
    }
    /// <summary>Clears the value of the lookupTopicResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLookupTopicResponse() {
      lookupTopicResponse_ = null;
    }

    /// <summary>Field number for the "consumerStats" field.</summary>
    public const int ConsumerStatsFieldNumber = 25;
    private global::Pulsar.Proto.CommandConsumerStats consumerStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandConsumerStats ConsumerStats {
      get { return consumerStats_; }
      set {
        consumerStats_ = value;
      }
    }
    /// <summary>Gets whether the consumerStats field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerStats {
      get { return consumerStats_ != null; }
    }
    /// <summary>Clears the value of the consumerStats field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerStats() {
      consumerStats_ = null;
    }

    /// <summary>Field number for the "consumerStatsResponse" field.</summary>
    public const int ConsumerStatsResponseFieldNumber = 26;
    private global::Pulsar.Proto.CommandConsumerStatsResponse consumerStatsResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandConsumerStatsResponse ConsumerStatsResponse {
      get { return consumerStatsResponse_; }
      set {
        consumerStatsResponse_ = value;
      }
    }
    /// <summary>Gets whether the consumerStatsResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConsumerStatsResponse {
      get { return consumerStatsResponse_ != null; }
    }
    /// <summary>Clears the value of the consumerStatsResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConsumerStatsResponse() {
      consumerStatsResponse_ = null;
    }

    /// <summary>Field number for the "reachedEndOfTopic" field.</summary>
    public const int ReachedEndOfTopicFieldNumber = 27;
    private global::Pulsar.Proto.CommandReachedEndOfTopic reachedEndOfTopic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandReachedEndOfTopic ReachedEndOfTopic {
      get { return reachedEndOfTopic_; }
      set {
        reachedEndOfTopic_ = value;
      }
    }
    /// <summary>Gets whether the reachedEndOfTopic field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReachedEndOfTopic {
      get { return reachedEndOfTopic_ != null; }
    }
    /// <summary>Clears the value of the reachedEndOfTopic field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReachedEndOfTopic() {
      reachedEndOfTopic_ = null;
    }

    /// <summary>Field number for the "seek" field.</summary>
    public const int SeekFieldNumber = 28;
    private global::Pulsar.Proto.CommandSeek seek_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandSeek Seek {
      get { return seek_; }
      set {
        seek_ = value;
      }
    }
    /// <summary>Gets whether the seek field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSeek {
      get { return seek_ != null; }
    }
    /// <summary>Clears the value of the seek field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSeek() {
      seek_ = null;
    }

    /// <summary>Field number for the "getLastMessageId" field.</summary>
    public const int GetLastMessageIdFieldNumber = 29;
    private global::Pulsar.Proto.CommandGetLastMessageId getLastMessageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetLastMessageId GetLastMessageId {
      get { return getLastMessageId_; }
      set {
        getLastMessageId_ = value;
      }
    }
    /// <summary>Gets whether the getLastMessageId field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetLastMessageId {
      get { return getLastMessageId_ != null; }
    }
    /// <summary>Clears the value of the getLastMessageId field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetLastMessageId() {
      getLastMessageId_ = null;
    }

    /// <summary>Field number for the "getLastMessageIdResponse" field.</summary>
    public const int GetLastMessageIdResponseFieldNumber = 30;
    private global::Pulsar.Proto.CommandGetLastMessageIdResponse getLastMessageIdResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetLastMessageIdResponse GetLastMessageIdResponse {
      get { return getLastMessageIdResponse_; }
      set {
        getLastMessageIdResponse_ = value;
      }
    }
    /// <summary>Gets whether the getLastMessageIdResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetLastMessageIdResponse {
      get { return getLastMessageIdResponse_ != null; }
    }
    /// <summary>Clears the value of the getLastMessageIdResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetLastMessageIdResponse() {
      getLastMessageIdResponse_ = null;
    }

    /// <summary>Field number for the "active_consumer_change" field.</summary>
    public const int ActiveConsumerChangeFieldNumber = 31;
    private global::Pulsar.Proto.CommandActiveConsumerChange activeConsumerChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandActiveConsumerChange ActiveConsumerChange {
      get { return activeConsumerChange_; }
      set {
        activeConsumerChange_ = value;
      }
    }
    /// <summary>Gets whether the active_consumer_change field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActiveConsumerChange {
      get { return activeConsumerChange_ != null; }
    }
    /// <summary>Clears the value of the active_consumer_change field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActiveConsumerChange() {
      activeConsumerChange_ = null;
    }

    /// <summary>Field number for the "getTopicsOfNamespace" field.</summary>
    public const int GetTopicsOfNamespaceFieldNumber = 32;
    private global::Pulsar.Proto.CommandGetTopicsOfNamespace getTopicsOfNamespace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetTopicsOfNamespace GetTopicsOfNamespace {
      get { return getTopicsOfNamespace_; }
      set {
        getTopicsOfNamespace_ = value;
      }
    }
    /// <summary>Gets whether the getTopicsOfNamespace field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetTopicsOfNamespace {
      get { return getTopicsOfNamespace_ != null; }
    }
    /// <summary>Clears the value of the getTopicsOfNamespace field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetTopicsOfNamespace() {
      getTopicsOfNamespace_ = null;
    }

    /// <summary>Field number for the "getTopicsOfNamespaceResponse" field.</summary>
    public const int GetTopicsOfNamespaceResponseFieldNumber = 33;
    private global::Pulsar.Proto.CommandGetTopicsOfNamespaceResponse getTopicsOfNamespaceResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetTopicsOfNamespaceResponse GetTopicsOfNamespaceResponse {
      get { return getTopicsOfNamespaceResponse_; }
      set {
        getTopicsOfNamespaceResponse_ = value;
      }
    }
    /// <summary>Gets whether the getTopicsOfNamespaceResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetTopicsOfNamespaceResponse {
      get { return getTopicsOfNamespaceResponse_ != null; }
    }
    /// <summary>Clears the value of the getTopicsOfNamespaceResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetTopicsOfNamespaceResponse() {
      getTopicsOfNamespaceResponse_ = null;
    }

    /// <summary>Field number for the "getSchema" field.</summary>
    public const int GetSchemaFieldNumber = 34;
    private global::Pulsar.Proto.CommandGetSchema getSchema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetSchema GetSchema {
      get { return getSchema_; }
      set {
        getSchema_ = value;
      }
    }
    /// <summary>Gets whether the getSchema field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetSchema {
      get { return getSchema_ != null; }
    }
    /// <summary>Clears the value of the getSchema field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetSchema() {
      getSchema_ = null;
    }

    /// <summary>Field number for the "getSchemaResponse" field.</summary>
    public const int GetSchemaResponseFieldNumber = 35;
    private global::Pulsar.Proto.CommandGetSchemaResponse getSchemaResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetSchemaResponse GetSchemaResponse {
      get { return getSchemaResponse_; }
      set {
        getSchemaResponse_ = value;
      }
    }
    /// <summary>Gets whether the getSchemaResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetSchemaResponse {
      get { return getSchemaResponse_ != null; }
    }
    /// <summary>Clears the value of the getSchemaResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetSchemaResponse() {
      getSchemaResponse_ = null;
    }

    /// <summary>Field number for the "authChallenge" field.</summary>
    public const int AuthChallengeFieldNumber = 36;
    private global::Pulsar.Proto.CommandAuthChallenge authChallenge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAuthChallenge AuthChallenge {
      get { return authChallenge_; }
      set {
        authChallenge_ = value;
      }
    }
    /// <summary>Gets whether the authChallenge field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthChallenge {
      get { return authChallenge_ != null; }
    }
    /// <summary>Clears the value of the authChallenge field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthChallenge() {
      authChallenge_ = null;
    }

    /// <summary>Field number for the "authResponse" field.</summary>
    public const int AuthResponseFieldNumber = 37;
    private global::Pulsar.Proto.CommandAuthResponse authResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAuthResponse AuthResponse {
      get { return authResponse_; }
      set {
        authResponse_ = value;
      }
    }
    /// <summary>Gets whether the authResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthResponse {
      get { return authResponse_ != null; }
    }
    /// <summary>Clears the value of the authResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthResponse() {
      authResponse_ = null;
    }

    /// <summary>Field number for the "ackResponse" field.</summary>
    public const int AckResponseFieldNumber = 38;
    private global::Pulsar.Proto.CommandAckResponse ackResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAckResponse AckResponse {
      get { return ackResponse_; }
      set {
        ackResponse_ = value;
      }
    }
    /// <summary>Gets whether the ackResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAckResponse {
      get { return ackResponse_ != null; }
    }
    /// <summary>Clears the value of the ackResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAckResponse() {
      ackResponse_ = null;
    }

    /// <summary>Field number for the "getOrCreateSchema" field.</summary>
    public const int GetOrCreateSchemaFieldNumber = 39;
    private global::Pulsar.Proto.CommandGetOrCreateSchema getOrCreateSchema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetOrCreateSchema GetOrCreateSchema {
      get { return getOrCreateSchema_; }
      set {
        getOrCreateSchema_ = value;
      }
    }
    /// <summary>Gets whether the getOrCreateSchema field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetOrCreateSchema {
      get { return getOrCreateSchema_ != null; }
    }
    /// <summary>Clears the value of the getOrCreateSchema field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetOrCreateSchema() {
      getOrCreateSchema_ = null;
    }

    /// <summary>Field number for the "getOrCreateSchemaResponse" field.</summary>
    public const int GetOrCreateSchemaResponseFieldNumber = 40;
    private global::Pulsar.Proto.CommandGetOrCreateSchemaResponse getOrCreateSchemaResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandGetOrCreateSchemaResponse GetOrCreateSchemaResponse {
      get { return getOrCreateSchemaResponse_; }
      set {
        getOrCreateSchemaResponse_ = value;
      }
    }
    /// <summary>Gets whether the getOrCreateSchemaResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGetOrCreateSchemaResponse {
      get { return getOrCreateSchemaResponse_ != null; }
    }
    /// <summary>Clears the value of the getOrCreateSchemaResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGetOrCreateSchemaResponse() {
      getOrCreateSchemaResponse_ = null;
    }

    /// <summary>Field number for the "newTxn" field.</summary>
    public const int NewTxnFieldNumber = 50;
    private global::Pulsar.Proto.CommandNewTxn newTxn_;
    /// <summary>
    /// transaction related
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandNewTxn NewTxn {
      get { return newTxn_; }
      set {
        newTxn_ = value;
      }
    }
    /// <summary>Gets whether the newTxn field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewTxn {
      get { return newTxn_ != null; }
    }
    /// <summary>Clears the value of the newTxn field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNewTxn() {
      newTxn_ = null;
    }

    /// <summary>Field number for the "newTxnResponse" field.</summary>
    public const int NewTxnResponseFieldNumber = 51;
    private global::Pulsar.Proto.CommandNewTxnResponse newTxnResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandNewTxnResponse NewTxnResponse {
      get { return newTxnResponse_; }
      set {
        newTxnResponse_ = value;
      }
    }
    /// <summary>Gets whether the newTxnResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewTxnResponse {
      get { return newTxnResponse_ != null; }
    }
    /// <summary>Clears the value of the newTxnResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNewTxnResponse() {
      newTxnResponse_ = null;
    }

    /// <summary>Field number for the "addPartitionToTxn" field.</summary>
    public const int AddPartitionToTxnFieldNumber = 52;
    private global::Pulsar.Proto.CommandAddPartitionToTxn addPartitionToTxn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAddPartitionToTxn AddPartitionToTxn {
      get { return addPartitionToTxn_; }
      set {
        addPartitionToTxn_ = value;
      }
    }
    /// <summary>Gets whether the addPartitionToTxn field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddPartitionToTxn {
      get { return addPartitionToTxn_ != null; }
    }
    /// <summary>Clears the value of the addPartitionToTxn field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddPartitionToTxn() {
      addPartitionToTxn_ = null;
    }

    /// <summary>Field number for the "addPartitionToTxnResponse" field.</summary>
    public const int AddPartitionToTxnResponseFieldNumber = 53;
    private global::Pulsar.Proto.CommandAddPartitionToTxnResponse addPartitionToTxnResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAddPartitionToTxnResponse AddPartitionToTxnResponse {
      get { return addPartitionToTxnResponse_; }
      set {
        addPartitionToTxnResponse_ = value;
      }
    }
    /// <summary>Gets whether the addPartitionToTxnResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddPartitionToTxnResponse {
      get { return addPartitionToTxnResponse_ != null; }
    }
    /// <summary>Clears the value of the addPartitionToTxnResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddPartitionToTxnResponse() {
      addPartitionToTxnResponse_ = null;
    }

    /// <summary>Field number for the "addSubscriptionToTxn" field.</summary>
    public const int AddSubscriptionToTxnFieldNumber = 54;
    private global::Pulsar.Proto.CommandAddSubscriptionToTxn addSubscriptionToTxn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAddSubscriptionToTxn AddSubscriptionToTxn {
      get { return addSubscriptionToTxn_; }
      set {
        addSubscriptionToTxn_ = value;
      }
    }
    /// <summary>Gets whether the addSubscriptionToTxn field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddSubscriptionToTxn {
      get { return addSubscriptionToTxn_ != null; }
    }
    /// <summary>Clears the value of the addSubscriptionToTxn field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddSubscriptionToTxn() {
      addSubscriptionToTxn_ = null;
    }

    /// <summary>Field number for the "addSubscriptionToTxnResponse" field.</summary>
    public const int AddSubscriptionToTxnResponseFieldNumber = 55;
    private global::Pulsar.Proto.CommandAddSubscriptionToTxnResponse addSubscriptionToTxnResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandAddSubscriptionToTxnResponse AddSubscriptionToTxnResponse {
      get { return addSubscriptionToTxnResponse_; }
      set {
        addSubscriptionToTxnResponse_ = value;
      }
    }
    /// <summary>Gets whether the addSubscriptionToTxnResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddSubscriptionToTxnResponse {
      get { return addSubscriptionToTxnResponse_ != null; }
    }
    /// <summary>Clears the value of the addSubscriptionToTxnResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddSubscriptionToTxnResponse() {
      addSubscriptionToTxnResponse_ = null;
    }

    /// <summary>Field number for the "endTxn" field.</summary>
    public const int EndTxnFieldNumber = 56;
    private global::Pulsar.Proto.CommandEndTxn endTxn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandEndTxn EndTxn {
      get { return endTxn_; }
      set {
        endTxn_ = value;
      }
    }
    /// <summary>Gets whether the endTxn field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTxn {
      get { return endTxn_ != null; }
    }
    /// <summary>Clears the value of the endTxn field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTxn() {
      endTxn_ = null;
    }

    /// <summary>Field number for the "endTxnResponse" field.</summary>
    public const int EndTxnResponseFieldNumber = 57;
    private global::Pulsar.Proto.CommandEndTxnResponse endTxnResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandEndTxnResponse EndTxnResponse {
      get { return endTxnResponse_; }
      set {
        endTxnResponse_ = value;
      }
    }
    /// <summary>Gets whether the endTxnResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTxnResponse {
      get { return endTxnResponse_ != null; }
    }
    /// <summary>Clears the value of the endTxnResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTxnResponse() {
      endTxnResponse_ = null;
    }

    /// <summary>Field number for the "endTxnOnPartition" field.</summary>
    public const int EndTxnOnPartitionFieldNumber = 58;
    private global::Pulsar.Proto.CommandEndTxnOnPartition endTxnOnPartition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandEndTxnOnPartition EndTxnOnPartition {
      get { return endTxnOnPartition_; }
      set {
        endTxnOnPartition_ = value;
      }
    }
    /// <summary>Gets whether the endTxnOnPartition field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTxnOnPartition {
      get { return endTxnOnPartition_ != null; }
    }
    /// <summary>Clears the value of the endTxnOnPartition field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTxnOnPartition() {
      endTxnOnPartition_ = null;
    }

    /// <summary>Field number for the "endTxnOnPartitionResponse" field.</summary>
    public const int EndTxnOnPartitionResponseFieldNumber = 59;
    private global::Pulsar.Proto.CommandEndTxnOnPartitionResponse endTxnOnPartitionResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandEndTxnOnPartitionResponse EndTxnOnPartitionResponse {
      get { return endTxnOnPartitionResponse_; }
      set {
        endTxnOnPartitionResponse_ = value;
      }
    }
    /// <summary>Gets whether the endTxnOnPartitionResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTxnOnPartitionResponse {
      get { return endTxnOnPartitionResponse_ != null; }
    }
    /// <summary>Clears the value of the endTxnOnPartitionResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTxnOnPartitionResponse() {
      endTxnOnPartitionResponse_ = null;
    }

    /// <summary>Field number for the "endTxnOnSubscription" field.</summary>
    public const int EndTxnOnSubscriptionFieldNumber = 60;
    private global::Pulsar.Proto.CommandEndTxnOnSubscription endTxnOnSubscription_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandEndTxnOnSubscription EndTxnOnSubscription {
      get { return endTxnOnSubscription_; }
      set {
        endTxnOnSubscription_ = value;
      }
    }
    /// <summary>Gets whether the endTxnOnSubscription field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTxnOnSubscription {
      get { return endTxnOnSubscription_ != null; }
    }
    /// <summary>Clears the value of the endTxnOnSubscription field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTxnOnSubscription() {
      endTxnOnSubscription_ = null;
    }

    /// <summary>Field number for the "endTxnOnSubscriptionResponse" field.</summary>
    public const int EndTxnOnSubscriptionResponseFieldNumber = 61;
    private global::Pulsar.Proto.CommandEndTxnOnSubscriptionResponse endTxnOnSubscriptionResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pulsar.Proto.CommandEndTxnOnSubscriptionResponse EndTxnOnSubscriptionResponse {
      get { return endTxnOnSubscriptionResponse_; }
      set {
        endTxnOnSubscriptionResponse_ = value;
      }
    }
    /// <summary>Gets whether the endTxnOnSubscriptionResponse field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndTxnOnSubscriptionResponse {
      get { return endTxnOnSubscriptionResponse_ != null; }
    }
    /// <summary>Clears the value of the endTxnOnSubscriptionResponse field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndTxnOnSubscriptionResponse() {
      endTxnOnSubscriptionResponse_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Connect, other.Connect)) return false;
      if (!object.Equals(Connected, other.Connected)) return false;
      if (!object.Equals(Subscribe, other.Subscribe)) return false;
      if (!object.Equals(Producer, other.Producer)) return false;
      if (!object.Equals(Send, other.Send)) return false;
      if (!object.Equals(SendReceipt, other.SendReceipt)) return false;
      if (!object.Equals(SendError, other.SendError)) return false;
      if (!object.Equals(Message, other.Message)) return false;
      if (!object.Equals(Ack, other.Ack)) return false;
      if (!object.Equals(Flow, other.Flow)) return false;
      if (!object.Equals(Unsubscribe, other.Unsubscribe)) return false;
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(CloseProducer, other.CloseProducer)) return false;
      if (!object.Equals(CloseConsumer, other.CloseConsumer)) return false;
      if (!object.Equals(ProducerSuccess, other.ProducerSuccess)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(Pong, other.Pong)) return false;
      if (!object.Equals(RedeliverUnacknowledgedMessages, other.RedeliverUnacknowledgedMessages)) return false;
      if (!object.Equals(PartitionMetadata, other.PartitionMetadata)) return false;
      if (!object.Equals(PartitionMetadataResponse, other.PartitionMetadataResponse)) return false;
      if (!object.Equals(LookupTopic, other.LookupTopic)) return false;
      if (!object.Equals(LookupTopicResponse, other.LookupTopicResponse)) return false;
      if (!object.Equals(ConsumerStats, other.ConsumerStats)) return false;
      if (!object.Equals(ConsumerStatsResponse, other.ConsumerStatsResponse)) return false;
      if (!object.Equals(ReachedEndOfTopic, other.ReachedEndOfTopic)) return false;
      if (!object.Equals(Seek, other.Seek)) return false;
      if (!object.Equals(GetLastMessageId, other.GetLastMessageId)) return false;
      if (!object.Equals(GetLastMessageIdResponse, other.GetLastMessageIdResponse)) return false;
      if (!object.Equals(ActiveConsumerChange, other.ActiveConsumerChange)) return false;
      if (!object.Equals(GetTopicsOfNamespace, other.GetTopicsOfNamespace)) return false;
      if (!object.Equals(GetTopicsOfNamespaceResponse, other.GetTopicsOfNamespaceResponse)) return false;
      if (!object.Equals(GetSchema, other.GetSchema)) return false;
      if (!object.Equals(GetSchemaResponse, other.GetSchemaResponse)) return false;
      if (!object.Equals(AuthChallenge, other.AuthChallenge)) return false;
      if (!object.Equals(AuthResponse, other.AuthResponse)) return false;
      if (!object.Equals(AckResponse, other.AckResponse)) return false;
      if (!object.Equals(GetOrCreateSchema, other.GetOrCreateSchema)) return false;
      if (!object.Equals(GetOrCreateSchemaResponse, other.GetOrCreateSchemaResponse)) return false;
      if (!object.Equals(NewTxn, other.NewTxn)) return false;
      if (!object.Equals(NewTxnResponse, other.NewTxnResponse)) return false;
      if (!object.Equals(AddPartitionToTxn, other.AddPartitionToTxn)) return false;
      if (!object.Equals(AddPartitionToTxnResponse, other.AddPartitionToTxnResponse)) return false;
      if (!object.Equals(AddSubscriptionToTxn, other.AddSubscriptionToTxn)) return false;
      if (!object.Equals(AddSubscriptionToTxnResponse, other.AddSubscriptionToTxnResponse)) return false;
      if (!object.Equals(EndTxn, other.EndTxn)) return false;
      if (!object.Equals(EndTxnResponse, other.EndTxnResponse)) return false;
      if (!object.Equals(EndTxnOnPartition, other.EndTxnOnPartition)) return false;
      if (!object.Equals(EndTxnOnPartitionResponse, other.EndTxnOnPartitionResponse)) return false;
      if (!object.Equals(EndTxnOnSubscription, other.EndTxnOnSubscription)) return false;
      if (!object.Equals(EndTxnOnSubscriptionResponse, other.EndTxnOnSubscriptionResponse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasConnect) hash ^= Connect.GetHashCode();
      if (HasConnected) hash ^= Connected.GetHashCode();
      if (HasSubscribe) hash ^= Subscribe.GetHashCode();
      if (HasProducer) hash ^= Producer.GetHashCode();
      if (HasSend) hash ^= Send.GetHashCode();
      if (HasSendReceipt) hash ^= SendReceipt.GetHashCode();
      if (HasSendError) hash ^= SendError.GetHashCode();
      if (HasMessage) hash ^= Message.GetHashCode();
      if (HasAck) hash ^= Ack.GetHashCode();
      if (HasFlow) hash ^= Flow.GetHashCode();
      if (HasUnsubscribe) hash ^= Unsubscribe.GetHashCode();
      if (HasSuccess) hash ^= Success.GetHashCode();
      if (HasError) hash ^= Error.GetHashCode();
      if (HasCloseProducer) hash ^= CloseProducer.GetHashCode();
      if (HasCloseConsumer) hash ^= CloseConsumer.GetHashCode();
      if (HasProducerSuccess) hash ^= ProducerSuccess.GetHashCode();
      if (HasPing) hash ^= Ping.GetHashCode();
      if (HasPong) hash ^= Pong.GetHashCode();
      if (HasRedeliverUnacknowledgedMessages) hash ^= RedeliverUnacknowledgedMessages.GetHashCode();
      if (HasPartitionMetadata) hash ^= PartitionMetadata.GetHashCode();
      if (HasPartitionMetadataResponse) hash ^= PartitionMetadataResponse.GetHashCode();
      if (HasLookupTopic) hash ^= LookupTopic.GetHashCode();
      if (HasLookupTopicResponse) hash ^= LookupTopicResponse.GetHashCode();
      if (HasConsumerStats) hash ^= ConsumerStats.GetHashCode();
      if (HasConsumerStatsResponse) hash ^= ConsumerStatsResponse.GetHashCode();
      if (HasReachedEndOfTopic) hash ^= ReachedEndOfTopic.GetHashCode();
      if (HasSeek) hash ^= Seek.GetHashCode();
      if (HasGetLastMessageId) hash ^= GetLastMessageId.GetHashCode();
      if (HasGetLastMessageIdResponse) hash ^= GetLastMessageIdResponse.GetHashCode();
      if (HasActiveConsumerChange) hash ^= ActiveConsumerChange.GetHashCode();
      if (HasGetTopicsOfNamespace) hash ^= GetTopicsOfNamespace.GetHashCode();
      if (HasGetTopicsOfNamespaceResponse) hash ^= GetTopicsOfNamespaceResponse.GetHashCode();
      if (HasGetSchema) hash ^= GetSchema.GetHashCode();
      if (HasGetSchemaResponse) hash ^= GetSchemaResponse.GetHashCode();
      if (HasAuthChallenge) hash ^= AuthChallenge.GetHashCode();
      if (HasAuthResponse) hash ^= AuthResponse.GetHashCode();
      if (HasAckResponse) hash ^= AckResponse.GetHashCode();
      if (HasGetOrCreateSchema) hash ^= GetOrCreateSchema.GetHashCode();
      if (HasGetOrCreateSchemaResponse) hash ^= GetOrCreateSchemaResponse.GetHashCode();
      if (HasNewTxn) hash ^= NewTxn.GetHashCode();
      if (HasNewTxnResponse) hash ^= NewTxnResponse.GetHashCode();
      if (HasAddPartitionToTxn) hash ^= AddPartitionToTxn.GetHashCode();
      if (HasAddPartitionToTxnResponse) hash ^= AddPartitionToTxnResponse.GetHashCode();
      if (HasAddSubscriptionToTxn) hash ^= AddSubscriptionToTxn.GetHashCode();
      if (HasAddSubscriptionToTxnResponse) hash ^= AddSubscriptionToTxnResponse.GetHashCode();
      if (HasEndTxn) hash ^= EndTxn.GetHashCode();
      if (HasEndTxnResponse) hash ^= EndTxnResponse.GetHashCode();
      if (HasEndTxnOnPartition) hash ^= EndTxnOnPartition.GetHashCode();
      if (HasEndTxnOnPartitionResponse) hash ^= EndTxnOnPartitionResponse.GetHashCode();
      if (HasEndTxnOnSubscription) hash ^= EndTxnOnSubscription.GetHashCode();
      if (HasEndTxnOnSubscriptionResponse) hash ^= EndTxnOnSubscriptionResponse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasConnect) {
        output.WriteRawTag(18);
        output.WriteMessage(Connect);
      }
      if (HasConnected) {
        output.WriteRawTag(26);
        output.WriteMessage(Connected);
      }
      if (HasSubscribe) {
        output.WriteRawTag(34);
        output.WriteMessage(Subscribe);
      }
      if (HasProducer) {
        output.WriteRawTag(42);
        output.WriteMessage(Producer);
      }
      if (HasSend) {
        output.WriteRawTag(50);
        output.WriteMessage(Send);
      }
      if (HasSendReceipt) {
        output.WriteRawTag(58);
        output.WriteMessage(SendReceipt);
      }
      if (HasSendError) {
        output.WriteRawTag(66);
        output.WriteMessage(SendError);
      }
      if (HasMessage) {
        output.WriteRawTag(74);
        output.WriteMessage(Message);
      }
      if (HasAck) {
        output.WriteRawTag(82);
        output.WriteMessage(Ack);
      }
      if (HasFlow) {
        output.WriteRawTag(90);
        output.WriteMessage(Flow);
      }
      if (HasUnsubscribe) {
        output.WriteRawTag(98);
        output.WriteMessage(Unsubscribe);
      }
      if (HasSuccess) {
        output.WriteRawTag(106);
        output.WriteMessage(Success);
      }
      if (HasError) {
        output.WriteRawTag(114);
        output.WriteMessage(Error);
      }
      if (HasCloseProducer) {
        output.WriteRawTag(122);
        output.WriteMessage(CloseProducer);
      }
      if (HasCloseConsumer) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(CloseConsumer);
      }
      if (HasProducerSuccess) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ProducerSuccess);
      }
      if (HasPing) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Ping);
      }
      if (HasPong) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Pong);
      }
      if (HasRedeliverUnacknowledgedMessages) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(RedeliverUnacknowledgedMessages);
      }
      if (HasPartitionMetadata) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(PartitionMetadata);
      }
      if (HasPartitionMetadataResponse) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PartitionMetadataResponse);
      }
      if (HasLookupTopic) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(LookupTopic);
      }
      if (HasLookupTopicResponse) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(LookupTopicResponse);
      }
      if (HasConsumerStats) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ConsumerStats);
      }
      if (HasConsumerStatsResponse) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ConsumerStatsResponse);
      }
      if (HasReachedEndOfTopic) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(ReachedEndOfTopic);
      }
      if (HasSeek) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Seek);
      }
      if (HasGetLastMessageId) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(GetLastMessageId);
      }
      if (HasGetLastMessageIdResponse) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(GetLastMessageIdResponse);
      }
      if (HasActiveConsumerChange) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(ActiveConsumerChange);
      }
      if (HasGetTopicsOfNamespace) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(GetTopicsOfNamespace);
      }
      if (HasGetTopicsOfNamespaceResponse) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(GetTopicsOfNamespaceResponse);
      }
      if (HasGetSchema) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(GetSchema);
      }
      if (HasGetSchemaResponse) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(GetSchemaResponse);
      }
      if (HasAuthChallenge) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(AuthChallenge);
      }
      if (HasAuthResponse) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(AuthResponse);
      }
      if (HasAckResponse) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(AckResponse);
      }
      if (HasGetOrCreateSchema) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(GetOrCreateSchema);
      }
      if (HasGetOrCreateSchemaResponse) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(GetOrCreateSchemaResponse);
      }
      if (HasNewTxn) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(NewTxn);
      }
      if (HasNewTxnResponse) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(NewTxnResponse);
      }
      if (HasAddPartitionToTxn) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(AddPartitionToTxn);
      }
      if (HasAddPartitionToTxnResponse) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(AddPartitionToTxnResponse);
      }
      if (HasAddSubscriptionToTxn) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(AddSubscriptionToTxn);
      }
      if (HasAddSubscriptionToTxnResponse) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(AddSubscriptionToTxnResponse);
      }
      if (HasEndTxn) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(EndTxn);
      }
      if (HasEndTxnResponse) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(EndTxnResponse);
      }
      if (HasEndTxnOnPartition) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(EndTxnOnPartition);
      }
      if (HasEndTxnOnPartitionResponse) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(EndTxnOnPartitionResponse);
      }
      if (HasEndTxnOnSubscription) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(EndTxnOnSubscription);
      }
      if (HasEndTxnOnSubscriptionResponse) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(EndTxnOnSubscriptionResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasConnect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connect);
      }
      if (HasConnected) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connected);
      }
      if (HasSubscribe) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Subscribe);
      }
      if (HasProducer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Producer);
      }
      if (HasSend) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Send);
      }
      if (HasSendReceipt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendReceipt);
      }
      if (HasSendError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendError);
      }
      if (HasMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
      }
      if (HasAck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ack);
      }
      if (HasFlow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flow);
      }
      if (HasUnsubscribe) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unsubscribe);
      }
      if (HasSuccess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (HasError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (HasCloseProducer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloseProducer);
      }
      if (HasCloseConsumer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CloseConsumer);
      }
      if (HasProducerSuccess) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProducerSuccess);
      }
      if (HasPing) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (HasPong) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pong);
      }
      if (HasRedeliverUnacknowledgedMessages) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RedeliverUnacknowledgedMessages);
      }
      if (HasPartitionMetadata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PartitionMetadata);
      }
      if (HasPartitionMetadataResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PartitionMetadataResponse);
      }
      if (HasLookupTopic) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LookupTopic);
      }
      if (HasLookupTopicResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LookupTopicResponse);
      }
      if (HasConsumerStats) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConsumerStats);
      }
      if (HasConsumerStatsResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConsumerStatsResponse);
      }
      if (HasReachedEndOfTopic) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReachedEndOfTopic);
      }
      if (HasSeek) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Seek);
      }
      if (HasGetLastMessageId) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetLastMessageId);
      }
      if (HasGetLastMessageIdResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetLastMessageIdResponse);
      }
      if (HasActiveConsumerChange) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActiveConsumerChange);
      }
      if (HasGetTopicsOfNamespace) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetTopicsOfNamespace);
      }
      if (HasGetTopicsOfNamespaceResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetTopicsOfNamespaceResponse);
      }
      if (HasGetSchema) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetSchema);
      }
      if (HasGetSchemaResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetSchemaResponse);
      }
      if (HasAuthChallenge) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AuthChallenge);
      }
      if (HasAuthResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AuthResponse);
      }
      if (HasAckResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AckResponse);
      }
      if (HasGetOrCreateSchema) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetOrCreateSchema);
      }
      if (HasGetOrCreateSchemaResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GetOrCreateSchemaResponse);
      }
      if (HasNewTxn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NewTxn);
      }
      if (HasNewTxnResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NewTxnResponse);
      }
      if (HasAddPartitionToTxn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddPartitionToTxn);
      }
      if (HasAddPartitionToTxnResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddPartitionToTxnResponse);
      }
      if (HasAddSubscriptionToTxn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddSubscriptionToTxn);
      }
      if (HasAddSubscriptionToTxnResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddSubscriptionToTxnResponse);
      }
      if (HasEndTxn) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EndTxn);
      }
      if (HasEndTxnResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EndTxnResponse);
      }
      if (HasEndTxnOnPartition) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EndTxnOnPartition);
      }
      if (HasEndTxnOnPartitionResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EndTxnOnPartitionResponse);
      }
      if (HasEndTxnOnSubscription) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EndTxnOnSubscription);
      }
      if (HasEndTxnOnSubscriptionResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EndTxnOnSubscriptionResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseCommand other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasConnect) {
        if (!HasConnect) {
          Connect = new global::Pulsar.Proto.CommandConnect();
        }
        Connect.MergeFrom(other.Connect);
      }
      if (other.HasConnected) {
        if (!HasConnected) {
          Connected = new global::Pulsar.Proto.CommandConnected();
        }
        Connected.MergeFrom(other.Connected);
      }
      if (other.HasSubscribe) {
        if (!HasSubscribe) {
          Subscribe = new global::Pulsar.Proto.CommandSubscribe();
        }
        Subscribe.MergeFrom(other.Subscribe);
      }
      if (other.HasProducer) {
        if (!HasProducer) {
          Producer = new global::Pulsar.Proto.CommandProducer();
        }
        Producer.MergeFrom(other.Producer);
      }
      if (other.HasSend) {
        if (!HasSend) {
          Send = new global::Pulsar.Proto.CommandSend();
        }
        Send.MergeFrom(other.Send);
      }
      if (other.HasSendReceipt) {
        if (!HasSendReceipt) {
          SendReceipt = new global::Pulsar.Proto.CommandSendReceipt();
        }
        SendReceipt.MergeFrom(other.SendReceipt);
      }
      if (other.HasSendError) {
        if (!HasSendError) {
          SendError = new global::Pulsar.Proto.CommandSendError();
        }
        SendError.MergeFrom(other.SendError);
      }
      if (other.HasMessage) {
        if (!HasMessage) {
          Message = new global::Pulsar.Proto.CommandMessage();
        }
        Message.MergeFrom(other.Message);
      }
      if (other.HasAck) {
        if (!HasAck) {
          Ack = new global::Pulsar.Proto.CommandAck();
        }
        Ack.MergeFrom(other.Ack);
      }
      if (other.HasFlow) {
        if (!HasFlow) {
          Flow = new global::Pulsar.Proto.CommandFlow();
        }
        Flow.MergeFrom(other.Flow);
      }
      if (other.HasUnsubscribe) {
        if (!HasUnsubscribe) {
          Unsubscribe = new global::Pulsar.Proto.CommandUnsubscribe();
        }
        Unsubscribe.MergeFrom(other.Unsubscribe);
      }
      if (other.HasSuccess) {
        if (!HasSuccess) {
          Success = new global::Pulsar.Proto.CommandSuccess();
        }
        Success.MergeFrom(other.Success);
      }
      if (other.HasError) {
        if (!HasError) {
          Error = new global::Pulsar.Proto.CommandError();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.HasCloseProducer) {
        if (!HasCloseProducer) {
          CloseProducer = new global::Pulsar.Proto.CommandCloseProducer();
        }
        CloseProducer.MergeFrom(other.CloseProducer);
      }
      if (other.HasCloseConsumer) {
        if (!HasCloseConsumer) {
          CloseConsumer = new global::Pulsar.Proto.CommandCloseConsumer();
        }
        CloseConsumer.MergeFrom(other.CloseConsumer);
      }
      if (other.HasProducerSuccess) {
        if (!HasProducerSuccess) {
          ProducerSuccess = new global::Pulsar.Proto.CommandProducerSuccess();
        }
        ProducerSuccess.MergeFrom(other.ProducerSuccess);
      }
      if (other.HasPing) {
        if (!HasPing) {
          Ping = new global::Pulsar.Proto.CommandPing();
        }
        Ping.MergeFrom(other.Ping);
      }
      if (other.HasPong) {
        if (!HasPong) {
          Pong = new global::Pulsar.Proto.CommandPong();
        }
        Pong.MergeFrom(other.Pong);
      }
      if (other.HasRedeliverUnacknowledgedMessages) {
        if (!HasRedeliverUnacknowledgedMessages) {
          RedeliverUnacknowledgedMessages = new global::Pulsar.Proto.CommandRedeliverUnacknowledgedMessages();
        }
        RedeliverUnacknowledgedMessages.MergeFrom(other.RedeliverUnacknowledgedMessages);
      }
      if (other.HasPartitionMetadata) {
        if (!HasPartitionMetadata) {
          PartitionMetadata = new global::Pulsar.Proto.CommandPartitionedTopicMetadata();
        }
        PartitionMetadata.MergeFrom(other.PartitionMetadata);
      }
      if (other.HasPartitionMetadataResponse) {
        if (!HasPartitionMetadataResponse) {
          PartitionMetadataResponse = new global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse();
        }
        PartitionMetadataResponse.MergeFrom(other.PartitionMetadataResponse);
      }
      if (other.HasLookupTopic) {
        if (!HasLookupTopic) {
          LookupTopic = new global::Pulsar.Proto.CommandLookupTopic();
        }
        LookupTopic.MergeFrom(other.LookupTopic);
      }
      if (other.HasLookupTopicResponse) {
        if (!HasLookupTopicResponse) {
          LookupTopicResponse = new global::Pulsar.Proto.CommandLookupTopicResponse();
        }
        LookupTopicResponse.MergeFrom(other.LookupTopicResponse);
      }
      if (other.HasConsumerStats) {
        if (!HasConsumerStats) {
          ConsumerStats = new global::Pulsar.Proto.CommandConsumerStats();
        }
        ConsumerStats.MergeFrom(other.ConsumerStats);
      }
      if (other.HasConsumerStatsResponse) {
        if (!HasConsumerStatsResponse) {
          ConsumerStatsResponse = new global::Pulsar.Proto.CommandConsumerStatsResponse();
        }
        ConsumerStatsResponse.MergeFrom(other.ConsumerStatsResponse);
      }
      if (other.HasReachedEndOfTopic) {
        if (!HasReachedEndOfTopic) {
          ReachedEndOfTopic = new global::Pulsar.Proto.CommandReachedEndOfTopic();
        }
        ReachedEndOfTopic.MergeFrom(other.ReachedEndOfTopic);
      }
      if (other.HasSeek) {
        if (!HasSeek) {
          Seek = new global::Pulsar.Proto.CommandSeek();
        }
        Seek.MergeFrom(other.Seek);
      }
      if (other.HasGetLastMessageId) {
        if (!HasGetLastMessageId) {
          GetLastMessageId = new global::Pulsar.Proto.CommandGetLastMessageId();
        }
        GetLastMessageId.MergeFrom(other.GetLastMessageId);
      }
      if (other.HasGetLastMessageIdResponse) {
        if (!HasGetLastMessageIdResponse) {
          GetLastMessageIdResponse = new global::Pulsar.Proto.CommandGetLastMessageIdResponse();
        }
        GetLastMessageIdResponse.MergeFrom(other.GetLastMessageIdResponse);
      }
      if (other.HasActiveConsumerChange) {
        if (!HasActiveConsumerChange) {
          ActiveConsumerChange = new global::Pulsar.Proto.CommandActiveConsumerChange();
        }
        ActiveConsumerChange.MergeFrom(other.ActiveConsumerChange);
      }
      if (other.HasGetTopicsOfNamespace) {
        if (!HasGetTopicsOfNamespace) {
          GetTopicsOfNamespace = new global::Pulsar.Proto.CommandGetTopicsOfNamespace();
        }
        GetTopicsOfNamespace.MergeFrom(other.GetTopicsOfNamespace);
      }
      if (other.HasGetTopicsOfNamespaceResponse) {
        if (!HasGetTopicsOfNamespaceResponse) {
          GetTopicsOfNamespaceResponse = new global::Pulsar.Proto.CommandGetTopicsOfNamespaceResponse();
        }
        GetTopicsOfNamespaceResponse.MergeFrom(other.GetTopicsOfNamespaceResponse);
      }
      if (other.HasGetSchema) {
        if (!HasGetSchema) {
          GetSchema = new global::Pulsar.Proto.CommandGetSchema();
        }
        GetSchema.MergeFrom(other.GetSchema);
      }
      if (other.HasGetSchemaResponse) {
        if (!HasGetSchemaResponse) {
          GetSchemaResponse = new global::Pulsar.Proto.CommandGetSchemaResponse();
        }
        GetSchemaResponse.MergeFrom(other.GetSchemaResponse);
      }
      if (other.HasAuthChallenge) {
        if (!HasAuthChallenge) {
          AuthChallenge = new global::Pulsar.Proto.CommandAuthChallenge();
        }
        AuthChallenge.MergeFrom(other.AuthChallenge);
      }
      if (other.HasAuthResponse) {
        if (!HasAuthResponse) {
          AuthResponse = new global::Pulsar.Proto.CommandAuthResponse();
        }
        AuthResponse.MergeFrom(other.AuthResponse);
      }
      if (other.HasAckResponse) {
        if (!HasAckResponse) {
          AckResponse = new global::Pulsar.Proto.CommandAckResponse();
        }
        AckResponse.MergeFrom(other.AckResponse);
      }
      if (other.HasGetOrCreateSchema) {
        if (!HasGetOrCreateSchema) {
          GetOrCreateSchema = new global::Pulsar.Proto.CommandGetOrCreateSchema();
        }
        GetOrCreateSchema.MergeFrom(other.GetOrCreateSchema);
      }
      if (other.HasGetOrCreateSchemaResponse) {
        if (!HasGetOrCreateSchemaResponse) {
          GetOrCreateSchemaResponse = new global::Pulsar.Proto.CommandGetOrCreateSchemaResponse();
        }
        GetOrCreateSchemaResponse.MergeFrom(other.GetOrCreateSchemaResponse);
      }
      if (other.HasNewTxn) {
        if (!HasNewTxn) {
          NewTxn = new global::Pulsar.Proto.CommandNewTxn();
        }
        NewTxn.MergeFrom(other.NewTxn);
      }
      if (other.HasNewTxnResponse) {
        if (!HasNewTxnResponse) {
          NewTxnResponse = new global::Pulsar.Proto.CommandNewTxnResponse();
        }
        NewTxnResponse.MergeFrom(other.NewTxnResponse);
      }
      if (other.HasAddPartitionToTxn) {
        if (!HasAddPartitionToTxn) {
          AddPartitionToTxn = new global::Pulsar.Proto.CommandAddPartitionToTxn();
        }
        AddPartitionToTxn.MergeFrom(other.AddPartitionToTxn);
      }
      if (other.HasAddPartitionToTxnResponse) {
        if (!HasAddPartitionToTxnResponse) {
          AddPartitionToTxnResponse = new global::Pulsar.Proto.CommandAddPartitionToTxnResponse();
        }
        AddPartitionToTxnResponse.MergeFrom(other.AddPartitionToTxnResponse);
      }
      if (other.HasAddSubscriptionToTxn) {
        if (!HasAddSubscriptionToTxn) {
          AddSubscriptionToTxn = new global::Pulsar.Proto.CommandAddSubscriptionToTxn();
        }
        AddSubscriptionToTxn.MergeFrom(other.AddSubscriptionToTxn);
      }
      if (other.HasAddSubscriptionToTxnResponse) {
        if (!HasAddSubscriptionToTxnResponse) {
          AddSubscriptionToTxnResponse = new global::Pulsar.Proto.CommandAddSubscriptionToTxnResponse();
        }
        AddSubscriptionToTxnResponse.MergeFrom(other.AddSubscriptionToTxnResponse);
      }
      if (other.HasEndTxn) {
        if (!HasEndTxn) {
          EndTxn = new global::Pulsar.Proto.CommandEndTxn();
        }
        EndTxn.MergeFrom(other.EndTxn);
      }
      if (other.HasEndTxnResponse) {
        if (!HasEndTxnResponse) {
          EndTxnResponse = new global::Pulsar.Proto.CommandEndTxnResponse();
        }
        EndTxnResponse.MergeFrom(other.EndTxnResponse);
      }
      if (other.HasEndTxnOnPartition) {
        if (!HasEndTxnOnPartition) {
          EndTxnOnPartition = new global::Pulsar.Proto.CommandEndTxnOnPartition();
        }
        EndTxnOnPartition.MergeFrom(other.EndTxnOnPartition);
      }
      if (other.HasEndTxnOnPartitionResponse) {
        if (!HasEndTxnOnPartitionResponse) {
          EndTxnOnPartitionResponse = new global::Pulsar.Proto.CommandEndTxnOnPartitionResponse();
        }
        EndTxnOnPartitionResponse.MergeFrom(other.EndTxnOnPartitionResponse);
      }
      if (other.HasEndTxnOnSubscription) {
        if (!HasEndTxnOnSubscription) {
          EndTxnOnSubscription = new global::Pulsar.Proto.CommandEndTxnOnSubscription();
        }
        EndTxnOnSubscription.MergeFrom(other.EndTxnOnSubscription);
      }
      if (other.HasEndTxnOnSubscriptionResponse) {
        if (!HasEndTxnOnSubscriptionResponse) {
          EndTxnOnSubscriptionResponse = new global::Pulsar.Proto.CommandEndTxnOnSubscriptionResponse();
        }
        EndTxnOnSubscriptionResponse.MergeFrom(other.EndTxnOnSubscriptionResponse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Pulsar.Proto.BaseCommand.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (!HasConnect) {
              Connect = new global::Pulsar.Proto.CommandConnect();
            }
            input.ReadMessage(Connect);
            break;
          }
          case 26: {
            if (!HasConnected) {
              Connected = new global::Pulsar.Proto.CommandConnected();
            }
            input.ReadMessage(Connected);
            break;
          }
          case 34: {
            if (!HasSubscribe) {
              Subscribe = new global::Pulsar.Proto.CommandSubscribe();
            }
            input.ReadMessage(Subscribe);
            break;
          }
          case 42: {
            if (!HasProducer) {
              Producer = new global::Pulsar.Proto.CommandProducer();
            }
            input.ReadMessage(Producer);
            break;
          }
          case 50: {
            if (!HasSend) {
              Send = new global::Pulsar.Proto.CommandSend();
            }
            input.ReadMessage(Send);
            break;
          }
          case 58: {
            if (!HasSendReceipt) {
              SendReceipt = new global::Pulsar.Proto.CommandSendReceipt();
            }
            input.ReadMessage(SendReceipt);
            break;
          }
          case 66: {
            if (!HasSendError) {
              SendError = new global::Pulsar.Proto.CommandSendError();
            }
            input.ReadMessage(SendError);
            break;
          }
          case 74: {
            if (!HasMessage) {
              Message = new global::Pulsar.Proto.CommandMessage();
            }
            input.ReadMessage(Message);
            break;
          }
          case 82: {
            if (!HasAck) {
              Ack = new global::Pulsar.Proto.CommandAck();
            }
            input.ReadMessage(Ack);
            break;
          }
          case 90: {
            if (!HasFlow) {
              Flow = new global::Pulsar.Proto.CommandFlow();
            }
            input.ReadMessage(Flow);
            break;
          }
          case 98: {
            if (!HasUnsubscribe) {
              Unsubscribe = new global::Pulsar.Proto.CommandUnsubscribe();
            }
            input.ReadMessage(Unsubscribe);
            break;
          }
          case 106: {
            if (!HasSuccess) {
              Success = new global::Pulsar.Proto.CommandSuccess();
            }
            input.ReadMessage(Success);
            break;
          }
          case 114: {
            if (!HasError) {
              Error = new global::Pulsar.Proto.CommandError();
            }
            input.ReadMessage(Error);
            break;
          }
          case 122: {
            if (!HasCloseProducer) {
              CloseProducer = new global::Pulsar.Proto.CommandCloseProducer();
            }
            input.ReadMessage(CloseProducer);
            break;
          }
          case 130: {
            if (!HasCloseConsumer) {
              CloseConsumer = new global::Pulsar.Proto.CommandCloseConsumer();
            }
            input.ReadMessage(CloseConsumer);
            break;
          }
          case 138: {
            if (!HasProducerSuccess) {
              ProducerSuccess = new global::Pulsar.Proto.CommandProducerSuccess();
            }
            input.ReadMessage(ProducerSuccess);
            break;
          }
          case 146: {
            if (!HasPing) {
              Ping = new global::Pulsar.Proto.CommandPing();
            }
            input.ReadMessage(Ping);
            break;
          }
          case 154: {
            if (!HasPong) {
              Pong = new global::Pulsar.Proto.CommandPong();
            }
            input.ReadMessage(Pong);
            break;
          }
          case 162: {
            if (!HasRedeliverUnacknowledgedMessages) {
              RedeliverUnacknowledgedMessages = new global::Pulsar.Proto.CommandRedeliverUnacknowledgedMessages();
            }
            input.ReadMessage(RedeliverUnacknowledgedMessages);
            break;
          }
          case 170: {
            if (!HasPartitionMetadata) {
              PartitionMetadata = new global::Pulsar.Proto.CommandPartitionedTopicMetadata();
            }
            input.ReadMessage(PartitionMetadata);
            break;
          }
          case 178: {
            if (!HasPartitionMetadataResponse) {
              PartitionMetadataResponse = new global::Pulsar.Proto.CommandPartitionedTopicMetadataResponse();
            }
            input.ReadMessage(PartitionMetadataResponse);
            break;
          }
          case 186: {
            if (!HasLookupTopic) {
              LookupTopic = new global::Pulsar.Proto.CommandLookupTopic();
            }
            input.ReadMessage(LookupTopic);
            break;
          }
          case 194: {
            if (!HasLookupTopicResponse) {
              LookupTopicResponse = new global::Pulsar.Proto.CommandLookupTopicResponse();
            }
            input.ReadMessage(LookupTopicResponse);
            break;
          }
          case 202: {
            if (!HasConsumerStats) {
              ConsumerStats = new global::Pulsar.Proto.CommandConsumerStats();
            }
            input.ReadMessage(ConsumerStats);
            break;
          }
          case 210: {
            if (!HasConsumerStatsResponse) {
              ConsumerStatsResponse = new global::Pulsar.Proto.CommandConsumerStatsResponse();
            }
            input.ReadMessage(ConsumerStatsResponse);
            break;
          }
          case 218: {
            if (!HasReachedEndOfTopic) {
              ReachedEndOfTopic = new global::Pulsar.Proto.CommandReachedEndOfTopic();
            }
            input.ReadMessage(ReachedEndOfTopic);
            break;
          }
          case 226: {
            if (!HasSeek) {
              Seek = new global::Pulsar.Proto.CommandSeek();
            }
            input.ReadMessage(Seek);
            break;
          }
          case 234: {
            if (!HasGetLastMessageId) {
              GetLastMessageId = new global::Pulsar.Proto.CommandGetLastMessageId();
            }
            input.ReadMessage(GetLastMessageId);
            break;
          }
          case 242: {
            if (!HasGetLastMessageIdResponse) {
              GetLastMessageIdResponse = new global::Pulsar.Proto.CommandGetLastMessageIdResponse();
            }
            input.ReadMessage(GetLastMessageIdResponse);
            break;
          }
          case 250: {
            if (!HasActiveConsumerChange) {
              ActiveConsumerChange = new global::Pulsar.Proto.CommandActiveConsumerChange();
            }
            input.ReadMessage(ActiveConsumerChange);
            break;
          }
          case 258: {
            if (!HasGetTopicsOfNamespace) {
              GetTopicsOfNamespace = new global::Pulsar.Proto.CommandGetTopicsOfNamespace();
            }
            input.ReadMessage(GetTopicsOfNamespace);
            break;
          }
          case 266: {
            if (!HasGetTopicsOfNamespaceResponse) {
              GetTopicsOfNamespaceResponse = new global::Pulsar.Proto.CommandGetTopicsOfNamespaceResponse();
            }
            input.ReadMessage(GetTopicsOfNamespaceResponse);
            break;
          }
          case 274: {
            if (!HasGetSchema) {
              GetSchema = new global::Pulsar.Proto.CommandGetSchema();
            }
            input.ReadMessage(GetSchema);
            break;
          }
          case 282: {
            if (!HasGetSchemaResponse) {
              GetSchemaResponse = new global::Pulsar.Proto.CommandGetSchemaResponse();
            }
            input.ReadMessage(GetSchemaResponse);
            break;
          }
          case 290: {
            if (!HasAuthChallenge) {
              AuthChallenge = new global::Pulsar.Proto.CommandAuthChallenge();
            }
            input.ReadMessage(AuthChallenge);
            break;
          }
          case 298: {
            if (!HasAuthResponse) {
              AuthResponse = new global::Pulsar.Proto.CommandAuthResponse();
            }
            input.ReadMessage(AuthResponse);
            break;
          }
          case 306: {
            if (!HasAckResponse) {
              AckResponse = new global::Pulsar.Proto.CommandAckResponse();
            }
            input.ReadMessage(AckResponse);
            break;
          }
          case 314: {
            if (!HasGetOrCreateSchema) {
              GetOrCreateSchema = new global::Pulsar.Proto.CommandGetOrCreateSchema();
            }
            input.ReadMessage(GetOrCreateSchema);
            break;
          }
          case 322: {
            if (!HasGetOrCreateSchemaResponse) {
              GetOrCreateSchemaResponse = new global::Pulsar.Proto.CommandGetOrCreateSchemaResponse();
            }
            input.ReadMessage(GetOrCreateSchemaResponse);
            break;
          }
          case 402: {
            if (!HasNewTxn) {
              NewTxn = new global::Pulsar.Proto.CommandNewTxn();
            }
            input.ReadMessage(NewTxn);
            break;
          }
          case 410: {
            if (!HasNewTxnResponse) {
              NewTxnResponse = new global::Pulsar.Proto.CommandNewTxnResponse();
            }
            input.ReadMessage(NewTxnResponse);
            break;
          }
          case 418: {
            if (!HasAddPartitionToTxn) {
              AddPartitionToTxn = new global::Pulsar.Proto.CommandAddPartitionToTxn();
            }
            input.ReadMessage(AddPartitionToTxn);
            break;
          }
          case 426: {
            if (!HasAddPartitionToTxnResponse) {
              AddPartitionToTxnResponse = new global::Pulsar.Proto.CommandAddPartitionToTxnResponse();
            }
            input.ReadMessage(AddPartitionToTxnResponse);
            break;
          }
          case 434: {
            if (!HasAddSubscriptionToTxn) {
              AddSubscriptionToTxn = new global::Pulsar.Proto.CommandAddSubscriptionToTxn();
            }
            input.ReadMessage(AddSubscriptionToTxn);
            break;
          }
          case 442: {
            if (!HasAddSubscriptionToTxnResponse) {
              AddSubscriptionToTxnResponse = new global::Pulsar.Proto.CommandAddSubscriptionToTxnResponse();
            }
            input.ReadMessage(AddSubscriptionToTxnResponse);
            break;
          }
          case 450: {
            if (!HasEndTxn) {
              EndTxn = new global::Pulsar.Proto.CommandEndTxn();
            }
            input.ReadMessage(EndTxn);
            break;
          }
          case 458: {
            if (!HasEndTxnResponse) {
              EndTxnResponse = new global::Pulsar.Proto.CommandEndTxnResponse();
            }
            input.ReadMessage(EndTxnResponse);
            break;
          }
          case 466: {
            if (!HasEndTxnOnPartition) {
              EndTxnOnPartition = new global::Pulsar.Proto.CommandEndTxnOnPartition();
            }
            input.ReadMessage(EndTxnOnPartition);
            break;
          }
          case 474: {
            if (!HasEndTxnOnPartitionResponse) {
              EndTxnOnPartitionResponse = new global::Pulsar.Proto.CommandEndTxnOnPartitionResponse();
            }
            input.ReadMessage(EndTxnOnPartitionResponse);
            break;
          }
          case 482: {
            if (!HasEndTxnOnSubscription) {
              EndTxnOnSubscription = new global::Pulsar.Proto.CommandEndTxnOnSubscription();
            }
            input.ReadMessage(EndTxnOnSubscription);
            break;
          }
          case 490: {
            if (!HasEndTxnOnSubscriptionResponse) {
              EndTxnOnSubscriptionResponse = new global::Pulsar.Proto.CommandEndTxnOnSubscriptionResponse();
            }
            input.ReadMessage(EndTxnOnSubscriptionResponse);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BaseCommand message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("CONNECT")] Connect = 2,
        [pbr::OriginalName("CONNECTED")] Connected = 3,
        [pbr::OriginalName("SUBSCRIBE")] Subscribe = 4,
        [pbr::OriginalName("PRODUCER")] Producer = 5,
        [pbr::OriginalName("SEND")] Send = 6,
        [pbr::OriginalName("SEND_RECEIPT")] SendReceipt = 7,
        [pbr::OriginalName("SEND_ERROR")] SendError = 8,
        [pbr::OriginalName("MESSAGE")] Message = 9,
        [pbr::OriginalName("ACK")] Ack = 10,
        [pbr::OriginalName("FLOW")] Flow = 11,
        [pbr::OriginalName("UNSUBSCRIBE")] Unsubscribe = 12,
        [pbr::OriginalName("SUCCESS")] Success = 13,
        [pbr::OriginalName("ERROR")] Error = 14,
        [pbr::OriginalName("CLOSE_PRODUCER")] CloseProducer = 15,
        [pbr::OriginalName("CLOSE_CONSUMER")] CloseConsumer = 16,
        [pbr::OriginalName("PRODUCER_SUCCESS")] ProducerSuccess = 17,
        [pbr::OriginalName("PING")] Ping = 18,
        [pbr::OriginalName("PONG")] Pong = 19,
        [pbr::OriginalName("REDELIVER_UNACKNOWLEDGED_MESSAGES")] RedeliverUnacknowledgedMessages = 20,
        [pbr::OriginalName("PARTITIONED_METADATA")] PartitionedMetadata = 21,
        [pbr::OriginalName("PARTITIONED_METADATA_RESPONSE")] PartitionedMetadataResponse = 22,
        [pbr::OriginalName("LOOKUP")] Lookup = 23,
        [pbr::OriginalName("LOOKUP_RESPONSE")] LookupResponse = 24,
        [pbr::OriginalName("CONSUMER_STATS")] ConsumerStats = 25,
        [pbr::OriginalName("CONSUMER_STATS_RESPONSE")] ConsumerStatsResponse = 26,
        [pbr::OriginalName("REACHED_END_OF_TOPIC")] ReachedEndOfTopic = 27,
        [pbr::OriginalName("SEEK")] Seek = 28,
        [pbr::OriginalName("GET_LAST_MESSAGE_ID")] GetLastMessageId = 29,
        [pbr::OriginalName("GET_LAST_MESSAGE_ID_RESPONSE")] GetLastMessageIdResponse = 30,
        [pbr::OriginalName("ACTIVE_CONSUMER_CHANGE")] ActiveConsumerChange = 31,
        [pbr::OriginalName("GET_TOPICS_OF_NAMESPACE")] GetTopicsOfNamespace = 32,
        [pbr::OriginalName("GET_TOPICS_OF_NAMESPACE_RESPONSE")] GetTopicsOfNamespaceResponse = 33,
        [pbr::OriginalName("GET_SCHEMA")] GetSchema = 34,
        [pbr::OriginalName("GET_SCHEMA_RESPONSE")] GetSchemaResponse = 35,
        [pbr::OriginalName("AUTH_CHALLENGE")] AuthChallenge = 36,
        [pbr::OriginalName("AUTH_RESPONSE")] AuthResponse = 37,
        [pbr::OriginalName("ACK_RESPONSE")] AckResponse = 38,
        [pbr::OriginalName("GET_OR_CREATE_SCHEMA")] GetOrCreateSchema = 39,
        [pbr::OriginalName("GET_OR_CREATE_SCHEMA_RESPONSE")] GetOrCreateSchemaResponse = 40,
        /// <summary>
        /// transaction related
        /// </summary>
        [pbr::OriginalName("NEW_TXN")] NewTxn = 50,
        [pbr::OriginalName("NEW_TXN_RESPONSE")] NewTxnResponse = 51,
        [pbr::OriginalName("ADD_PARTITION_TO_TXN")] AddPartitionToTxn = 52,
        [pbr::OriginalName("ADD_PARTITION_TO_TXN_RESPONSE")] AddPartitionToTxnResponse = 53,
        [pbr::OriginalName("ADD_SUBSCRIPTION_TO_TXN")] AddSubscriptionToTxn = 54,
        [pbr::OriginalName("ADD_SUBSCRIPTION_TO_TXN_RESPONSE")] AddSubscriptionToTxnResponse = 55,
        [pbr::OriginalName("END_TXN")] EndTxn = 56,
        [pbr::OriginalName("END_TXN_RESPONSE")] EndTxnResponse = 57,
        [pbr::OriginalName("END_TXN_ON_PARTITION")] EndTxnOnPartition = 58,
        [pbr::OriginalName("END_TXN_ON_PARTITION_RESPONSE")] EndTxnOnPartitionResponse = 59,
        [pbr::OriginalName("END_TXN_ON_SUBSCRIPTION")] EndTxnOnSubscription = 60,
        [pbr::OriginalName("END_TXN_ON_SUBSCRIPTION_RESPONSE")] EndTxnOnSubscriptionResponse = 61,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
