akka    		  
{            
             
			stdout-loglevel = DEBUG
			loglevel = DEBUG
			log-config-on-start = on 
			actor 
            {              
				  debug 
				  {
					  receive = on
					  autoreceive = on
					  lifecycle = on
					  event-stream = on
					  unhandled = on
				  }  
			} 
			persistence
			{
					max-concurrent-recoveries = 5
				   journal 
				   {
						plugin = "akka.persistence.journal.pulsar"
						pulsar 
						{
			                    # qualified type name of the SQL Server persistence journal actor
			                    class = "Akka.Persistence.Pulsar.Journal.PulsarJournal, Akka.Persistence.Pulsar"

			                    # dispatcher used to drive journal actor
			                    plugin-dispatcher = "akka.actor.default-dispatcher"
								
			                    # should corresponding journal table be initialized automatically
			                    auto-initialize = off

			                    # timestamp provider used for generation of journal entries timestamps
			                    timestamp-provider = "Akka.Persistence.Sql.Common.Journal.DefaultTimestampProvider, Akka.Persistence.Sql.Common"
								service-url = "pulsar://localhost:6650"
  
							    # Time to wait before retrying an operation or reconnect.
							    retry-interval = 3s
  
							    verity-certificate-authority = true
  
							    # Verify certificate name with hostname.
							    verify-cerfiticate-name = false 
								use-proxy = false
								auth-class = ""
								auth-param = ""
								presto-server = "http://localhost:8081"
							    admin-url = "http://localhost:8080"
							    operation-time-out = 30000
								topic-prefix = "persistent://public/default/"
								pulsar-tenant = "public"
								pulsar-namespace = "default"
		                }
					}

					
					snapshot-store 
					{
						plugin = "akka.persistence.snapshot-store.pulsar"
						pulsar 
						{

			                  # qualified type name of the SQL Server persistence journal actor
			                  class = "Akka.Persistence.Pulsar.Snapshot.PulsarSnapshotStore, Akka.Persistence.Pulsar"

			                  # dispatcher used to drive journal actor
			                  plugin-dispatcher = "akka.actor.default-dispatcher"
			                  

			                  # should corresponding journal table be initialized automatically
			                  auto-initialize = off
							  # timestamp provider used for generation of journal entries timestamps
			                  timestamp-provider = "Akka.Persistence.Sql.Common.Journal.DefaultTimestampProvider, Akka.Persistence.Sql.Common"
						      service-url = "pulsar://localhost:6650"
  
							  # Time to wait before retrying an operation or reconnect.
							  retry-interval = 3s
  
							  verity-certificate-authority = true
  
							  # Verify certificate name with hostname.
							  verify-cerfiticate-name = false 
							  use-proxy = false
							  auth-class = ""
							  auth-param = ""
							  presto-server = "http://localhost:8081"
							  admin-url = "http://localhost:8080"
						      side = "consumer" #producer or consumer/listener
							  topic-prefix = "persistent://public/default/"
							  pulsar-tenant = "public"
							  pulsar-namespace = "default"
						}
					}
				
					query.journal.pulsar
					{
					  # Implementation class of the SQL ReadJournalProvider
					  class = "Akka.Persistence.Pulsar.Query.PulsarReadJournalProvider, Akka.Persistence.Pulsar"
				  
					  # Absolute path to the write journal plugin configuration entry that this 
					  # query journal will connect to. 
					  # If undefined (or "") it will connect to the default journal as specified by the
					  # akka.persistence.journal.plugin property.
					  write-plugin = "akka.persistence.journal.pulsar"
				  
					  # The SQL write journal is notifying the query side as soon as things
					  # are persisted, but for efficiency reasons the query side retrieves the events 
					  # in batches that sometimes can be delayed up to the configured `refresh-interval`.
					  refresh-interval = 1s
				  
					  # How many events to fetch in one query (replay) and keep buffered until they
					  # are delivered downstreams.
					  max-buffer-size = 100
					}
			}
}