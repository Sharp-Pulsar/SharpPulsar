// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using SharpPulsar.Akka.Admin.Api.Models;

namespace PulsarAdmin
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PulsarAdminRESTAPI.
    /// </summary>
    public static partial class PulsarAdminRESTAPIExtensions
    {
        /// <summary>
        /// Gets the rack placement information for all the bookies in the cluster
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IDictionary<string, IDictionary<string, BookieInfo>> GetBookiesRackInfo(
            this IPulsarAdminRESTAPI operations)
        {
            return operations.GetBookiesRackInfoAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the rack placement information for all the bookies in the cluster
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, IDictionary<string, BookieInfo>>> GetBookiesRackInfoAsync(
            this IPulsarAdminRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetBookiesRackInfoWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Gets the rack placement information for a specific bookie in the cluster
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='bookie'>
        /// </param>
        public static BookieInfo GetBookieRackInfo(this IPulsarAdminRESTAPI operations, string bookie)
        {
            return operations.GetBookieRackInfoAsync(bookie).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the rack placement information for a specific bookie in the cluster
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='bookie'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BookieInfo> GetBookieRackInfoAsync(this IPulsarAdminRESTAPI operations, string bookie,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBookieRackInfoWithHttpMessagesAsync(bookie, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Updates the rack placement information for a specific bookie in the cluster
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='bookie'>
        /// </param>
        /// <param name='group'>
        /// </param>
        public static void UpdateBookieRackInfo(this IPulsarAdminRESTAPI operations, string bookie,
            string group = default(string))
        {
            operations.UpdateBookieRackInfoAsync(bookie, group).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the rack placement information for a specific bookie in the cluster
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='bookie'>
        /// </param>
        /// <param name='group'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UpdateBookieRackInfoAsync(this IPulsarAdminRESTAPI operations, string bookie,
            string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.UpdateBookieRackInfoWithHttpMessagesAsync(bookie, group, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Removed the rack placement information for a specific bookie in the cluster
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='bookie'>
        /// </param>
        public static void DeleteBookieRackInfo(this IPulsarAdminRESTAPI operations, string bookie)
        {
            operations.DeleteBookieRackInfoAsync(bookie).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Removed the rack placement information for a specific bookie in the cluster
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='bookie'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteBookieRackInfoAsync(this IPulsarAdminRESTAPI operations, string bookie,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeleteBookieRackInfoWithHttpMessagesAsync(bookie, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the stats for the Netty allocator. Available allocators are 'default'
        /// and 'ml-cache'
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='allocator'>
        /// </param>
        public static AllocatorStats GetAllocatorStats(this IPulsarAdminRESTAPI operations, string allocator)
        {
            return operations.GetAllocatorStatsAsync(allocator).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the stats for the Netty allocator. Available allocators are 'default'
        /// and 'ml-cache'
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='allocator'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<AllocatorStats> GetAllocatorStatsAsync(this IPulsarAdminRESTAPI operations,
            string allocator, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetAllocatorStatsWithHttpMessagesAsync(allocator, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get pending bookie client op stats by namesapce
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IDictionary<string, PendingBookieOpsStats> GetPendingBookieOpsStats(
            this IPulsarAdminRESTAPI operations)
        {
            return operations.GetPendingBookieOpsStatsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get pending bookie client op stats by namesapce
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, PendingBookieOpsStats>> GetPendingBookieOpsStatsAsync(
            this IPulsarAdminRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetPendingBookieOpsStatsWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Broker availability report
        /// </summary>
        /// <remarks>
        /// This API gives the current broker availability in percent, each resource
        /// percentage usage is calculated and thensum of all of the resource usage
        /// percent is called broker-resource-availability&lt;br/&gt;&lt;br/&gt;THIS
        /// API IS ONLY FOR USE BY TESTING FOR CONFIRMING NAMESPACE ALLOCATION
        /// ALGORITHM
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static IDictionary<string, ResourceUnit> GetBrokerResourceAvailability(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter)
        {
            return operations.GetBrokerResourceAvailabilityAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Broker availability report
        /// </summary>
        /// <remarks>
        /// This API gives the current broker availability in percent, each resource
        /// percentage usage is calculated and thensum of all of the resource usage
        /// percent is called broker-resource-availability&lt;br/&gt;&lt;br/&gt;THIS
        /// API IS ONLY FOR USE BY TESTING FOR CONFIRMING NAMESPACE ALLOCATION
        /// ALGORITHM
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, ResourceUnit>> GetBrokerResourceAvailabilityAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBrokerResourceAvailabilityWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get Load for this broker
        /// </summary>
        /// <remarks>
        /// consists of topics stats &amp; systemResourceUsage
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static LoadReport GetLoadReport(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetLoadReportAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Load for this broker
        /// </summary>
        /// <remarks>
        /// consists of topics stats &amp; systemResourceUsage
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<LoadReport> GetLoadReportAsync(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetLoadReportWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all the mbean details of this broker JVM
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IList<Metrics> GetMBeans(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetMBeansAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the mbean details of this broker JVM
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<Metrics>> GetMBeansAsync(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetMBeansWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Gets the metrics for Monitoring
        /// </summary>
        /// <remarks>
        /// Requested should be executed by Monitoring agent on each broker to fetch
        /// the metrics
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IList<Metrics> GetMetrics(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetMetricsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the metrics for Monitoring
        /// </summary>
        /// <remarks>
        /// Requested should be executed by Monitoring agent on each broker to fetch
        /// the metrics
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<Metrics>> GetMetricsAsync(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetMetricsWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all the topic stats by namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static object GetTopics2(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetTopics2Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the topic stats by namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<object> GetTopics2Async(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetTopics2WithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all updatable dynamic configurations's name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IList<object> GetDynamicConfigurationName(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetDynamicConfigurationNameAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all updatable dynamic configurations's name
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<object>> GetDynamicConfigurationNameAsync(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetDynamicConfigurationNameWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all runtime configurations. This operation requires Pulsar super-user
        /// privileges.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IDictionary<string, object> GetRuntimeConfiguration(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetRuntimeConfigurationAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all runtime configurations. This operation requires Pulsar super-user
        /// privileges.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, object>> GetRuntimeConfigurationAsync(
            this IPulsarAdminRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetRuntimeConfigurationWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get value of all dynamic configurations' value overridden on local config
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IDictionary<string, object> GetAllDynamicConfigurations(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetAllDynamicConfigurationsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get value of all dynamic configurations' value overridden on local config
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, object>> GetAllDynamicConfigurationsAsync(
            this IPulsarAdminRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetAllDynamicConfigurationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Delete dynamic serviceconfiguration into zk only. This operation requires
        /// Pulsar super-user privileges.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configName'>
        /// </param>
        public static void DeleteDynamicConfiguration(this IPulsarAdminRESTAPI operations, string configName)
        {
            operations.DeleteDynamicConfigurationAsync(configName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete dynamic serviceconfiguration into zk only. This operation requires
        /// Pulsar super-user privileges.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configName'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteDynamicConfigurationAsync(this IPulsarAdminRESTAPI operations, string configName,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeleteDynamicConfigurationWithHttpMessagesAsync(configName, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Update dynamic serviceconfiguration into zk only. This operation requires
        /// Pulsar super-user privileges.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configName'>
        /// </param>
        /// <param name='configValue'>
        /// </param>
        public static void UpdateDynamicConfiguration(this IPulsarAdminRESTAPI operations, string configName,
            string configValue)
        {
            operations.UpdateDynamicConfigurationAsync(configName, configValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update dynamic serviceconfiguration into zk only. This operation requires
        /// Pulsar super-user privileges.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='configName'>
        /// </param>
        /// <param name='configValue'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UpdateDynamicConfigurationAsync(this IPulsarAdminRESTAPI operations, string configName,
            string configValue, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .UpdateDynamicConfigurationWithHttpMessagesAsync(configName, configValue, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Run a healthcheck against the broker
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static void Healthcheck(this IPulsarAdminRESTAPI operations)
        {
            operations.HealthcheckAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Run a healthcheck against the broker
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task HealthcheckAsync(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.HealthcheckWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                .Dispose();
        }

        /// <summary>
        /// Get the internal configuration data
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static InternalConfigurationData GetInternalConfigurationData(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetInternalConfigurationDataAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the internal configuration data
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<InternalConfigurationData> GetInternalConfigurationDataAsync(
            this IPulsarAdminRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetInternalConfigurationDataWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the list of namespaces served by the specific broker
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='clusterName'>
        /// </param>
        /// <param name='brokerWebserviceurl'>
        /// </param>
        public static IDictionary<string, NamespaceOwnershipStatus> GetOwnedNamespaces(
            this IPulsarAdminRESTAPI operations, string clusterName, string brokerWebserviceurl)
        {
            return operations.GetOwnedNamespacesAsync(clusterName, brokerWebserviceurl).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of namespaces served by the specific broker
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='clusterName'>
        /// </param>
        /// <param name='brokerWebserviceurl'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, NamespaceOwnershipStatus>> GetOwnedNamespacesAsync(
            this IPulsarAdminRESTAPI operations, string clusterName, string brokerWebserviceurl,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetOwnedNamespacesWithHttpMessagesAsync(clusterName, brokerWebserviceurl, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the list of active brokers (web service addresses) in the cluster.If
        /// authorization is not enabled, any cluster name is valid.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// </param>
        public static IList<string> GetActiveBrokers(this IPulsarAdminRESTAPI operations, string cluster)
        {
            return operations.GetActiveBrokersAsync(cluster).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of active brokers (web service addresses) in the cluster.If
        /// authorization is not enabled, any cluster name is valid.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetActiveBrokersAsync(this IPulsarAdminRESTAPI operations,
            string cluster, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetActiveBrokersWithHttpMessagesAsync(cluster, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the list of all the Pulsar clusters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IList<string> GetClusters(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetClustersAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of all the Pulsar clusters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetClustersAsync(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetClustersWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the configuration for the specified cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        public static ClusterData GetCluster(this IPulsarAdminRESTAPI operations, string cluster)
        {
            return operations.GetClusterAsync(cluster).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the configuration for the specified cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<ClusterData> GetClusterAsync(this IPulsarAdminRESTAPI operations, string cluster,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetClusterWithHttpMessagesAsync(cluster, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update the configuration for a cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='body'>
        /// The cluster data
        /// </param>
        public static void UpdateCluster(this IPulsarAdminRESTAPI operations, string cluster, ClusterData body)
        {
            operations.UpdateClusterAsync(cluster, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the configuration for a cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='body'>
        /// The cluster data
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UpdateClusterAsync(this IPulsarAdminRESTAPI operations, string cluster,
            ClusterData body, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.UpdateClusterWithHttpMessagesAsync(cluster, body, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Create a new cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges, and the name cannot
        /// contain the '/' characters.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='body'>
        /// The cluster data
        /// </param>
        public static void CreateCluster(this IPulsarAdminRESTAPI operations, string cluster, ClusterData body)
        {
            operations.CreateClusterAsync(cluster, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a new cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges, and the name cannot
        /// contain the '/' characters.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='body'>
        /// The cluster data
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreateClusterAsync(this IPulsarAdminRESTAPI operations, string cluster,
            ClusterData body, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.CreateClusterWithHttpMessagesAsync(cluster, body, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete an existing cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        public static void DeleteCluster(this IPulsarAdminRESTAPI operations, string cluster)
        {
            operations.DeleteClusterAsync(cluster).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete an existing cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteClusterAsync(this IPulsarAdminRESTAPI operations, string cluster,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeleteClusterWithHttpMessagesAsync(cluster, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the cluster failure domains.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        public static IDictionary<string, FailureDomain> GetFailureDomains(this IPulsarAdminRESTAPI operations,
            string cluster)
        {
            return operations.GetFailureDomainsAsync(cluster).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the cluster failure domains.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, FailureDomain>> GetFailureDomainsAsync(
            this IPulsarAdminRESTAPI operations, string cluster,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetFailureDomainsWithHttpMessagesAsync(cluster, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get a domain in a cluster
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='domainName'>
        /// The failure domain name
        /// </param>
        public static FailureDomain GetDomain(this IPulsarAdminRESTAPI operations, string cluster, string domainName)
        {
            return operations.GetDomainAsync(cluster, domainName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a domain in a cluster
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='domainName'>
        /// The failure domain name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<FailureDomain> GetDomainAsync(this IPulsarAdminRESTAPI operations, string cluster,
            string domainName, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetDomainWithHttpMessagesAsync(cluster, domainName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set the failure domain of the cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='domainName'>
        /// The failure domain name
        /// </param>
        /// <param name='body'>
        /// The configuration data of a failure domain
        /// </param>
        public static void SetFailureDomain(this IPulsarAdminRESTAPI operations, string cluster, string domainName,
            FailureDomain body)
        {
            operations.SetFailureDomainAsync(cluster, domainName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set the failure domain of the cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='domainName'>
        /// The failure domain name
        /// </param>
        /// <param name='body'>
        /// The configuration data of a failure domain
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetFailureDomainAsync(this IPulsarAdminRESTAPI operations, string cluster,
            string domainName, FailureDomain body, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SetFailureDomainWithHttpMessagesAsync(cluster, domainName, body, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete the failure domain of the cluster
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='domainName'>
        /// The failure domain name
        /// </param>
        public static void DeleteFailureDomain(this IPulsarAdminRESTAPI operations, string cluster, string domainName)
        {
            operations.DeleteFailureDomainAsync(cluster, domainName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the failure domain of the cluster
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='domainName'>
        /// The failure domain name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteFailureDomainAsync(this IPulsarAdminRESTAPI operations, string cluster,
            string domainName, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeleteFailureDomainWithHttpMessagesAsync(cluster, domainName, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the namespace isolation policies assigned to the cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        public static IDictionary<string, NamespaceIsolationData> GetNamespaceIsolationPolicies(
            this IPulsarAdminRESTAPI operations, string cluster)
        {
            return operations.GetNamespaceIsolationPoliciesAsync(cluster).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the namespace isolation policies assigned to the cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, NamespaceIsolationData>> GetNamespaceIsolationPoliciesAsync(
            this IPulsarAdminRESTAPI operations, string cluster,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetNamespaceIsolationPoliciesWithHttpMessagesAsync(cluster, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get list of brokers with namespace-isolation policies attached to them.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        public static IList<BrokerNamespaceIsolationData> GetBrokersWithNamespaceIsolationPolicy(
            this IPulsarAdminRESTAPI operations, string cluster)
        {
            return operations.GetBrokersWithNamespaceIsolationPolicyAsync(cluster).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get list of brokers with namespace-isolation policies attached to them.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<BrokerNamespaceIsolationData>> GetBrokersWithNamespaceIsolationPolicyAsync(
            this IPulsarAdminRESTAPI operations, string cluster,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBrokersWithNamespaceIsolationPolicyWithHttpMessagesAsync(cluster, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get a broker with namespace-isolation policies attached to it.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='broker'>
        /// The broker name (&lt;broker-hostname&gt;:&lt;web-service-port&gt;)
        /// </param>
        public static BrokerNamespaceIsolationData GetBrokerWithNamespaceIsolationPolicy(
            this IPulsarAdminRESTAPI operations, string cluster, string broker)
        {
            return operations.GetBrokerWithNamespaceIsolationPolicyAsync(cluster, broker).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a broker with namespace-isolation policies attached to it.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='broker'>
        /// The broker name (&lt;broker-hostname&gt;:&lt;web-service-port&gt;)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BrokerNamespaceIsolationData> GetBrokerWithNamespaceIsolationPolicyAsync(
            this IPulsarAdminRESTAPI operations, string cluster, string broker,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBrokerWithNamespaceIsolationPolicyWithHttpMessagesAsync(cluster, broker, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the single namespace isolation policy assigned to the cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='policyName'>
        /// The name of the namespace isolation policy
        /// </param>
        public static NamespaceIsolationData GetNamespaceIsolationPolicy(this IPulsarAdminRESTAPI operations,
            string cluster, string policyName)
        {
            return operations.GetNamespaceIsolationPolicyAsync(cluster, policyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the single namespace isolation policy assigned to the cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='policyName'>
        /// The name of the namespace isolation policy
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<NamespaceIsolationData> GetNamespaceIsolationPolicyAsync(
            this IPulsarAdminRESTAPI operations, string cluster, string policyName,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetNamespaceIsolationPolicyWithHttpMessagesAsync(cluster, policyName, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set namespace isolation policy.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='policyName'>
        /// The namespace isolation policy name
        /// </param>
        /// <param name='body'>
        /// The namespace isolation policy data
        /// </param>
        public static void SetNamespaceIsolationPolicy(this IPulsarAdminRESTAPI operations, string cluster,
            string policyName, NamespaceIsolationData body)
        {
            operations.SetNamespaceIsolationPolicyAsync(cluster, policyName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set namespace isolation policy.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='policyName'>
        /// The namespace isolation policy name
        /// </param>
        /// <param name='body'>
        /// The namespace isolation policy data
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetNamespaceIsolationPolicyAsync(this IPulsarAdminRESTAPI operations, string cluster,
            string policyName, NamespaceIsolationData body,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetNamespaceIsolationPolicyWithHttpMessagesAsync(cluster, policyName, body, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete namespace isolation policy.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='policyName'>
        /// The namespace isolation policy name
        /// </param>
        public static void DeleteNamespaceIsolationPolicy(this IPulsarAdminRESTAPI operations, string cluster,
            string policyName)
        {
            operations.DeleteNamespaceIsolationPolicyAsync(cluster, policyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete namespace isolation policy.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='policyName'>
        /// The namespace isolation policy name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteNamespaceIsolationPolicyAsync(this IPulsarAdminRESTAPI operations,
            string cluster, string policyName, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .DeleteNamespaceIsolationPolicyWithHttpMessagesAsync(cluster, policyName, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the peer-cluster data for the specified cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        public static IList<string> GetPeerCluster(this IPulsarAdminRESTAPI operations, string cluster)
        {
            return operations.GetPeerClusterAsync(cluster).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the peer-cluster data for the specified cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetPeerClusterAsync(this IPulsarAdminRESTAPI operations, string cluster,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetPeerClusterWithHttpMessagesAsync(cluster, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update peer-cluster-list for a cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='body'>
        /// The list of peer cluster names
        /// </param>
        public static void SetPeerClusterNames(this IPulsarAdminRESTAPI operations, string cluster, IList<string> body)
        {
            operations.SetPeerClusterNamesAsync(cluster, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update peer-cluster-list for a cluster.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar superuser privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// The cluster name
        /// </param>
        /// <param name='body'>
        /// The list of peer cluster names
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetPeerClusterNamesAsync(this IPulsarAdminRESTAPI operations, string cluster,
            IList<string> body, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SetPeerClusterNamesWithHttpMessagesAsync(cluster, body, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get all namespaces that are grouped by given anti-affinity group in a given
        /// cluster. api can be only accessed by admin of any of the existing tenant
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// </param>
        /// <param name='group'>
        /// </param>
        /// <param name='tenant'>
        /// </param>
        public static IList<object> GetAntiAffinityNamespaces(this IPulsarAdminRESTAPI operations, string cluster,
            string group, string tenant = default(string))
        {
            return operations.GetAntiAffinityNamespacesAsync(cluster, group, tenant).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all namespaces that are grouped by given anti-affinity group in a given
        /// cluster. api can be only accessed by admin of any of the existing tenant
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cluster'>
        /// </param>
        /// <param name='group'>
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<object>> GetAntiAffinityNamespacesAsync(this IPulsarAdminRESTAPI operations,
            string cluster, string group, string tenant = default(string),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetAntiAffinityNamespacesWithHttpMessagesAsync(cluster, group, tenant, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the bookie-affinity-group from namespace-local policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='property'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static BookieAffinityGroupData GetBookieAffinityGroup(this IPulsarAdminRESTAPI operations,
            string property, string namespaceParameter)
        {
            return operations.GetBookieAffinityGroupAsync(property, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the bookie-affinity-group from namespace-local policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='property'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BookieAffinityGroupData> GetBookieAffinityGroupAsync(
            this IPulsarAdminRESTAPI operations, string property, string namespaceParameter,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBookieAffinityGroupWithHttpMessagesAsync(property, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Delete the bookie-affinity-group from namespace-local policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='property'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void DeleteBookieAffinityGroup(this IPulsarAdminRESTAPI operations, string property,
            string namespaceParameter)
        {
            operations.DeleteBookieAffinityGroupAsync(property, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the bookie-affinity-group from namespace-local policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='property'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteBookieAffinityGroupAsync(this IPulsarAdminRESTAPI operations, string property,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .DeleteBookieAffinityGroupWithHttpMessagesAsync(property, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the list of all the namespaces for a certain tenant.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        public static IList<string> GetTenantNamespaces(this IPulsarAdminRESTAPI operations, string tenant)
        {
            return operations.GetTenantNamespacesAsync(tenant).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of all the namespaces for a certain tenant.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetTenantNamespacesAsync(this IPulsarAdminRESTAPI operations,
            string tenant, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetTenantNamespacesWithHttpMessagesAsync(tenant, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the dump all the policies specified for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static Policies GetPolicies(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetPoliciesAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the dump all the policies specified for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<Policies> GetPoliciesAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetPoliciesWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Creates a new namespace with the specified policies
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void CreateNamespace(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, Policies policies)
        {
            operations.CreateNamespaceAsync(tenant, namespaceParameter, policies).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new namespace with the specified policies
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreateNamespaceAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, Policies policies,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .CreateNamespaceWithHttpMessagesAsync(tenant, namespaceParameter, policies, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete a namespace and all the topics under it.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void DeleteNamespace(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool? authoritative = false)
        {
            operations.DeleteNamespaceAsync(tenant, namespaceParameter, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a namespace and all the topics under it.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteNamespaceAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .DeleteNamespaceWithHttpMessagesAsync(tenant, namespaceParameter, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get anti-affinity group of a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static string GetNamespaceAntiAffinityGroup(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetNamespaceAntiAffinityGroupAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get anti-affinity group of a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<string> GetNamespaceAntiAffinityGroupAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetNamespaceAntiAffinityGroupWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set anti-affinity group for a namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetNamespaceAntiAffinityGroup(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string affinityGroup)
        {
            operations.SetNamespaceAntiAffinityGroupAsync(tenant, namespaceParameter, affinityGroup).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Set anti-affinity group for a namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetNamespaceAntiAffinityGroupAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string affinityGroup,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetNamespaceAntiAffinityGroupWithHttpMessagesAsync(tenant, namespaceParameter, affinityGroup, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Remove anti-affinity group of a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void RemoveNamespaceAntiAffinityGroup(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            operations.RemoveNamespaceAntiAffinityGroupAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Remove anti-affinity group of a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task RemoveNamespaceAntiAffinityGroupAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .RemoveNamespaceAntiAffinityGroupWithHttpMessagesAsync(tenant, namespaceParameter, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Set a backlog quota for all the topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='backlogQuotaType'>
        /// Possible values include: 'destination_storage'
        /// </param>
        public static void SetBacklogQuota(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string backlogQuotaType = default(string))
        {
            operations.SetBacklogQuotaAsync(tenant, namespaceParameter, backlogQuotaType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set a backlog quota for all the topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='backlogQuotaType'>
        /// Possible values include: 'destination_storage'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetBacklogQuotaAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string backlogQuotaType = default(string),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetBacklogQuotaWithHttpMessagesAsync(tenant, namespaceParameter, backlogQuotaType, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Remove a backlog quota policy from a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='backlogQuotaType'>
        /// Possible values include: 'destination_storage'
        /// </param>
        public static void RemoveBacklogQuota(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string backlogQuotaType = default(string))
        {
            operations.RemoveBacklogQuotaAsync(tenant, namespaceParameter, backlogQuotaType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Remove a backlog quota policy from a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='backlogQuotaType'>
        /// Possible values include: 'destination_storage'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task RemoveBacklogQuotaAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string backlogQuotaType = default(string),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .RemoveBacklogQuotaWithHttpMessagesAsync(tenant, namespaceParameter, backlogQuotaType, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get backlog quota map on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static IDictionary<string, object> GetBacklogQuotaMap(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetBacklogQuotaMapAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get backlog quota map on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, object>> GetBacklogQuotaMapAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBacklogQuotaMapWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the bundles split data.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static BundlesData GetBundlesData(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetBundlesDataAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the bundles split data.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<BundlesData> GetBundlesDataAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBundlesDataWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Clear backlog for all topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void ClearNamespaceBacklog(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool? authoritative = false)
        {
            operations.ClearNamespaceBacklogAsync(tenant, namespaceParameter, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Clear backlog for all topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ClearNamespaceBacklogAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .ClearNamespaceBacklogWithHttpMessagesAsync(tenant, namespaceParameter, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Clear backlog for a given subscription on all topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='subscription'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void ClearNamespaceBacklogForSubscription(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string subscription, bool? authoritative = false)
        {
            operations.ClearNamespaceBacklogForSubscriptionAsync(tenant, namespaceParameter, subscription,
                authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Clear backlog for a given subscription on all topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='subscription'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ClearNamespaceBacklogForSubscriptionAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string subscription, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ClearNamespaceBacklogForSubscriptionWithHttpMessagesAsync(tenant, namespaceParameter,
                subscription, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Maximum number of uncompacted bytes in topics before compaction is
        /// triggered.
        /// </summary>
        /// <remarks>
        /// The backlog size is compared to the threshold periodically. A threshold of
        /// 0 disabled automatic compaction
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static long? GetCompactionThreshold(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetCompactionThresholdAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Maximum number of uncompacted bytes in topics before compaction is
        /// triggered.
        /// </summary>
        /// <remarks>
        /// The backlog size is compared to the threshold periodically. A threshold of
        /// 0 disabled automatic compaction
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<long?> GetCompactionThresholdAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetCompactionThresholdWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set maximum number of uncompacted bytes in a topic before compaction is
        /// triggered.
        /// </summary>
        /// <remarks>
        /// The backlog size is compared to the threshold periodically. A threshold of
        /// 0 disabled automatic compaction
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetCompactionThreshold(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, long threshHold)
        {
            operations.SetCompactionThresholdAsync(tenant, namespaceParameter, threshHold).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set maximum number of uncompacted bytes in a topic before compaction is
        /// triggered.
        /// </summary>
        /// <remarks>
        /// The backlog size is compared to the threshold periodically. A threshold of
        /// 0 disabled automatic compaction
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetCompactionThresholdAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, long threshHold,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetCompactionThresholdWithHttpMessagesAsync(tenant, namespaceParameter, threshHold, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Enable or disable broker side deduplication for all topics in a namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void ModifyDeduplication(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool enableDeduplication)
        {
            operations.ModifyDeduplicationAsync(tenant, namespaceParameter, enableDeduplication).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Enable or disable broker side deduplication for all topics in a namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ModifyDeduplicationAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool enableDeduplication,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .ModifyDeduplicationWithHttpMessagesAsync(tenant, namespaceParameter, enableDeduplication, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get dispatch-rate configured for the namespace, -1 represents not
        /// configured yet
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static DispatchRate GetDispatchRate(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetDispatchRateAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get dispatch-rate configured for the namespace, -1 represents not
        /// configured yet
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<DispatchRate> GetDispatchRateAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetDispatchRateWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dispatch-rate throttling for all topics of the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetDispatchRate(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, DispatchRate dispatchRate)
        {
            operations.SetDispatchRateAsync(tenant, namespaceParameter, dispatchRate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dispatch-rate throttling for all topics of the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetDispatchRateAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, DispatchRate dispatchRate,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetDispatchRateWithHttpMessagesAsync(tenant, namespaceParameter, dispatchRate, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Message encryption is required or not for all topics in a namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void ModifyEncryptionRequired(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool encryptionRequired)
        {
            operations.ModifyEncryptionRequiredAsync(tenant, namespaceParameter, encryptionRequired).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Message encryption is required or not for all topics in a namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ModifyEncryptionRequiredAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool encryptionRequired,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .ModifyEncryptionRequiredWithHttpMessagesAsync(tenant, namespaceParameter, encryptionRequired, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// The flag of whether allow auto update schema
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static bool? GetIsAllowAutoUpdateSchema(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetIsAllowAutoUpdateSchemaAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The flag of whether allow auto update schema
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<bool?> GetIsAllowAutoUpdateSchemaAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetIsAllowAutoUpdateSchemaWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update flag of whether allow auto update schema
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetIsAllowAutoUpdateSchema(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool allow)
        {
            operations.SetIsAllowAutoUpdateSchemaAsync(tenant, namespaceParameter, allow).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update flag of whether allow auto update schema
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetIsAllowAutoUpdateSchemaAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool allow, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetIsAllowAutoUpdateSchemaWithHttpMessagesAsync(tenant, namespaceParameter, allow, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get maxConsumersPerSubscription config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static int? GetMaxConsumersPerSubscription(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetMaxConsumersPerSubscriptionAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get maxConsumersPerSubscription config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<int?> GetMaxConsumersPerSubscriptionAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetMaxConsumersPerSubscriptionWithHttpMessagesAsync(tenant, namespaceParameter, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set maxConsumersPerSubscription configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetMaxConsumersPerSubscription(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, int maxConsumersPerSubscription)
        {
            operations.SetMaxConsumersPerSubscriptionAsync(tenant, namespaceParameter, maxConsumersPerSubscription)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set maxConsumersPerSubscription configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetMaxConsumersPerSubscriptionAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, int maxConsumersPerSubscription,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SetMaxConsumersPerSubscriptionWithHttpMessagesAsync(tenant, namespaceParameter,
                maxConsumersPerSubscription, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get maxConsumersPerTopic config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static int? GetMaxConsumersPerTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetMaxConsumersPerTopicAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get maxConsumersPerTopic config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<int?> GetMaxConsumersPerTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetMaxConsumersPerTopicWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set maxConsumersPerTopic configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetMaxConsumersPerTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, int maxConsumersPerTopic)
        {
            operations.SetMaxConsumersPerTopicAsync(tenant, namespaceParameter, maxConsumersPerTopic).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Set maxConsumersPerTopic configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetMaxConsumersPerTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, int maxConsumersPerTopic,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetMaxConsumersPerTopicWithHttpMessagesAsync(tenant, namespaceParameter, maxConsumersPerTopic, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get maxProducersPerTopic config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static int? GetMaxProducersPerTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetMaxProducersPerTopicAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get maxProducersPerTopic config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<int?> GetMaxProducersPerTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetMaxProducersPerTopicWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set maxProducersPerTopic configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetMaxProducersPerTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, int maxProducersPerTopic)
        {
            operations.SetMaxProducersPerTopicAsync(tenant, namespaceParameter, maxProducersPerTopic).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Set maxProducersPerTopic configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetMaxProducersPerTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, int maxProducersPerTopic,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetMaxProducersPerTopicWithHttpMessagesAsync(tenant, namespaceParameter, maxProducersPerTopic, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the message TTL for the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static int? GetNamespaceMessageTTL(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetNamespaceMessageTTLAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the message TTL for the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<int?> GetNamespaceMessageTTLAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetNamespaceMessageTTLWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set message TTL in seconds for namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetNamespaceMessageTTL(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, int messageTTL)
        {
            operations.SetNamespaceMessageTTLAsync(tenant, namespaceParameter, messageTTL).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set message TTL in seconds for namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetNamespaceMessageTTLAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, int messageTTL, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetNamespaceMessageTTLWithHttpMessagesAsync(tenant, namespaceParameter, messageTTL, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Number of milliseconds to wait before deleting a ledger segment which has
        /// been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
        /// </summary>
        /// <remarks>
        /// A negative value denotes that deletion has been completely disabled. 'null'
        /// denotes that the topics in the namespace will fall back to the broker
        /// default for deletion lag.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static long? GetOffloadDeletionLag(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetOffloadDeletionLagAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Number of milliseconds to wait before deleting a ledger segment which has
        /// been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
        /// </summary>
        /// <remarks>
        /// A negative value denotes that deletion has been completely disabled. 'null'
        /// denotes that the topics in the namespace will fall back to the broker
        /// default for deletion lag.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<long?> GetOffloadDeletionLagAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetOffloadDeletionLagWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set number of milliseconds to wait before deleting a ledger segment which
        /// has been offloaded from the Pulsar cluster's local storage (i.e.
        /// BookKeeper)
        /// </summary>
        /// <remarks>
        /// A negative value disables the deletion completely.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetOffloadDeletionLag(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, long offload)
        {
            operations.SetOffloadDeletionLagAsync(tenant, namespaceParameter, offload).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set number of milliseconds to wait before deleting a ledger segment which
        /// has been offloaded from the Pulsar cluster's local storage (i.e.
        /// BookKeeper)
        /// </summary>
        /// <remarks>
        /// A negative value disables the deletion completely.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetOffloadDeletionLagAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, long off, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetOffloadDeletionLagWithHttpMessagesAsync(tenant, namespaceParameter, off, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Clear the namespace configured offload deletion lag. The topics in the
        /// namespace will fallback to using the default configured deletion lag for
        /// the broker
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void ClearOffloadDeletionLag(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            operations.ClearOffloadDeletionLagAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Clear the namespace configured offload deletion lag. The topics in the
        /// namespace will fallback to using the default configured deletion lag for
        /// the broker
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ClearOffloadDeletionLagAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .ClearOffloadDeletionLagWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Maximum number of bytes stored on the pulsar cluster for a topic, before
        /// the broker will start offloading to longterm storage
        /// </summary>
        /// <remarks>
        /// A negative value disables automatic offloading
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static long? GetOffloadThreshold(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetOffloadThresholdAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Maximum number of bytes stored on the pulsar cluster for a topic, before
        /// the broker will start offloading to longterm storage
        /// </summary>
        /// <remarks>
        /// A negative value disables automatic offloading
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<long?> GetOffloadThresholdAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetOffloadThresholdWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set maximum number of bytes stored on the pulsar cluster for a topic,
        /// before the broker will start offloading to longterm storage
        /// </summary>
        /// <remarks>
        /// -1 will revert to using the cluster default. A negative value disables
        /// automatic offloading.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetOffloadThreshold(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, long thresh)
        {
            operations.SetOffloadThresholdAsync(tenant, namespaceParameter, thresh).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set maximum number of bytes stored on the pulsar cluster for a topic,
        /// before the broker will start offloading to longterm storage
        /// </summary>
        /// <remarks>
        /// -1 will revert to using the cluster default. A negative value disables
        /// automatic offloading.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetOffloadThresholdAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, long thresh, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetOffloadThresholdWithHttpMessagesAsync(tenant, namespaceParameter, thresh, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Retrieve the permissions for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='cluster'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static IDictionary<string, object> GetPermissions(this IPulsarAdminRESTAPI operations, string tenant,
            string cluster, string namespaceParameter)
        {
            return operations.GetPermissionsAsync(tenant, cluster, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieve the permissions for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='cluster'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, object>> GetPermissionsAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string cluster, string namespaceParameter,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetPermissionsWithHttpMessagesAsync(tenant, cluster, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Grant a new permission to a role on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='role'>
        /// </param>
        public static void GrantPermissionOnNamespace(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string role)
        {
            operations.GrantPermissionOnNamespaceAsync(tenant, namespaceParameter, role).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Grant a new permission to a role on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='role'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GrantPermissionOnNamespaceAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .GrantPermissionOnNamespaceWithHttpMessagesAsync(tenant, namespaceParameter, role, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Revoke all permissions to a role on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='role'>
        /// </param>
        public static void RevokePermissionsOnNamespace(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string role)
        {
            operations.RevokePermissionsOnNamespaceAsync(tenant, namespaceParameter, role).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Revoke all permissions to a role on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='role'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task RevokePermissionsOnNamespaceAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string role, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .RevokePermissionsOnNamespaceWithHttpMessagesAsync(tenant, namespaceParameter, role, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the persistence configuration for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static PersistencePolicies GetPersistence(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetPersistenceAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the persistence configuration for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<PersistencePolicies> GetPersistenceAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetPersistenceWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set the persistence configuration for all the topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetPersistence(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            PersistencePolicies persistence)
        {
            operations.SetPersistenceAsync(tenant, namespaceParameter, persistence).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set the persistence configuration for all the topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetPersistenceAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, PersistencePolicies persistence,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetPersistenceWithHttpMessagesAsync(tenant, namespaceParameter, persistence, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Set the bookie-affinity-group to namespace-persistent policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetBookieAffinityGroup(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, BookieAffinityGroupData bookieAffinity)
        {
            operations.SetBookieAffinityGroupAsync(tenant, namespaceParameter, bookieAffinity).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set the bookie-affinity-group to namespace-persistent policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetBookieAffinityGroupAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, BookieAffinityGroupData bookieAffinity,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetBookieAffinityGroupWithHttpMessagesAsync(tenant, namespaceParameter, bookieAffinity, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the replication clusters for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static IList<string> GetNamespaceReplicationClusters(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetNamespaceReplicationClustersAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the replication clusters for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetNamespaceReplicationClustersAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetNamespaceReplicationClustersWithHttpMessagesAsync(tenant, namespaceParameter, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set the replication clusters for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetNamespaceReplicationClusters(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, List<string> clusterIds)
        {
            operations.SetNamespaceReplicationClustersAsync(tenant, namespaceParameter, clusterIds).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Set the replication clusters for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetNamespaceReplicationClustersAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, List<string> clusterIds,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetNamespaceReplicationClustersWithHttpMessagesAsync(tenant, namespaceParameter, clusterIds, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get replicator dispatch-rate configured for the namespace, -1 represents
        /// not configured yet
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static DispatchRate GetReplicatorDispatchRate(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetReplicatorDispatchRateAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get replicator dispatch-rate configured for the namespace, -1 represents
        /// not configured yet
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<DispatchRate> GetReplicatorDispatchRateAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetReplicatorDispatchRateWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set replicator dispatch-rate throttling for all topics of the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetReplicatorDispatchRate(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, DispatchRate dispatchRate)
        {
            operations.SetReplicatorDispatchRateAsync(tenant, namespaceParameter, dispatchRate).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Set replicator dispatch-rate throttling for all topics of the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetReplicatorDispatchRateAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, DispatchRate dispatchRate,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetReplicatorDispatchRateWithHttpMessagesAsync(tenant, namespaceParameter, dispatchRate, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get retention config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static RetentionPolicies GetRetention(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetRetentionAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get retention config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<RetentionPolicies> GetRetentionAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetRetentionWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set retention configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetRetention(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            RetentionPolicies retention)
        {
            operations.SetRetentionAsync(tenant, namespaceParameter, retention).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set retention configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetRetentionAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, RetentionPolicies retention,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetRetentionWithHttpMessagesAsync(tenant, namespaceParameter, retention, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// The strategy used to check the compatibility of new schemas, provided by
        /// producers, before automatically updating the schema
        /// </summary>
        /// <remarks>
        /// The value AutoUpdateDisabled prevents producers from updating the schema.
        /// If set to AutoUpdateDisabled, schemas must be updated through the REST api
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static string GetSchemaAutoUpdateCompatibilityStrategy(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter)
        {
            return operations.GetSchemaAutoUpdateCompatibilityStrategyAsync(tenant, namespaceParameter).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// The strategy used to check the compatibility of new schemas, provided by
        /// producers, before automatically updating the schema
        /// </summary>
        /// <remarks>
        /// The value AutoUpdateDisabled prevents producers from updating the schema.
        /// If set to AutoUpdateDisabled, schemas must be updated through the REST api
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<string> GetSchemaAutoUpdateCompatibilityStrategyAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetSchemaAutoUpdateCompatibilityStrategyWithHttpMessagesAsync(tenant, namespaceParameter, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update the strategy used to check the compatibility of new schemas,
        /// provided by producers, before automatically updating the schema
        /// </summary>
        /// <remarks>
        /// The value AutoUpdateDisabled prevents producers from updating the schema.
        /// If set to AutoUpdateDisabled, schemas must be updated through the REST api
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetSchemaAutoUpdateCompatibilityStrategy(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, SchemaAutoUpdateCompatibilityStrategy strategy)
        {
            operations.SetSchemaAutoUpdateCompatibilityStrategyAsync(tenant, namespaceParameter, strategy).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Update the strategy used to check the compatibility of new schemas,
        /// provided by producers, before automatically updating the schema
        /// </summary>
        /// <remarks>
        /// The value AutoUpdateDisabled prevents producers from updating the schema.
        /// If set to AutoUpdateDisabled, schemas must be updated through the REST api
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetSchemaAutoUpdateCompatibilityStrategyAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, SchemaAutoUpdateCompatibilityStrategy strategy,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetSchemaAutoUpdateCompatibilityStrategyWithHttpMessagesAsync(tenant, namespaceParameter, strategy,
                    null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// The strategy of the namespace schema compatibility
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static string GetSchemaCompatibilityStrategy(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetSchemaCompatibilityStrategyAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// The strategy of the namespace schema compatibility
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<string> GetSchemaCompatibilityStrategyAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetSchemaCompatibilityStrategyWithHttpMessagesAsync(tenant, namespaceParameter, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update the strategy used to check the compatibility of new schema
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetSchemaCompatibilityStrategy(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, SchemaCompatibilityStrategy strategy)
        {
            operations.SetSchemaCompatibilityStrategyAsync(tenant, namespaceParameter, strategy).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Update the strategy used to check the compatibility of new schema
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetSchemaCompatibilityStrategyAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, SchemaCompatibilityStrategy strategy,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetSchemaCompatibilityStrategyWithHttpMessagesAsync(tenant, namespaceParameter, strategy, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get schema validation enforced flag for namespace.
        /// </summary>
        /// <remarks>
        /// If the flag is set to true, when a producer without a schema attempts to
        /// produce to a topic with schema in this namespace, the producer will be
        /// failed to connect. PLEASE be carefully on using this, since non-java
        /// clients don't support schema.if you enable this setting, it will cause
        /// non-java clients failed to produce.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static bool? GetSchemaValidtionEnforced(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetSchemaValidtionEnforcedAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get schema validation enforced flag for namespace.
        /// </summary>
        /// <remarks>
        /// If the flag is set to true, when a producer without a schema attempts to
        /// produce to a topic with schema in this namespace, the producer will be
        /// failed to connect. PLEASE be carefully on using this, since non-java
        /// clients don't support schema.if you enable this setting, it will cause
        /// non-java clients failed to produce.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<bool?> GetSchemaValidtionEnforcedAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetSchemaValidtionEnforcedWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set schema validation enforced flag on namespace.
        /// </summary>
        /// <remarks>
        /// If the flag is set to true, when a producer without a schema attempts to
        /// produce to a topic with schema in this namespace, the producer will be
        /// failed to connect. PLEASE be carefully on using this, since non-java
        /// clients don't support schema.if you enable this setting, it will cause
        /// non-java clients failed to produce.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetSchemaValidtionEnforced(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool forced)
        {
            operations.SetSchemaValidtionEnforcedAsync(tenant, namespaceParameter, forced).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set schema validation enforced flag on namespace.
        /// </summary>
        /// <remarks>
        /// If the flag is set to true, when a producer without a schema attempts to
        /// produce to a topic with schema in this namespace, the producer will be
        /// failed to connect. PLEASE be carefully on using this, since non-java
        /// clients don't support schema.if you enable this setting, it will cause
        /// non-java clients failed to produce.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetSchemaValidtionEnforcedAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, bool forced, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetSchemaValidtionEnforcedWithHttpMessagesAsync(tenant, namespaceParameter, forced, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get subscribe-rate configured for the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static SubscribeRate GetSubscribeRate(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetSubscribeRateAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get subscribe-rate configured for the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<SubscribeRate> GetSubscribeRateAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetSubscribeRateWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set subscribe-rate throttling for all topics of the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetSubscribeRate(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, SubscribeRate rate)
        {
            operations.SetSubscribeRateAsync(tenant, namespaceParameter, rate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set subscribe-rate throttling for all topics of the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetSubscribeRateAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, SubscribeRate rate,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetSubscribeRateWithHttpMessagesAsync(tenant, namespaceParameter, rate, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Set a subscription auth mode for all the topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetSubscriptionAuthMode(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, SubscriptionAuthMode subscriptionAuthMode)
        {
            operations.SetSubscriptionAuthModeAsync(tenant, namespaceParameter, subscriptionAuthMode).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Set a subscription auth mode for all the topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetSubscriptionAuthModeAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, SubscriptionAuthMode subscriptionAuthMode,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetSubscriptionAuthModeWithHttpMessagesAsync(tenant, namespaceParameter, subscriptionAuthMode, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get Subscription dispatch-rate configured for the namespace, -1 represents
        /// not configured yet
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static DispatchRate GetSubscriptionDispatchRate(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetSubscriptionDispatchRateAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Subscription dispatch-rate configured for the namespace, -1 represents
        /// not configured yet
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<DispatchRate> GetSubscriptionDispatchRateAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetSubscriptionDispatchRateWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set Subscription dispatch-rate throttling for all topics of the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetSubscriptionDispatchRate(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, DispatchRate rate)
        {
            operations.SetSubscriptionDispatchRateAsync(tenant, namespaceParameter, rate).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set Subscription dispatch-rate throttling for all topics of the namespace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetSubscriptionDispatchRateAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, DispatchRate rate,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetSubscriptionDispatchRateWithHttpMessagesAsync(tenant, namespaceParameter, rate, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the list of all the topics under a certain namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='mode'>
        /// Possible values include: 'PERSISTENT', 'NON_PERSISTENT', 'ALL'
        /// </param>
        public static IList<string> GetTopics(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string mode = default(string))
        {
            return operations.GetTopicsAsync(tenant, namespaceParameter, mode).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of all the topics under a certain namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='mode'>
        /// Possible values include: 'PERSISTENT', 'NON_PERSISTENT', 'ALL'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetTopicsAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string mode = default(string),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetTopicsWithHttpMessagesAsync(tenant, namespaceParameter, mode, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Unload namespace
        /// </summary>
        /// <remarks>
        /// Unload an active namespace from the current broker serving it. Performing
        /// this operation will let the brokerremoves all producers, consumers, and
        /// connections using this namespace, and close all topics (includingtheir
        /// persistent store). During that operation, the namespace is marked as
        /// tentatively unavailable until thebroker completes the unloading action.
        /// This operation requires strictly super user privileges, since it
        /// wouldresult in non-persistent message loss and unexpected connection
        /// closure to the clients.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void UnloadNamespace(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            operations.UnloadNamespaceAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Unload namespace
        /// </summary>
        /// <remarks>
        /// Unload an active namespace from the current broker serving it. Performing
        /// this operation will let the brokerremoves all producers, consumers, and
        /// connections using this namespace, and close all topics (includingtheir
        /// persistent store). During that operation, the namespace is marked as
        /// tentatively unavailable until thebroker completes the unloading action.
        /// This operation requires strictly super user privileges, since it
        /// wouldresult in non-persistent message loss and unexpected connection
        /// closure to the clients.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UnloadNamespaceAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.UnloadNamespaceWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Unsubscribes the given subscription on all topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='cluster'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='subscription'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void UnsubscribeNamespace(this IPulsarAdminRESTAPI operations, string tenant, string cluster,
            string namespaceParameter, string subscription, bool? authoritative = false)
        {
            operations.UnsubscribeNamespaceAsync(tenant, cluster, namespaceParameter, subscription, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Unsubscribes the given subscription on all topics on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='cluster'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='subscription'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UnsubscribeNamespaceAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string cluster, string namespaceParameter, string subscription, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.UnsubscribeNamespaceWithHttpMessagesAsync(tenant, cluster, namespaceParameter,
                subscription, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete a namespace bundle and all the topics under it.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void DeleteNamespaceBundle(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle, bool? authoritative = false)
        {
            operations.DeleteNamespaceBundleAsync(tenant, namespaceParameter, bundle, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Delete a namespace bundle and all the topics under it.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteNamespaceBundleAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .DeleteNamespaceBundleWithHttpMessagesAsync(tenant, namespaceParameter, bundle, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Clear backlog for all topics on a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void ClearNamespaceBundleBacklog(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle, bool? authoritative = false)
        {
            operations.ClearNamespaceBundleBacklogAsync(tenant, namespaceParameter, bundle, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Clear backlog for all topics on a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ClearNamespaceBundleBacklogAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .ClearNamespaceBundleBacklogWithHttpMessagesAsync(tenant, namespaceParameter, bundle, authoritative,
                    null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Clear backlog for a given subscription on all topics on a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='subscription'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void ClearNamespaceBundleBacklogForSubscription(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string subscription, string bundle, bool? authoritative = false)
        {
            operations.ClearNamespaceBundleBacklogForSubscriptionAsync(tenant, namespaceParameter, subscription, bundle,
                authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Clear backlog for a given subscription on all topics on a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='subscription'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ClearNamespaceBundleBacklogForSubscriptionAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string subscription, string bundle, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ClearNamespaceBundleBacklogForSubscriptionWithHttpMessagesAsync(tenant,
                    namespaceParameter, subscription, bundle, authoritative, null, cancellationToken)
                .ConfigureAwait(false))
                .Dispose();
        }

        /// <summary>
        /// Split a namespace bundle
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='unload'>
        /// </param>
        public static void SplitNamespaceBundle(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle, string algo, bool? authoritative = false, bool? unload = false)
        {
            operations.SplitNamespaceBundleAsync(tenant, namespaceParameter, bundle, algo, authoritative, unload)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Split a namespace bundle
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='unload'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SplitNamespaceBundleAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle, string algo, bool? authoritative = false, bool? unload = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SplitNamespaceBundleWithHttpMessagesAsync(tenant, namespaceParameter, bundle, algo,
                authoritative, unload, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Unload a namespace bundle
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void UnloadNamespaceBundle(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle, bool? authoritative = false)
        {
            operations.UnloadNamespaceBundleAsync(tenant, namespaceParameter, bundle, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Unload a namespace bundle
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UnloadNamespaceBundleAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .UnloadNamespaceBundleWithHttpMessagesAsync(tenant, namespaceParameter, bundle, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Unsubscribes the given subscription on all topics on a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='subscription'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static void UnsubscribeNamespaceBundle(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string subscription, string bundle, bool? authoritative = false)
        {
            operations.UnsubscribeNamespaceBundleAsync(tenant, namespaceParameter, subscription, bundle, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Unsubscribes the given subscription on all topics on a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='subscription'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UnsubscribeNamespaceBundleAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string subscription, string bundle, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.UnsubscribeNamespaceBundleWithHttpMessagesAsync(tenant, namespaceParameter, subscription,
                bundle, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the list of non-persistent topics under a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        public static IList<string> GetList(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetListAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of non-persistent topics under a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetListAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetListWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the list of partitioned topics under a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        public static IList<string> GetPartitionedTopicList(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetPartitionedTopicListAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of partitioned topics under a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetPartitionedTopicListAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetPartitionedTopicListWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the list of non-persistent topics under a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='bundle'>
        /// Bundle range of a topic
        /// </param>
        public static IList<string> GetListFromBundle(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle)
        {
            return operations.GetListFromBundleAsync(tenant, namespaceParameter, bundle).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of non-persistent topics under a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='bundle'>
        /// Bundle range of a topic
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetListFromBundleAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string bundle,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetListFromBundleWithHttpMessagesAsync(tenant, namespaceParameter, bundle, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Create a non-partitioned topic.
        /// </summary>
        /// <remarks>
        /// This is the only REST endpoint from which non-partitioned topics could be
        /// created.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void CreateNonPartitionedTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            operations.CreateNonPartitionedTopicAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Create a non-partitioned topic.
        /// </summary>
        /// <remarks>
        /// This is the only REST endpoint from which non-partitioned topics could be
        /// created.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreateNonPartitionedTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .CreateNonPartitionedTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete a topic.
        /// </summary>
        /// <remarks>
        /// The topic cannot be deleted if delete is not forcefully and there's any
        /// active subscription or producer connected to the it. Force delete ignores
        /// connected clients and deletes topic by explicitly closing them.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='force'>
        /// Stop all producer/consumer/replicator and delete topic forcefully
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void DeleteTopic(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? force = false, bool? authoritative = false)
        {
            operations.DeleteTopicAsync(tenant, namespaceParameter, topic, force, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Delete a topic.
        /// </summary>
        /// <remarks>
        /// The topic cannot be deleted if delete is not forcefully and there's any
        /// active subscription or producer connected to the it. Force delete ignores
        /// connected clients and deletes topic by explicitly closing them.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='force'>
        /// Stop all producer/consumer/replicator and delete topic forcefully
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? force = false, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .DeleteTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, force, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Expiry messages on all subscriptions of topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='expireTimeInSeconds'>
        /// Expires beyond the specified number of seconds
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void ExpireMessagesForAllSubscriptions(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int expireTimeInSeconds, bool? authoritative = false)
        {
            operations.ExpireMessagesForAllSubscriptionsAsync(tenant, namespaceParameter, topic, expireTimeInSeconds,
                authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Expiry messages on all subscriptions of topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='expireTimeInSeconds'>
        /// Expires beyond the specified number of seconds
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ExpireMessagesForAllSubscriptionsAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, int expireTimeInSeconds,
            bool? authoritative = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ExpireMessagesForAllSubscriptionsWithHttpMessagesAsync(tenant, namespaceParameter, topic,
                expireTimeInSeconds, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get estimated backlog for offline topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static PersistentOfflineTopicStats GetBacklog(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetBacklogAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get estimated backlog for offline topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<PersistentOfflineTopicStats> GetBacklogAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBacklogWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the status of a compaction operation for a topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static LongRunningProcessStatus CompactionStatus(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.CompactionStatusAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get the status of a compaction operation for a topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<LongRunningProcessStatus> CompactionStatusAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .CompactionStatusWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Trigger a compaction operation on a topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void Compact(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? authoritative = false)
        {
            operations.CompactAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Trigger a compaction operation on a topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CompactAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .CompactWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the internal stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        public static void GetManagedLedgerInfo(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic)
        {
            operations.GetManagedLedgerInfoAsync(tenant, namespaceParameter, topic).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the internal stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GetManagedLedgerInfoAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .GetManagedLedgerInfoWithHttpMessagesAsync(tenant, namespaceParameter, topic, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the internal stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static PersistentTopicInternalStats GetInternalStats(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetInternalStatsAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get the internal stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<PersistentTopicInternalStats> GetInternalStatsAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, string topic,
            bool? authoritative = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetInternalStatsWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return the last commit message id of topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static object GetLastMessageId(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetLastMessageIdAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Return the last commit message id of topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<object> GetLastMessageIdAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetLastMessageIdWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Offload a prefix of a topic to long term storage
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static OffloadProcessStatus OffloadStatus(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.OffloadStatusAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Offload a prefix of a topic to long term storage
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<OffloadProcessStatus> OffloadStatusAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .OffloadStatusWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Offload a prefix of a topic to long term storage
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void TriggerOffload(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? authoritative = false)
        {
            operations.TriggerOffloadAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Offload a prefix of a topic to long term storage
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task TriggerOffloadAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .TriggerOffloadWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the stats for the partitioned topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='perPartition'>
        /// Get per partition stats
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void GetPartitionedStats(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? perPartition = true, bool? authoritative = false)
        {
            operations.GetPartitionedStatsAsync(tenant, namespaceParameter, topic, perPartition, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the stats for the partitioned topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='perPartition'>
        /// Get per partition stats
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GetPartitionedStatsAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? perPartition = true, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.GetPartitionedStatsWithHttpMessagesAsync(tenant, namespaceParameter, topic, perPartition,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get partitioned topic metadata.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='checkAllowAutoCreation'>
        /// Is check configuration required to automatically create topic
        /// </param>
        public static PartitionedTopicMetadata GetPartitionedMetadata(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            bool? checkAllowAutoCreation = false)
        {
            return operations
                .GetPartitionedMetadataAsync(tenant, namespaceParameter, topic, authoritative, checkAllowAutoCreation)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get partitioned topic metadata.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='checkAllowAutoCreation'>
        /// Is check configuration required to automatically create topic
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<PartitionedTopicMetadata> GetPartitionedMetadataAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, string topic,
            bool? authoritative = false, bool? checkAllowAutoCreation = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetPartitionedMetadataWithHttpMessagesAsync(tenant,
                    namespaceParameter, topic, authoritative, checkAllowAutoCreation, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Increment partitons of an existing partitioned topic.
        /// </summary>
        /// <remarks>
        /// It only increments partitions of existing non-global partitioned-topic
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='body'>
        /// The number of partitions for the topic
        /// </param>
        /// <param name='updateLocalTopicOnly'>
        /// </param>
        public static void UpdatePartitionedTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int body, bool? updateLocalTopicOnly = false)
        {
            operations.UpdatePartitionedTopicAsync(tenant, namespaceParameter, topic, body, updateLocalTopicOnly)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Increment partitons of an existing partitioned topic.
        /// </summary>
        /// <remarks>
        /// It only increments partitions of existing non-global partitioned-topic
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='body'>
        /// The number of partitions for the topic
        /// </param>
        /// <param name='updateLocalTopicOnly'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UpdatePartitionedTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int body, bool? updateLocalTopicOnly = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.UpdatePartitionedTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, body,
                updateLocalTopicOnly, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Create a partitioned topic.
        /// </summary>
        /// <remarks>
        /// It needs to be called before creating a producer on a partitioned topic.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='body'>
        /// The number of partitions for the topic
        /// </param>
        public static void CreatePartitionedTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int body)
        {
            operations.CreatePartitionedTopicAsync(tenant, namespaceParameter, topic, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a partitioned topic.
        /// </summary>
        /// <remarks>
        /// It needs to be called before creating a producer on a partitioned topic.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='body'>
        /// The number of partitions for the topic
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreatePartitionedTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int body,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .CreatePartitionedTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, body, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete a partitioned topic.
        /// </summary>
        /// <remarks>
        /// It will also delete all the partitions of the topic if it exists.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='force'>
        /// Stop all producer/consumer/replicator and delete topic forcefully
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void DeletePartitionedTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? force = false, bool? authoritative = false)
        {
            operations.DeletePartitionedTopicAsync(tenant, namespaceParameter, topic, force, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Delete a partitioned topic.
        /// </summary>
        /// <remarks>
        /// It will also delete all the partitions of the topic if it exists.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='force'>
        /// Stop all producer/consumer/replicator and delete topic forcefully
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeletePartitionedTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? force = false, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeletePartitionedTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, force,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get permissions on a topic.
        /// </summary>
        /// <remarks>
        /// Retrieve the effective permissions for a topic. These permissions are
        /// defined by the permissions set at thenamespace level combined (union) with
        /// any eventual specific permission set on the topic.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        public static IDictionary<string, object> GetPermissionsOnTopic(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic)
        {
            return operations.GetPermissionsOnTopicAsync(tenant, namespaceParameter, topic).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get permissions on a topic.
        /// </summary>
        /// <remarks>
        /// Retrieve the effective permissions for a topic. These permissions are
        /// defined by the permissions set at thenamespace level combined (union) with
        /// any eventual specific permission set on the topic.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, object>> GetPermissionsOnTopicAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, string topic,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetPermissionsOnTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Grant a new permission to a role on a single topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='role'>
        /// Client role to which grant permissions
        /// </param>
        /// <param name='body'>
        /// Actions to be granted (produce,functions,consume)
        /// </param>
        public static void GrantPermissionsOnTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string role, IList<string> body = default(IList<string>))
        {
            operations.GrantPermissionsOnTopicAsync(tenant, namespaceParameter, topic, role, body).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Grant a new permission to a role on a single topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='role'>
        /// Client role to which grant permissions
        /// </param>
        /// <param name='body'>
        /// Actions to be granted (produce,functions,consume)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GrantPermissionsOnTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string role, IList<string> body = default(IList<string>),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .GrantPermissionsOnTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, role, body, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Revoke permissions on a topic.
        /// </summary>
        /// <remarks>
        /// Revoke permissions to a role on a single topic. If the permission was not
        /// set at the topiclevel, but rather at the namespace level, this operation
        /// will return an error (HTTP status code 412).
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='role'>
        /// Client role to which grant permissions
        /// </param>
        public static void RevokePermissionsOnTopic(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string role)
        {
            operations.RevokePermissionsOnTopicAsync(tenant, namespaceParameter, topic, role).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Revoke permissions on a topic.
        /// </summary>
        /// <remarks>
        /// Revoke permissions to a role on a single topic. If the permission was not
        /// set at the topiclevel, but rather at the namespace level, this operation
        /// will return an error (HTTP status code 412).
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='role'>
        /// Client role to which grant permissions
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task RevokePermissionsOnTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string role,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .RevokePermissionsOnTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, role, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static TopicStats GetStats(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? authoritative = false)
        {
            return operations.GetStatsAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<TopicStats> GetStatsAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetStatsWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Delete a subscription.
        /// </summary>
        /// <remarks>
        /// There should not be any active consumers on the subscription.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to be deleted
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void DeleteSubscription(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false)
        {
            operations.DeleteSubscriptionAsync(tenant, namespaceParameter, topic, subName, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Delete a subscription.
        /// </summary>
        /// <remarks>
        /// There should not be any active consumers on the subscription.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to be deleted
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteSubscriptionAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeleteSubscriptionWithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Expiry messages on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to be Expiry messages on
        /// </param>
        /// <param name='expireTimeInSeconds'>
        /// Expires beyond the specified number of seconds
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void ExpireTopicMessages(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int expireTimeInSeconds,
            bool? authoritative = false)
        {
            operations.ExpireTopicMessagesAsync(tenant, namespaceParameter, topic, subName, expireTimeInSeconds,
                authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Expiry messages on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to be Expiry messages on
        /// </param>
        /// <param name='expireTimeInSeconds'>
        /// Expires beyond the specified number of seconds
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ExpireTopicMessagesAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int expireTimeInSeconds,
            bool? authoritative = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ExpireTopicMessagesWithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                expireTimeInSeconds, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Peek nth message on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscribed message expired
        /// </param>
        /// <param name='messagePosition'>
        /// The number of messages (default 1)
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void PeekNthMessage(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, string subName, int messagePosition, bool? authoritative = false)
        {
            operations.PeekNthMessageAsync(tenant, namespaceParameter, topic, subName, messagePosition, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Peek nth message on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscribed message expired
        /// </param>
        /// <param name='messagePosition'>
        /// The number of messages (default 1)
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task PeekNthMessageAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int messagePosition, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.PeekNthMessageWithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                messagePosition, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Reset subscription to message position closest to given position.
        /// </summary>
        /// <remarks>
        /// It fence cursor and disconnects all active consumers before reseting
        /// cursor.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to reset position on
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='messageId'>
        /// messageId to reset back to (ledgerId:entryId)
        /// </param>
        public static void ResetCursorOnPosition(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false,
            MessageIdImpl messageId = default(MessageIdImpl))
        {
            operations.ResetCursorOnPositionAsync(tenant, namespaceParameter, topic, subName, authoritative, messageId)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Reset subscription to message position closest to given position.
        /// </summary>
        /// <remarks>
        /// It fence cursor and disconnects all active consumers before reseting
        /// cursor.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to reset position on
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='messageId'>
        /// messageId to reset back to (ledgerId:entryId)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ResetCursorOnPositionAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false,
            MessageIdImpl messageId = default(MessageIdImpl),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ResetCursorOnPositionWithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                authoritative, messageId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Reset subscription to message position closest to absolute timestamp (in
        /// ms).
        /// </summary>
        /// <remarks>
        /// It fence cursor and disconnects all active consumers before reseting
        /// cursor.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to reset position on
        /// </param>
        /// <param name='timestamp'>
        /// time in minutes to reset back to (or minutes, hours,days,weeks eg:100m, 3h,
        /// 2d, 5w)
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void ResetCursor(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, string subName, long timestamp, bool? authoritative = false)
        {
            operations.ResetCursorAsync(tenant, namespaceParameter, topic, subName, timestamp, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Reset subscription to message position closest to absolute timestamp (in
        /// ms).
        /// </summary>
        /// <remarks>
        /// It fence cursor and disconnects all active consumers before reseting
        /// cursor.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to reset position on
        /// </param>
        /// <param name='timestamp'>
        /// time in minutes to reset back to (or minutes, hours,days,weeks eg:100m, 3h,
        /// 2d, 5w)
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ResetCursorAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, long timestamp, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ResetCursorWithHttpMessagesAsync(tenant, namespaceParameter, topic, subName, timestamp,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Skipping messages on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Name of subscription
        /// </param>
        /// <param name='numMessages'>
        /// The number of messages to skip
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void SkipMessages(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, string subName, int numMessages, bool? authoritative = false)
        {
            operations.SkipMessagesAsync(tenant, namespaceParameter, topic, subName, numMessages, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Skipping messages on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Name of subscription
        /// </param>
        /// <param name='numMessages'>
        /// The number of messages to skip
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SkipMessagesAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int numMessages, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SkipMessagesWithHttpMessagesAsync(tenant, namespaceParameter, topic, subName, numMessages,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Skip all messages on a topic subscription.
        /// </summary>
        /// <remarks>
        /// Completely clears the backlog on the subscription.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Name of subscription
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void SkipAllMessages(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false)
        {
            operations.SkipAllMessagesAsync(tenant, namespaceParameter, topic, subName, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Skip all messages on a topic subscription.
        /// </summary>
        /// <remarks>
        /// Completely clears the backlog on the subscription.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Name of subscription
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SkipAllMessagesAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SkipAllMessagesWithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Reset subscription to message position closest to given position.
        /// </summary>
        /// <remarks>
        /// Creates a subscription on the topic at the specified message id
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subscriptionName'>
        /// Subscription to create position on
        /// </param>
        /// <param name='messageId'>
        /// messageId where to create the subscription. It can be 'latest', 'earliest'
        /// or (ledgerId:entryId)
        /// </param>
        /// <param name='replicated'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void CreateSubscription(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subscriptionName, string messageId = "latest",
            bool? replicated = default(bool?))
        {
            operations.CreateSubscriptionAsync(tenant, namespaceParameter, topic, subscriptionName, messageId,
                replicated).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Reset subscription to message position closest to given position.
        /// </summary>
        /// <remarks>
        /// Creates a subscription on the topic at the specified message id
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subscriptionName'>
        /// Subscription to create position on
        /// </param>
        /// <param name='messageId'>
        /// messageId where to create the subscription. It can be 'latest', 'earliest'
        /// or (ledgerId:entryId)
        /// </param>
        /// <param name='replicated'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreateSubscriptionAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subscriptionName, string messageId = "latest",
            bool? replicated = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.CreateSubscriptionWithHttpMessagesAsync(tenant, namespaceParameter, topic,
                subscriptionName, messageId, replicated, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the list of persistent subscriptions for a given topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void GetSubscriptions(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            operations.GetSubscriptionsAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of persistent subscriptions for a given topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GetSubscriptionsAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .GetSubscriptionsWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Terminate a topic. A topic that is terminated will not accept any more
        /// messages to be published and will let consumer to drain existing messages
        /// in backlog
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static object Terminate(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? authoritative = false)
        {
            return operations.TerminateAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Terminate a topic. A topic that is terminated will not accept any more
        /// messages to be published and will let consumer to drain existing messages
        /// in backlog
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<object> TerminateAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .TerminateWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Unload a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void UnloadTopic(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? authoritative = false)
        {
            operations.UnloadTopicAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Unload a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UnloadTopicAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .UnloadTopicWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the list of topics under a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        public static IList<string> GetList1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetList1Async(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of topics under a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetList1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetList1WithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the list of partitioned topics under a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        public static IList<string> GetPartitionedTopicList1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter)
        {
            return operations.GetPartitionedTopicList1Async(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of partitioned topics under a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetPartitionedTopicList1Async(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetPartitionedTopicList1WithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Create a non-partitioned topic.
        /// </summary>
        /// <remarks>
        /// This is the only REST endpoint from which non-partitioned topics could be
        /// created.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void CreateNonPartitionedTopic1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            operations.CreateNonPartitionedTopic1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Create a non-partitioned topic.
        /// </summary>
        /// <remarks>
        /// This is the only REST endpoint from which non-partitioned topics could be
        /// created.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreateNonPartitionedTopic1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .CreateNonPartitionedTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete a topic.
        /// </summary>
        /// <remarks>
        /// The topic cannot be deleted if delete is not forcefully and there's any
        /// active subscription or producer connected to the it. Force delete ignores
        /// connected clients and deletes topic by explicitly closing them.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='force'>
        /// Stop all producer/consumer/replicator and delete topic forcefully
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void DeleteTopic1(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? force = false, bool? authoritative = false)
        {
            operations.DeleteTopic1Async(tenant, namespaceParameter, topic, force, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Delete a topic.
        /// </summary>
        /// <remarks>
        /// The topic cannot be deleted if delete is not forcefully and there's any
        /// active subscription or producer connected to the it. Force delete ignores
        /// connected clients and deletes topic by explicitly closing them.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='force'>
        /// Stop all producer/consumer/replicator and delete topic forcefully
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteTopic1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? force = false, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .DeleteTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, force, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Expiry messages on all subscriptions of topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='expireTimeInSeconds'>
        /// Expires beyond the specified number of seconds
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void ExpireMessagesForAllSubscriptions1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int expireTimeInSeconds, bool? authoritative = false)
        {
            operations.ExpireMessagesForAllSubscriptions1Async(tenant, namespaceParameter, topic, expireTimeInSeconds,
                authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Expiry messages on all subscriptions of topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='expireTimeInSeconds'>
        /// Expires beyond the specified number of seconds
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ExpireMessagesForAllSubscriptions1Async(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, int expireTimeInSeconds,
            bool? authoritative = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ExpireMessagesForAllSubscriptions1WithHttpMessagesAsync(tenant, namespaceParameter, topic,
                expireTimeInSeconds, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get estimated backlog for offline topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static PersistentOfflineTopicStats GetBacklog1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetBacklog1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get estimated backlog for offline topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<PersistentOfflineTopicStats> GetBacklog1Async(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetBacklog1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the status of a compaction operation for a topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static LongRunningProcessStatus CompactionStatus1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.CompactionStatus1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get the status of a compaction operation for a topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<LongRunningProcessStatus> CompactionStatus1Async(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .CompactionStatus1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Trigger a compaction operation on a topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void Compact1(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? authoritative = false)
        {
            operations.Compact1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Trigger a compaction operation on a topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task Compact1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .Compact1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the internal stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        public static void GetManagedLedgerInfo1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic)
        {
            operations.GetManagedLedgerInfo1Async(tenant, namespaceParameter, topic).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the internal stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GetManagedLedgerInfo1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .GetManagedLedgerInfo1WithHttpMessagesAsync(tenant, namespaceParameter, topic, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the internal stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static PersistentTopicInternalStats GetInternalStats1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetInternalStats1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get the internal stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<PersistentTopicInternalStats> GetInternalStats1Async(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, string topic,
            bool? authoritative = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetInternalStats1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return the last commit message id of topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static object GetLastMessageId1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetLastMessageId1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Return the last commit message id of topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<object> GetLastMessageId1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetLastMessageId1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Offload a prefix of a topic to long term storage
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static OffloadProcessStatus OffloadStatus1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.OffloadStatus1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Offload a prefix of a topic to long term storage
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<OffloadProcessStatus> OffloadStatus1Async(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .OffloadStatus1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Offload a prefix of a topic to long term storage
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void TriggerOffload1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            operations.TriggerOffload1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Offload a prefix of a topic to long term storage
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task TriggerOffload1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .TriggerOffload1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the stats for the partitioned topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='perPartition'>
        /// Get per partition stats
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void GetPartitionedStats1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? perPartition = true, bool? authoritative = false)
        {
            operations.GetPartitionedStats1Async(tenant, namespaceParameter, topic, perPartition, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the stats for the partitioned topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='perPartition'>
        /// Get per partition stats
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GetPartitionedStats1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? perPartition = true, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.GetPartitionedStats1WithHttpMessagesAsync(tenant, namespaceParameter, topic, perPartition,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get partitioned topic metadata.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='checkAllowAutoCreation'>
        /// Is check configuration required to automatically create topic
        /// </param>
        public static PartitionedTopicMetadata GetPartitionedMetadata1(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            bool? checkAllowAutoCreation = false)
        {
            return operations
                .GetPartitionedMetadata1Async(tenant, namespaceParameter, topic, authoritative, checkAllowAutoCreation)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get partitioned topic metadata.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='checkAllowAutoCreation'>
        /// Is check configuration required to automatically create topic
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<PartitionedTopicMetadata> GetPartitionedMetadata1Async(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, string topic,
            bool? authoritative = false, bool? checkAllowAutoCreation = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetPartitionedMetadata1WithHttpMessagesAsync(tenant,
                    namespaceParameter, topic, authoritative, checkAllowAutoCreation, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Increment partitons of an existing partitioned topic.
        /// </summary>
        /// <remarks>
        /// It only increments partitions of existing non-global partitioned-topic
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='body'>
        /// The number of partitions for the topic
        /// </param>
        /// <param name='updateLocalTopicOnly'>
        /// </param>
        public static void UpdatePartitionedTopic1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int body, bool? updateLocalTopicOnly = false)
        {
            operations.UpdatePartitionedTopic1Async(tenant, namespaceParameter, topic, body, updateLocalTopicOnly)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Increment partitons of an existing partitioned topic.
        /// </summary>
        /// <remarks>
        /// It only increments partitions of existing non-global partitioned-topic
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='body'>
        /// The number of partitions for the topic
        /// </param>
        /// <param name='updateLocalTopicOnly'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UpdatePartitionedTopic1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int body, bool? updateLocalTopicOnly = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.UpdatePartitionedTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, body,
                updateLocalTopicOnly, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Create a partitioned topic.
        /// </summary>
        /// <remarks>
        /// It needs to be called before creating a producer on a partitioned topic.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='body'>
        /// The number of partitions for the topic
        /// </param>
        public static void CreatePartitionedTopic1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int body)
        {
            operations.CreatePartitionedTopic1Async(tenant, namespaceParameter, topic, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a partitioned topic.
        /// </summary>
        /// <remarks>
        /// It needs to be called before creating a producer on a partitioned topic.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='body'>
        /// The number of partitions for the topic
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreatePartitionedTopic1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, int body,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .CreatePartitionedTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, body, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete a partitioned topic.
        /// </summary>
        /// <remarks>
        /// It will also delete all the partitions of the topic if it exists.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='force'>
        /// Stop all producer/consumer/replicator and delete topic forcefully
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void DeletePartitionedTopic1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? force = false, bool? authoritative = false)
        {
            operations.DeletePartitionedTopic1Async(tenant, namespaceParameter, topic, force, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a partitioned topic.
        /// </summary>
        /// <remarks>
        /// It will also delete all the partitions of the topic if it exists.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='force'>
        /// Stop all producer/consumer/replicator and delete topic forcefully
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeletePartitionedTopic1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? force = false, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeletePartitionedTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, force,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get permissions on a topic.
        /// </summary>
        /// <remarks>
        /// Retrieve the effective permissions for a topic. These permissions are
        /// defined by the permissions set at thenamespace level combined (union) with
        /// any eventual specific permission set on the topic.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        public static IDictionary<string, object> GetPermissionsOnTopic1(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic)
        {
            return operations.GetPermissionsOnTopic1Async(tenant, namespaceParameter, topic).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get permissions on a topic.
        /// </summary>
        /// <remarks>
        /// Retrieve the effective permissions for a topic. These permissions are
        /// defined by the permissions set at thenamespace level combined (union) with
        /// any eventual specific permission set on the topic.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IDictionary<string, object>> GetPermissionsOnTopic1Async(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, string topic,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetPermissionsOnTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Grant a new permission to a role on a single topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='role'>
        /// Client role to which grant permissions
        /// </param>
        /// <param name='body'>
        /// Actions to be granted (produce,functions,consume)
        /// </param>
        public static void GrantPermissionsOnTopic1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string role, IList<string> body = default(IList<string>))
        {
            operations.GrantPermissionsOnTopic1Async(tenant, namespaceParameter, topic, role, body).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Grant a new permission to a role on a single topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='role'>
        /// Client role to which grant permissions
        /// </param>
        /// <param name='body'>
        /// Actions to be granted (produce,functions,consume)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GrantPermissionsOnTopic1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string role, IList<string> body = default(IList<string>),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .GrantPermissionsOnTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, role, body, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Revoke permissions on a topic.
        /// </summary>
        /// <remarks>
        /// Revoke permissions to a role on a single topic. If the permission was not
        /// set at the topiclevel, but rather at the namespace level, this operation
        /// will return an error (HTTP status code 412).
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='role'>
        /// Client role to which grant permissions
        /// </param>
        public static void RevokePermissionsOnTopic1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string role)
        {
            operations.RevokePermissionsOnTopic1Async(tenant, namespaceParameter, topic, role).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Revoke permissions on a topic.
        /// </summary>
        /// <remarks>
        /// Revoke permissions to a role on a single topic. If the permission was not
        /// set at the topiclevel, but rather at the namespace level, this operation
        /// will return an error (HTTP status code 412).
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='role'>
        /// Client role to which grant permissions
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task RevokePermissionsOnTopic1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string role,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .RevokePermissionsOnTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, role, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static TopicStats GetStats1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetStats1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the stats for the topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<TopicStats> GetStats1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetStats1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Delete a subscription.
        /// </summary>
        /// <remarks>
        /// There should not be any active consumers on the subscription.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to be deleted
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void DeleteSubscription1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false)
        {
            operations.DeleteSubscription1Async(tenant, namespaceParameter, topic, subName, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Delete a subscription.
        /// </summary>
        /// <remarks>
        /// There should not be any active consumers on the subscription.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to be deleted
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteSubscription1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeleteSubscription1WithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Expiry messages on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to be Expiry messages on
        /// </param>
        /// <param name='expireTimeInSeconds'>
        /// Expires beyond the specified number of seconds
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void ExpireTopicMessages1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int expireTimeInSeconds,
            bool? authoritative = false)
        {
            operations.ExpireTopicMessages1Async(tenant, namespaceParameter, topic, subName, expireTimeInSeconds,
                authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Expiry messages on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to be Expiry messages on
        /// </param>
        /// <param name='expireTimeInSeconds'>
        /// Expires beyond the specified number of seconds
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ExpireTopicMessages1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int expireTimeInSeconds,
            bool? authoritative = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ExpireTopicMessages1WithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                expireTimeInSeconds, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Peek nth message on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscribed message expired
        /// </param>
        /// <param name='messagePosition'>
        /// The number of messages (default 1)
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void PeekNthMessage1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int messagePosition, bool? authoritative = false)
        {
            operations.PeekNthMessage1Async(tenant, namespaceParameter, topic, subName, messagePosition, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Peek nth message on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscribed message expired
        /// </param>
        /// <param name='messagePosition'>
        /// The number of messages (default 1)
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task PeekNthMessage1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int messagePosition, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.PeekNthMessage1WithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                messagePosition, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Reset subscription to message position closest to given position.
        /// </summary>
        /// <remarks>
        /// It fence cursor and disconnects all active consumers before reseting
        /// cursor.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to reset position on
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='messageId'>
        /// messageId to reset back to (ledgerId:entryId)
        /// </param>
        public static void ResetCursorOnPosition1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false,
            MessageIdImpl messageId = default(MessageIdImpl))
        {
            operations.ResetCursorOnPosition1Async(tenant, namespaceParameter, topic, subName, authoritative, messageId)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Reset subscription to message position closest to given position.
        /// </summary>
        /// <remarks>
        /// It fence cursor and disconnects all active consumers before reseting
        /// cursor.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to reset position on
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='messageId'>
        /// messageId to reset back to (ledgerId:entryId)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ResetCursorOnPosition1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false,
            MessageIdImpl messageId = default(MessageIdImpl),
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ResetCursorOnPosition1WithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                authoritative, messageId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Reset subscription to message position closest to absolute timestamp (in
        /// ms).
        /// </summary>
        /// <remarks>
        /// It fence cursor and disconnects all active consumers before reseting
        /// cursor.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to reset position on
        /// </param>
        /// <param name='timestamp'>
        /// time in minutes to reset back to (or minutes, hours,days,weeks eg:100m, 3h,
        /// 2d, 5w)
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void ResetCursor1(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, string subName, long timestamp, bool? authoritative = false)
        {
            operations.ResetCursor1Async(tenant, namespaceParameter, topic, subName, timestamp, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Reset subscription to message position closest to absolute timestamp (in
        /// ms).
        /// </summary>
        /// <remarks>
        /// It fence cursor and disconnects all active consumers before reseting
        /// cursor.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Subscription to reset position on
        /// </param>
        /// <param name='timestamp'>
        /// time in minutes to reset back to (or minutes, hours,days,weeks eg:100m, 3h,
        /// 2d, 5w)
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ResetCursor1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, long timestamp, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ResetCursor1WithHttpMessagesAsync(tenant, namespaceParameter, topic, subName, timestamp,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Skipping messages on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Name of subscription
        /// </param>
        /// <param name='numMessages'>
        /// The number of messages to skip
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void SkipMessages1(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, string subName, int numMessages, bool? authoritative = false)
        {
            operations.SkipMessages1Async(tenant, namespaceParameter, topic, subName, numMessages, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Skipping messages on a topic subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Name of subscription
        /// </param>
        /// <param name='numMessages'>
        /// The number of messages to skip
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SkipMessages1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, int numMessages, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SkipMessages1WithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                numMessages, authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Skip all messages on a topic subscription.
        /// </summary>
        /// <remarks>
        /// Completely clears the backlog on the subscription.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Name of subscription
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void SkipAllMessages1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false)
        {
            operations.SkipAllMessages1Async(tenant, namespaceParameter, topic, subName, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Skip all messages on a topic subscription.
        /// </summary>
        /// <remarks>
        /// Completely clears the backlog on the subscription.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subName'>
        /// Name of subscription
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SkipAllMessages1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subName, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SkipAllMessages1WithHttpMessagesAsync(tenant, namespaceParameter, topic, subName,
                authoritative, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Reset subscription to message position closest to given position.
        /// </summary>
        /// <remarks>
        /// Creates a subscription on the topic at the specified message id
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subscriptionName'>
        /// Subscription to create position on
        /// </param>
        /// <param name='messageId'>
        /// messageId where to create the subscription. It can be 'latest', 'earliest'
        /// or (ledgerId:entryId)
        /// </param>
        /// <param name='replicated'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void CreateSubscription1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subscriptionName, string messageId = "latest",
            bool? replicated = default(bool?))
        {
            operations.CreateSubscription1Async(tenant, namespaceParameter, topic, subscriptionName, messageId,
                replicated).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Reset subscription to message position closest to given position.
        /// </summary>
        /// <remarks>
        /// Creates a subscription on the topic at the specified message id
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='subscriptionName'>
        /// Subscription to create position on
        /// </param>
        /// <param name='messageId'>
        /// messageId where to create the subscription. It can be 'latest', 'earliest'
        /// or (ledgerId:entryId)
        /// </param>
        /// <param name='replicated'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreateSubscription1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string subscriptionName, string messageId = "latest",
            bool? replicated = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.CreateSubscription1WithHttpMessagesAsync(tenant, namespaceParameter, topic,
                subscriptionName, messageId, replicated, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the list of persistent subscriptions for a given topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void GetSubscriptions1(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            operations.GetSubscriptions1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get the list of persistent subscriptions for a given topic.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task GetSubscriptions1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .GetSubscriptions1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Terminate a topic. A topic that is terminated will not accept any more
        /// messages to be published and will let consumer to drain existing messages
        /// in backlog
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static object Terminate1(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? authoritative = false)
        {
            return operations.Terminate1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Terminate a topic. A topic that is terminated will not accept any more
        /// messages to be published and will let consumer to drain existing messages
        /// in backlog
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<object> Terminate1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .Terminate1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Unload a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        public static void UnloadTopic1(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter,
            string topic, bool? authoritative = false)
        {
            operations.UnloadTopic1Async(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Unload a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// Specify the tenant
        /// </param>
        /// <param name='namespaceParameter'>
        /// Specify the namespace
        /// </param>
        /// <param name='topic'>
        /// Specify topic name
        /// </param>
        /// <param name='authoritative'>
        /// Is authentication required to perform this operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UnloadTopic1Async(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .UnloadTopic1WithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the default quota
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IList<string> GetDefaultResourceQuota(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetDefaultResourceQuotaAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the default quota
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetDefaultResourceQuotaAsync(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetDefaultResourceQuotaWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set the default quota
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IList<string> SetDefaultResourceQuota(this IPulsarAdminRESTAPI operations, ResourceQuota quota)
        {
            return operations.SetDefaultResourceQuotaAsync(quota).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set the default quota
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> SetDefaultResourceQuotaAsync(this IPulsarAdminRESTAPI operations,
            ResourceQuota quota, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .SetDefaultResourceQuotaWithHttpMessagesAsync(quota, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get resource quota of a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        public static ResourceQuota GetNamespaceBundleResourceQuota(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle)
        {
            return operations.GetNamespaceBundleResourceQuotaAsync(tenant, namespaceParameter, bundle).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get resource quota of a namespace bundle.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<ResourceQuota> GetNamespaceBundleResourceQuotaAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, string bundle,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetNamespaceBundleResourceQuotaWithHttpMessagesAsync(tenant, namespaceParameter, bundle, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set resource quota on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        public static void SetNamespaceBundleResourceQuota(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle)
        {
            operations.SetNamespaceBundleResourceQuotaAsync(tenant, namespaceParameter, bundle).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Set resource quota on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetNamespaceBundleResourceQuotaAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string bundle,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetNamespaceBundleResourceQuotaWithHttpMessagesAsync(tenant, namespaceParameter, bundle, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Remove resource quota for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        public static void RemoveNamespaceBundleResourceQuota(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string bundle)
        {
            operations.RemoveNamespaceBundleResourceQuotaAsync(tenant, namespaceParameter, bundle).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Remove resource quota for a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='bundle'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task RemoveNamespaceBundleResourceQuotaAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string bundle,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .RemoveNamespaceBundleResourceQuotaWithHttpMessagesAsync(tenant, namespaceParameter, bundle, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// test the schema compatibility
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='body'>
        /// A JSON value presenting a schema playload. An example of the expected
        /// schema can be found down here.
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static IsCompatibilityResponse TestCompatibility(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, PostSchemaPayload body = default(PostSchemaPayload),
            bool? authoritative = false)
        {
            return operations.TestCompatibilityAsync(tenant, namespaceParameter, topic, body, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// test the schema compatibility
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='body'>
        /// A JSON value presenting a schema playload. An example of the expected
        /// schema can be found down here.
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IsCompatibilityResponse> TestCompatibilityAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, PostSchemaPayload body = default(PostSchemaPayload),
            bool? authoritative = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .TestCompatibilityWithHttpMessagesAsync(tenant, namespaceParameter, topic, body, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the schema of a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static GetSchemaResponse GetSchema(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetSchemaAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the schema of a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<GetSchemaResponse> GetSchemaAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetSchemaWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update the schema of a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='body'>
        /// A JSON value presenting a schema playload. An example of the expected
        /// schema can be found down here.
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static PostSchemaResponse PostSchema(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, PostSchemaPayload body, bool? authoritative = false)
        {
            return operations.PostSchemaAsync(tenant, namespaceParameter, topic, body, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Update the schema of a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='body'>
        /// A JSON value presenting a schema playload. An example of the expected
        /// schema can be found down here.
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<PostSchemaResponse> PostSchemaAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, PostSchemaPayload body, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .PostSchemaWithHttpMessagesAsync(tenant, namespaceParameter, topic, body, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Delete the schema of a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static DeleteSchemaResponse DeleteSchema(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.DeleteSchemaAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Delete the schema of a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<DeleteSchemaResponse> DeleteSchemaAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .DeleteSchemaWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the schema of a topic at a given version
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='version'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static GetSchemaResponse GetSchemaVersion(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, string version, bool? authoritative = false)
        {
            return operations.GetSchemaVersionAsync(tenant, namespaceParameter, topic, version, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the schema of a topic at a given version
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='version'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<GetSchemaResponse> GetSchemaVersionAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, string version, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetSchema1WithHttpMessagesAsync(tenant, namespaceParameter, topic,
                version, authoritative, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the all schemas of a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static GetAllVersionsSchemaResponse GetAllSchemas(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, bool? authoritative = false)
        {
            return operations.GetAllSchemasAsync(tenant, namespaceParameter, topic, authoritative).GetAwaiter()
                .GetResult();
        }

        /// <summary>
        /// Get the all schemas of a topic
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<GetAllVersionsSchemaResponse> GetAllSchemasAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, bool? authoritative = false,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetAllSchemasWithHttpMessagesAsync(tenant, namespaceParameter, topic, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// get the version of the schema
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='body'>
        /// A JSON value presenting a schema playload. An example of the expected
        /// schema can be found down here.
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        public static LongSchemaVersion GetVersionBySchema(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, string topic, PostSchemaPayload body = default(PostSchemaPayload),
            bool? authoritative = false)
        {
            return operations.GetVersionBySchemaAsync(tenant, namespaceParameter, topic, body, authoritative)
                .GetAwaiter().GetResult();
        }

        /// <summary>
        /// get the version of the schema
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='topic'>
        /// </param>
        /// <param name='body'>
        /// A JSON value presenting a schema playload. An example of the expected
        /// schema can be found down here.
        /// </param>
        /// <param name='authoritative'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<LongSchemaVersion> GetVersionBySchemaAsync(this IPulsarAdminRESTAPI operations,
            string tenant, string namespaceParameter, string topic, PostSchemaPayload body = default(PostSchemaPayload),
            bool? authoritative = false, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations
                .GetVersionBySchemaWithHttpMessagesAsync(tenant, namespaceParameter, topic, body, authoritative, null,
                    cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the list of existing tenants.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IList<string> GetTenants(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetTenantsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the list of existing tenants.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<string>> GetTenantsAsync(this IPulsarAdminRESTAPI operations,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetTenantsWithHttpMessagesAsync(null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the admin configuration for a given tenant.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// The tenant name
        /// </param>
        public static TenantInfo GetTenantAdmin(this IPulsarAdminRESTAPI operations, string tenant)
        {
            return operations.GetTenantAdminAsync(tenant).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the admin configuration for a given tenant.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// The tenant name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<TenantInfo> GetTenantAdminAsync(this IPulsarAdminRESTAPI operations, string tenant,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetTenantAdminWithHttpMessagesAsync(tenant, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update the admins for a tenant.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar super-user privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// The tenant name
        /// </param>
        /// <param name='body'>
        /// TenantInfo
        /// </param>
        public static void UpdateTenant(this IPulsarAdminRESTAPI operations, string tenant,
            TenantInfo body = default(TenantInfo))
        {
            operations.UpdateTenantAsync(tenant, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update the admins for a tenant.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar super-user privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// The tenant name
        /// </param>
        /// <param name='body'>
        /// TenantInfo
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task UpdateTenantAsync(this IPulsarAdminRESTAPI operations, string tenant,
            TenantInfo body = default(TenantInfo), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.UpdateTenantWithHttpMessagesAsync(tenant, body, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Create a new tenant.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar super-user privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// The tenant name
        /// </param>
        /// <param name='body'>
        /// TenantInfo
        /// </param>
        public static void CreateTenant(this IPulsarAdminRESTAPI operations, string tenant,
            TenantInfo body = default(TenantInfo))
        {
            operations.CreateTenantAsync(tenant, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a new tenant.
        /// </summary>
        /// <remarks>
        /// This operation requires Pulsar super-user privileges.
        /// </remarks>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// The tenant name
        /// </param>
        /// <param name='body'>
        /// TenantInfo
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task CreateTenantAsync(this IPulsarAdminRESTAPI operations, string tenant,
            TenantInfo body = default(TenantInfo), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.CreateTenantWithHttpMessagesAsync(tenant, body, null, cancellationToken)
                .ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Delete a tenant and all namespaces and topics under it.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// The tenant name
        /// </param>
        public static void DeleteTenant(this IPulsarAdminRESTAPI operations, string tenant)
        {
            operations.DeleteTenantAsync(tenant).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a tenant and all namespaces and topics under it.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// The tenant name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task DeleteTenantAsync(this IPulsarAdminRESTAPI operations, string tenant,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.DeleteTenantWithHttpMessagesAsync(tenant, null, cancellationToken).ConfigureAwait(false))
                .Dispose();
        }

        /// <summary>
        /// Set delayed delivery messages config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetDelayedDeliveryPolicies(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, DelayedDeliveryPolicies policies)
        {
            operations.SetDelayedDeliveryPoliciesAsync(tenant, namespaceParameter, policies).GetAwaiter().GetResult();
        }

        public static async Task SetDelayedDeliveryPoliciesAsync(this IPulsarAdminRESTAPI operations, string tenant,
            string namespaceParameter, DelayedDeliveryPolicies policies,
            CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations
                .SetDelayedDeliveryPoliciesWithHttpMessagesAsync(tenant, namespaceParameter, policies, null,
                    cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Set delayed delivery messages config on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespace'>
        /// </param>
        public static DelayedDeliveryPolicies GetDelayedDeliveryPolicies(
            this IPulsarAdminRESTAPI operations, string tenant, string @namespace)
        {
            return operations.GetDelayedDeliveryPoliciesAsync(tenant, @namespace).GetAwaiter().GetResult();
        }

        public static async Task<DelayedDeliveryPolicies> GetDelayedDeliveryPoliciesAsync(
            this IPulsarAdminRESTAPI operations, string tenant, string @namespace, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetDelayedDeliveryPoliciesWithHttpMessagesAsync(tenant, @namespace, null, cancellationToken)
                .ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Set offload configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static void SetOffloadPolicies(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, OffloadPolicies offloadPolicies)
        {
            operations.SetOffloadPoliciesAsync(tenant, namespaceParameter, offloadPolicies).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set offload configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task SetOffloadPoliciesAsync(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, OffloadPolicies offloadPolicies, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.SetOffloadPoliciesWithHttpMessagesAsync(tenant, namespaceParameter, offloadPolicies, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get offload configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        public static OffloadPolicies GetOffloadPolicies(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter)
        {
            return operations.GetOffloadPoliciesAsync(tenant, namespaceParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get offload configuration on a namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tenant'>
        /// </param>
        /// <param name='namespaceParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<OffloadPolicies> GetOffloadPoliciesAsync(this IPulsarAdminRESTAPI operations, string tenant, string namespaceParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetOffloadPoliciesWithHttpMessagesAsync(tenant, namespaceParameter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        
        /// <summary>
        ///  Proxy stats api to get info for live topics
        /// </summary>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public static IDictionary<string, TopicStats> GetProxyTopicsStats(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetProxyTopicsStatsAsync().GetAwaiter().GetResult();
        }


        /// <summary>
        ///  Proxy stats api to get info for live topics
        /// </summary>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public static async Task<IDictionary<string, TopicStats>> GetProxyTopicsStatsAsync(this IPulsarAdminRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetProxyTopicsStatsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        ///  Proxy stats api to get info for live connections
        /// </summary>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public static IList<ConnectionStats> GetProxyConnectionsStats(this IPulsarAdminRESTAPI operations)
        {
            return operations.GetProxyConnectionStatsAsync().GetAwaiter().GetResult();
        }


        /// <summary>
        ///  Proxy stats api to get info for live connections
        /// </summary>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public static async Task<IList<ConnectionStats>> GetProxyConnectionStatsAsync(this IPulsarAdminRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetProxyConnectionStatsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }


        public static object GetMessageById(this IPulsarAdminRESTAPI operations, string tenant, string @namespace, string topic, long ledger, long entry, bool isPersistentTopic)
        {
            return operations.GetMessageByIdAsync(tenant, @namespace, topic, ledger, entry, isPersistentTopic).GetAwaiter().GetResult();
        }


        public static async Task<object> GetMessageByIdAsync(this IPulsarAdminRESTAPI operations, string tenant, string @namespace, string topic, long ledger, long entry, bool isPersistentTopic, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetMessageByIdWithHttpMessagesAsync(tenant, @namespace, topic, ledger, entry, isPersistentTopic, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
