// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using SharpPulsar.Akka.Admin.Api.Models;

namespace PulsarAdmin.Models
{
    using Newtonsoft.Json;
    using System.Collections.Generic;

    public partial class Policies
    {
        /// <summary>
        /// Initializes a new instance of the Policies class.
        /// </summary>
        public Policies()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Policies class.
        /// </summary>
        /// <param name="subscriptionAuthMode">Possible values include: 'None',
        /// 'Prefix'</param>
        /// <param name="schemaAutoUpdateCompatibilityStrategy">Possible values
        /// include: 'AutoUpdateDisabled', 'Backward', 'Forward', 'Full',
        /// 'AlwaysCompatible', 'BackwardTransitive', 'ForwardTransitive',
        /// 'FullTransitive'</param>
        /// <param name="schemaCompatibilityStrategy">Possible values include:
        /// 'UNDEFINED', 'ALWAYS_INCOMPATIBLE', 'ALWAYS_COMPATIBLE',
        /// 'BACKWARD', 'FORWARD', 'FULL', 'BACKWARD_TRANSITIVE',
        /// 'FORWARD_TRANSITIVE', 'FULL_TRANSITIVE'</param>
        public Policies(AuthPolicies authPolicies = default(AuthPolicies), IList<string> replicationClusters = default(IList<string>), BundlesData bundles = default(BundlesData), IDictionary<string, BacklogQuota> backlogQuotaMap = default(IDictionary<string, BacklogQuota>), IDictionary<string, DispatchRate> clusterDispatchRate = default(IDictionary<string, DispatchRate>), IDictionary<string, DispatchRate> topicDispatchRate = default(IDictionary<string, DispatchRate>), IDictionary<string, DispatchRate> subscriptionDispatchRate = default(IDictionary<string, DispatchRate>), IDictionary<string, DispatchRate> replicatorDispatchRate = default(IDictionary<string, DispatchRate>), IDictionary<string, SubscribeRate> clusterSubscribeRate = default(IDictionary<string, SubscribeRate>), PersistencePolicies persistence = default(PersistencePolicies), bool? deduplicationEnabled = default(bool?), IDictionary<string, PublishRate> publishMaxMessageRate = default(IDictionary<string, PublishRate>), IDictionary<string, int?> latencyStatsSampleRate = default(IDictionary<string, int?>), int? messageTtlInSeconds = default(int?), RetentionPolicies retentionPolicies = default(RetentionPolicies), bool? deleted = default(bool?), string antiAffinityGroup = default(string), bool? encryptionRequired = default(bool?), DelayedDeliveryPolicies delayedDeliveryPolicies = default(DelayedDeliveryPolicies), string subscriptionAuthMode = default(string), int? maxProducersPerTopic = default(int?), int? maxConsumersPerTopic = default(int?), int? maxConsumersPerSubscription = default(int?), long? compactionThreshold = default(long?), long? offloadThreshold = default(long?), long? offloadDeletionLagMs = default(long?), string schemaAutoUpdateCompatibilityStrategy = default(string), string schemaCompatibilityStrategy = default(string), bool? isAllowAutoUpdateSchema = default(bool?), bool? schemaValidationEnforced = default(bool?), OffloadPolicies offloadPolicies = default(OffloadPolicies), int maxUnackedMessagesPerSubscription = default(int), int maxUnackMessagesPerConsumer = default(int))
        {
            AuthPolicies = authPolicies;
            ReplicationClusters = replicationClusters;
            Bundles = bundles;
            BacklogQuotaMap = backlogQuotaMap;
            ClusterDispatchRate = clusterDispatchRate;
            TopicDispatchRate = topicDispatchRate;
            SubscriptionDispatchRate = subscriptionDispatchRate;
            ReplicatorDispatchRate = replicatorDispatchRate;
            ClusterSubscribeRate = clusterSubscribeRate;
            Persistence = persistence;
            DeduplicationEnabled = deduplicationEnabled;
            PublishMaxMessageRate = publishMaxMessageRate;
            LatencyStatsSampleRate = latencyStatsSampleRate;
            MessageTtlInSeconds = messageTtlInSeconds;
            RetentionPolicies = retentionPolicies;
            Deleted = deleted;
            AntiAffinityGroup = antiAffinityGroup;
            EncryptionRequired = encryptionRequired;
            DelayedDeliveryPolicies = delayedDeliveryPolicies;
            SubscriptionAuthMode = subscriptionAuthMode;
            MaxProducersPerTopic = maxProducersPerTopic;
            MaxConsumersPerTopic = maxConsumersPerTopic;
            MaxConsumersPerSubscription = maxConsumersPerSubscription;
            CompactionThreshold = compactionThreshold;
            OffloadThreshold = offloadThreshold;
            OffloadDeletionLagMs = offloadDeletionLagMs;
            SchemaAutoUpdateCompatibilityStrategy = schemaAutoUpdateCompatibilityStrategy;
            SchemaCompatibilityStrategy = schemaCompatibilityStrategy;
            IsAllowAutoUpdateSchema = isAllowAutoUpdateSchema;
            SchemaValidationEnforced = schemaValidationEnforced;
            OffloadPolicies = offloadPolicies;
            MaxUnackedMessagesPerSubscription = maxUnackedMessagesPerSubscription;
            MaxUnackMessagesPerConsumer = maxUnackMessagesPerConsumer;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "auth_policies")]
        public AuthPolicies AuthPolicies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "replication_clusters")]
        public IList<string> ReplicationClusters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bundles")]
        public BundlesData Bundles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "backlog_quota_map")]
        public IDictionary<string, BacklogQuota> BacklogQuotaMap { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clusterDispatchRate")]
        public IDictionary<string, DispatchRate> ClusterDispatchRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "topicDispatchRate")]
        public IDictionary<string, DispatchRate> TopicDispatchRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionDispatchRate")]
        public IDictionary<string, DispatchRate> SubscriptionDispatchRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "replicatorDispatchRate")]
        public IDictionary<string, DispatchRate> ReplicatorDispatchRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clusterSubscribeRate")]
        public IDictionary<string, SubscribeRate> ClusterSubscribeRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "persistence")]
        public PersistencePolicies Persistence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deduplicationEnabled")]
        public bool? DeduplicationEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "publishMaxMessageRate")]
        public IDictionary<string, PublishRate> PublishMaxMessageRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "latency_stats_sample_rate")]
        public IDictionary<string, int?> LatencyStatsSampleRate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message_ttl_in_seconds")]
        public int? MessageTtlInSeconds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "retention_policies")]
        public RetentionPolicies RetentionPolicies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deleted")]
        public bool? Deleted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "antiAffinityGroup")]
        public string AntiAffinityGroup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "encryption_required")]
        public bool? EncryptionRequired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "delayed_delivery_policies")]
        public DelayedDeliveryPolicies DelayedDeliveryPolicies { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Prefix'
        /// </summary>
        [JsonProperty(PropertyName = "subscription_auth_mode")]
        public string SubscriptionAuthMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max_producers_per_topic")]
        public int? MaxProducersPerTopic { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max_consumers_per_topic")]
        public int? MaxConsumersPerTopic { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max_consumers_per_subscription")]
        public int? MaxConsumersPerSubscription { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "compaction_threshold")]
        public long? CompactionThreshold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "offload_threshold")]
        public long? OffloadThreshold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "offload_deletion_lag_ms")]
        public long? OffloadDeletionLagMs { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AutoUpdateDisabled',
        /// 'Backward', 'Forward', 'Full', 'AlwaysCompatible',
        /// 'BackwardTransitive', 'ForwardTransitive', 'FullTransitive'
        /// </summary>
        [JsonProperty(PropertyName = "schema_auto_update_compatibility_strategy")]
        public string SchemaAutoUpdateCompatibilityStrategy { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'UNDEFINED',
        /// 'ALWAYS_INCOMPATIBLE', 'ALWAYS_COMPATIBLE', 'BACKWARD', 'FORWARD',
        /// 'FULL', 'BACKWARD_TRANSITIVE', 'FORWARD_TRANSITIVE',
        /// 'FULL_TRANSITIVE'
        /// </summary>
        [JsonProperty(PropertyName = "schema_compatibility_strategy")]
        public string SchemaCompatibilityStrategy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "is_allow_auto_update_schema")]
        public bool? IsAllowAutoUpdateSchema { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schema_validation_enforced")]
        public bool? SchemaValidationEnforced { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "offload_policies")]
        public OffloadPolicies OffloadPolicies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max_unacked_messages_per_subscription")]
        public int MaxUnackedMessagesPerSubscription { get; set; } = -1;
        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "max_unacked_messages_per_consumer")]
        public int MaxUnackMessagesPerConsumer { get; set; } = -1;

    }
}
