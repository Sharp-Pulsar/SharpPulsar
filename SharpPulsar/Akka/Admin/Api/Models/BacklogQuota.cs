// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PulsarAdmin.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class BacklogQuota
    {
        /// <summary>
        /// Initializes a new instance of the BacklogQuota class.
        /// </summary>
        public BacklogQuota()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BacklogQuota class.
        /// </summary>
        /// <param name="policy">Possible values include:
        /// 'producer_request_hold', 'producer_exception',
        /// 'consumer_backlog_eviction'</param>
        public BacklogQuota(long limit = default(long), RetentionPolicy policy = default(RetentionPolicy))
        {
            Limit = limit;
            Policy = policy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "limit")]
        public long Limit { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'producer_request_hold',
        /// 'producer_exception', 'consumer_backlog_eviction'
        /// </summary>
        [JsonProperty(PropertyName = "policy")]
        public RetentionPolicy Policy { get; set; }

        /// <summary>
        /// Identifier to a backlog quota configuration (an instance of <seealso cref="BacklogQuota"/>).
        /// </summary>
        public enum BacklogQuotaType
        {
            destination_storage
        }
        /// <summary>
        /// Enumeration type determines how to retain backlog against the resource shortages.
        /// </summary>
        public enum RetentionPolicy
        {
            /// <summary>
            /// Policy which holds producer's send request until the resource becomes available (or holding times out). </summary>
            producer_request_hold,

            /// <summary>
            /// Policy which throws javax.jms.ResourceAllocationException to the producer. </summary>
            producer_exception,

            /// <summary>
            /// Policy which evicts the oldest message from the slowest consumer's backlog. </summary>
            consumer_backlog_eviction,
        }
    }

}
