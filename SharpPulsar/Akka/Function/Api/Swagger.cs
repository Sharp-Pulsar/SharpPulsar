//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace SharpPulsar.Akka.Function.Api
{
    using System.IO;
    using System = global::System;
    using System.Threading.Tasks;
    using System.Threading;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using Newtonsoft.Json;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial interface IPulsarFunctionsRESTAPIClient
    {
        /// <summary>Lists all Pulsar Functions currently deployed in a given namespace</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<string> ListFunctionsAsync(string tenant, string @namespace);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Lists all Pulsar Functions currently deployed in a given namespace</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<string> ListFunctionsAsync(string tenant, string @namespace, CancellationToken cancellationToken);
    
        /// <summary>Fetches information about a Pulsar Function currently running in cluster mode</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionConfig> GetFunctionInfoAsync(string tenant, string @namespace, string functionName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches information about a Pulsar Function currently running in cluster mode</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionConfig> GetFunctionInfoAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken);
    
        /// <summary>Creates a new Pulsar Function in cluster mode</summary>
        /// <param name="config">A JSON value presenting configuration payload of a Pulsar Function. An example of the expected Pulsar Function can be found here.  
        /// <returns>Pulsar Function successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task RegisterFunctionAsync(FunctionConfig config, string pkgUrl, string file);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Pulsar Function in cluster mode</summary>
         /// <param name="config">The name of a Pulsar Function</param>
         /// <returns>Pulsar Function successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task RegisterFunctionAsync(FunctionConfig config, string pkgUrl, string file, CancellationToken cancellationToken);
    
        /// <summary>Updates a Pulsar Function currently running in cluster mode</summary>
        /// <param name="config">The name of a Pulsar Function</param>
        /// <returns>Pulsar Function successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task UpdateFunctionAsync(FunctionConfig config, UpdateOptions options, string pkgUrl, string file);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a Pulsar Function currently running in cluster mode</summary>
        /// <param name="config">A JSON value presenting configuration payload of a Pulsar Function. An example of the expected Pulsar Function can be found here.  
        /// <returns>Pulsar Function successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task UpdateFunctionAsync(FunctionConfig config, UpdateOptions options, string pkgUrl, string file, CancellationToken cancellationToken);
    
        /// <summary>Deletes a Pulsar Function currently running in cluster mode</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>The Pulsar Function was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task DeregisterFunctionAsync(string tenant, string @namespace, string functionName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a Pulsar Function currently running in cluster mode</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>The Pulsar Function was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task DeregisterFunctionAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken);
    
        /// <summary>Restart all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task RestartFunctionAsync(string tenant, string @namespace, string functionName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restart all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task RestartFunctionAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken);
    
        /// <summary>Start all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task StartFunctionAsync(string tenant, string @namespace, string functionName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task StartFunctionAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken);
    
        /// <summary>Fetch the current state associated with a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="key">The stats key</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionState> GetFunctionStateAsync(string tenant, string @namespace, string functionName, string key);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetch the current state associated with a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="key">The stats key</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionState> GetFunctionStateAsync(string tenant, string @namespace, string functionName, string key, CancellationToken cancellationToken);
    
        /// <summary>Put the state associated with a Pulsar Function</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task PutFunctionStateAsync(string tenant, string @namespace, string functionName, string key);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Put the state associated with a Pulsar Function</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task PutFunctionStateAsync(string tenant, string @namespace, string functionName, string key, CancellationToken cancellationToken);
    
        /// <summary>Displays the stats of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionStats> GetFunctionStatsAsync(string tenant, string @namespace, string functionName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Displays the stats of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionStats> GetFunctionStatsAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken);
    
        /// <summary>Displays the status of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionStatus> GetFunctionStatusAsync(string tenant, string @namespace, string functionName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Displays the status of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionStatus> GetFunctionStatusAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken);
    
        /// <summary>Stop all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task StopFunctionAsync(string tenant, string @namespace, string functionName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task StopFunctionAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken);
    
        /// <summary>Triggers a Pulsar Function with a user-specified value or file data</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="bodyBody">The value with which you want to trigger the Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<Message> TriggerFunctionAsync(string tenant, string @namespace, string functionName, string topic, string triggerValue, string triggerFile);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Triggers a Pulsar Function with a user-specified value or file data</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="bodyBody">The value with which you want to trigger the Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<Message> TriggerFunctionAsync(string tenant, string @namespace, string functionName, string topic, string triggerValue, string triggerFile, CancellationToken cancellationToken);
    
        /// <summary>Restart an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances are restarted</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task RestartInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId);
        
        Task UploadFunctionAsync(string sourceFile, string path);
        Task UploadFunctionAsync(string sourceFile, string path, CancellationToken cancellationToken);
        Task DownloadFunctionAsync(string destinationPath, string tenant, string @namespace, string functionName);
        Task DownloadFunctionAsync(string destinationPath, string tenant, string @namespace, string functionName, CancellationToken cancellationToken);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restart an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances are restarted</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task RestartInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken);
    
        /// <summary>Start an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances sre started.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task StartInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances sre started.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task StartInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken);
    
        /// <summary>Displays the stats of a Pulsar Function instance</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, the stats of all instances is returned</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionInstanceStatsData> GetFunctionInstanceStatsAsync(string tenant, string @namespace, string functionName, string instanceId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Displays the stats of a Pulsar Function instance</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, the stats of all instances is returned</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionInstanceStatsData> GetFunctionInstanceStatsAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken);
    
        /// <summary>Displays the status of a Pulsar Function instance</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, the stats of all instances is returned</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionInstanceStatusData> GetFunctionInstanceStatusAsync(string tenant, string @namespace, string functionName, string instanceId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Displays the status of a Pulsar Function instance</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, the stats of all instances is returned</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FunctionInstanceStatusData> GetFunctionInstanceStatusAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken);
    
        /// <summary>Stop an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances are stopped.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task StopInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances are stopped.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task StopInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class PulsarFunctionsRESTAPIClient : IPulsarFunctionsRESTAPIClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
        private readonly string _baseUrl;
    
        public PulsarFunctionsRESTAPIClient(string server, System.Net.Http.HttpClient httpClient)
        {
            _baseUrl = $"{server.TrimEnd('/')}/admin/v3";
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        
        /// <summary>Lists all Pulsar Functions currently deployed in a given namespace</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<string> ListFunctionsAsync(string tenant, string @namespace)
        {
            return ListFunctionsAsync(tenant, @namespace, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Lists all Pulsar Functions currently deployed in a given namespace</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<string> ListFunctionsAsync(string tenant, string @namespace, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Fetches information about a Pulsar Function currently running in cluster mode</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<FunctionConfig> GetFunctionInfoAsync(string tenant, string @namespace, string functionName)
        {
            return GetFunctionInfoAsync(tenant, @namespace, functionName, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches information about a Pulsar Function currently running in cluster mode</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<FunctionConfig> GetFunctionInfoAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FunctionConfig>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function doesn\'t exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "408") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Request timeout", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FunctionConfig);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a new Pulsar Function in cluster mode</summary>
        /// <param name="config">A JSON value presenting configuration payload of a Pulsar Function. An example of the expected Pulsar Function can be found here.  
        /// <returns>Pulsar Function successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task RegisterFunctionAsync(FunctionConfig config, string pkgUrl, string file)
        {
            return RegisterFunctionAsync(config, pkgUrl, file, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Pulsar Function in cluster mode</summary>
        /// <param name="config">A JSON value presenting configuration payload of a Pulsar Function. An example of the expected Pulsar Function can be found here.  
        /// <returns>Pulsar Function successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task RegisterFunctionAsync(FunctionConfig config, string pkgUrl, string file, CancellationToken cancellationToken)
        {
            if (string.IsNullOrWhiteSpace(config.Tenant))
                throw new System.ArgumentNullException("tenant");
    
            if (string.IsNullOrWhiteSpace(config.Namespace))
                throw new System.ArgumentNullException("@namespace");
    
            if (string.IsNullOrWhiteSpace(config.Name))
                throw new System.ArgumentNullException("functionName");
            if (string.IsNullOrWhiteSpace(pkgUrl) && string.IsNullOrWhiteSpace(file))
                throw new System.ArgumentNullException("pkgUrl or File");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(config.Tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(config.Namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(config.Name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using var form = new MultipartFormDataContent();
                var json = JsonConvert.SerializeObject(config);
                var configContent = new StringContent(json);
                configContent.Headers.Add("Content-Disposition", "form-data; name=\"functionConfig\"");
                configContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                form.Add(configContent, "functionConfig");
                if (!string.IsNullOrWhiteSpace(file))
                {
                    var fileContent = new StreamContent(new MemoryStream(System.Convert.FromBase64String(file)));
                    fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                    {
                        Name = "\"data\"",
                        FileName = $"\"{config.Tenant}-{config.Name}-{config.Namespace}.jar\""
                    };
                    fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
                    form.Add(fileContent);
                }
                else
                {
                    form.Add(new StringContent(pkgUrl), "url");
                }
                var url_ = urlBuilder_.ToString();
                var response_ = await client_.PostAsync(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/") + url_, form, cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else
                    if (status_ == "400")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Invalid request (The Pulsar Function already exists, etc.)", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ == "403")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ == "408")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Request timeout", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a Pulsar Function currently running in cluster mode</summary>
        /// <param name="config">A JSON value presenting configuration payload of a Pulsar Function. An example of the expected Pulsar Function can be found here.  
        /// <returns>Pulsar Function successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// 
        public Task UpdateFunctionAsync(FunctionConfig config, UpdateOptions options, string pkgUrl, string file)
        {
            return UpdateFunctionAsync(config, options,  pkgUrl, file, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a Pulsar Function currently running in cluster mode</summary>
        /// <param name="config">A JSON value presenting configuration payload of a Pulsar Function. An example of the expected Pulsar Function can be found here.  
        /// <returns>Pulsar Function successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task UpdateFunctionAsync(FunctionConfig config, UpdateOptions options, string pkgUrl, string file, CancellationToken cancellationToken)
        {
            if (string.IsNullOrWhiteSpace(config.Tenant))
                throw new System.ArgumentNullException("tenant");

            if (string.IsNullOrWhiteSpace(config.Namespace))
                throw new System.ArgumentNullException("@namespace");

            if (string.IsNullOrWhiteSpace(config.Name))
                throw new System.ArgumentNullException("functionName");
            if (string.IsNullOrWhiteSpace(pkgUrl) && string.IsNullOrWhiteSpace(file))
                throw new System.ArgumentNullException("pkgUrl or File");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(config.Tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(config.Namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(config.Name, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using var form = new MultipartFormDataContent();
                var json = JsonConvert.SerializeObject(config);
                var configContent = new StringContent(json);
                configContent.Headers.Add("Content-Disposition", "form-data; name=\"functionConfig\"");
                configContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                form.Add(configContent, "functionConfig");
                if (options != null)
                {
                    var json2 = JsonConvert.SerializeObject(options);
                    var configContent2 = new StringContent(json2);
                    configContent2.Headers.Add("Content-Disposition", "form-data; name=\"updateOptions\"");
                    configContent2.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    form.Add(configContent2, "updateOptions");
                }
                if (!string.IsNullOrWhiteSpace(file))
                {
                    var fileContent = new StreamContent(new MemoryStream(System.Convert.FromBase64String(file)));
                    fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                    {
                        Name = "\"data\"",
                        FileName = $"\"{config.Tenant}-{config.Name}-{config.Namespace}.jar\""
                    };
                    fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
                    form.Add(fileContent);
                }
                else
                {
                    form.Add(new StringContent(pkgUrl), "url");
                }
                var url_ = urlBuilder_.ToString();
                var response_ = await client_.PutAsync(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/") + url_, form, cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else
                    if (status_ == "400")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Invalid request (The Pulsar Function doesn\'t exist, etc.)", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ == "403")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes a Pulsar Function currently running in cluster mode</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>The Pulsar Function was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task DeregisterFunctionAsync(string tenant, string @namespace, string functionName)
        {
            return DeregisterFunctionAsync(tenant, @namespace, functionName, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a Pulsar Function currently running in cluster mode</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>The Pulsar Function was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task DeregisterFunctionAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function doesn\'t exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "408") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Request timeout", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Restart all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task RestartFunctionAsync(string tenant, string @namespace, string functionName)
        {
            return RestartFunctionAsync(tenant, @namespace, functionName, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restart all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task RestartFunctionAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/restart");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Start all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task StartFunctionAsync(string tenant, string @namespace, string functionName)
        {
            return StartFunctionAsync(tenant, @namespace, functionName, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task StartFunctionAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/start");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Fetch the current state associated with a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="key">The stats key</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<FunctionState> GetFunctionStateAsync(string tenant, string @namespace, string functionName, string key)
        {
            return GetFunctionStateAsync(tenant, @namespace, functionName, key, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetch the current state associated with a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="key">The stats key</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<FunctionState> GetFunctionStateAsync(string tenant, string @namespace, string functionName, string key, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/state/{key}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{key}", System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FunctionState>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The key does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FunctionState);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Put the state associated with a Pulsar Function</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task PutFunctionStateAsync(string tenant, string @namespace, string functionName, string key)
        {
            return PutFunctionStateAsync(tenant, @namespace, functionName, key, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Put the state associated with a Pulsar Function</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task PutFunctionStateAsync(string tenant, string @namespace, string functionName, string key, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/state/{key}");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{key}", System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Displays the stats of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<FunctionStats> GetFunctionStatsAsync(string tenant, string @namespace, string functionName)
        {
            return GetFunctionStatsAsync(tenant, @namespace, functionName, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Displays the stats of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<FunctionStats> GetFunctionStatsAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/stats");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FunctionStats>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function doesn\'t exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FunctionStats);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Displays the status of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<FunctionStatus> GetFunctionStatusAsync(string tenant, string @namespace, string functionName)
        {
            return GetFunctionStatusAsync(tenant, @namespace, functionName, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Displays the status of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<FunctionStatus> GetFunctionStatusAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/status");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FunctionStatus>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function doesn\'t exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FunctionStatus);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Stop all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task StopFunctionAsync(string tenant, string @namespace, string functionName)
        {
            return StopFunctionAsync(tenant, @namespace, functionName, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop all instances of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task StopFunctionAsync(string tenant, string @namespace, string functionName, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/stop");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Triggers a Pulsar Function with a user-specified value or file data</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="bodyBody">The value with which you want to trigger the Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<Message> TriggerFunctionAsync(string tenant, string @namespace, string functionName, string topic, string triggerValue, string triggerFile)
        {
            return TriggerFunctionAsync(tenant, @namespace, functionName, topic, triggerValue, triggerFile, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Triggers a Pulsar Function with a user-specified value or file data</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="bodyBody">The value with which you want to trigger the Pulsar Function</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<Message> TriggerFunctionAsync(string tenant, string @namespace, string functionName, string topic, string triggerValue, string triggerFile, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/trigger");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using var form = new MultipartFormDataContent();
                if (!string.IsNullOrWhiteSpace(triggerFile))
                {
                    using var fileContent = new StreamContent(new MemoryStream(System.Convert.FromBase64String(triggerFile)));
                    fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                    {
                        Name = "\"dataStream\""
                    };
                    fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
                    form.Add(fileContent);
                }
                if (!string.IsNullOrWhiteSpace(triggerValue))
                    form.Add(new StringContent(triggerValue), "data");
                if (!string.IsNullOrWhiteSpace(topic))
                    form.Add(new StringContent(topic), "topic");
                var url_ = urlBuilder_.ToString();
                var response_ = await client_.PostAsync(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/") + url_, form, cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<Message>(response_, headers_).ConfigureAwait(false);
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == "400")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ == "404")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ == "408")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Request timeout", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ == "500")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                    }

                    return default(Message);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Restart an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances are restarted</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task RestartInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId)
        {
            return RestartInstanceFunctionAsync(tenant, @namespace, functionName, instanceId, CancellationToken.None);
        }

        public Task UploadFunctionAsync(string sourceFile, string path)
        {
            return UploadFunctionAsync(sourceFile, path, CancellationToken.None);
        }

        public async Task UploadFunctionAsync(string sourceFile, string path, CancellationToken cancellationToken)
        {
            if (string.IsNullOrWhiteSpace(sourceFile))
                throw new System.ArgumentNullException("sourceFile");

            if (string.IsNullOrWhiteSpace(path))
                throw new System.ArgumentNullException("path");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/upload");
            var client_ = _httpClient;
            try
            {
                using var form = new MultipartFormDataContent();
                using var fileContent = new StreamContent(new MemoryStream(System.Convert.FromBase64String(sourceFile)));
                fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                {
                    Name = "\"data\""
                };
                fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
                form.Add(fileContent);
                form.Add(new StringContent(path), "path");
                var url_ = urlBuilder_.ToString();
                var response_ = await client_.PostAsync(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/") + url_, form, cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "400")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ == "404")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ == "500")
                    {
                        string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                    }
                    else
                    if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
            finally
            {
            }
        }

        public Task DownloadFunctionAsync(string destinationPath, string tenant, string @namespace, string functionName)
        {
            throw new System.NotImplementedException();
        }


        public async Task DownloadFunctionAsync(string destinationPath, string tenant, string @namespace, string functionName,
            CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");

            if (functionName == null)
                throw new System.ArgumentNullException("functionName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/download");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
            var fileInfo = new FileInfo(destinationPath);
            var url_ = urlBuilder_.ToString();

            var response = await _httpClient.GetAsync(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/") + url_);
            response.EnsureSuccessStatusCode();
            await using var ms = await response.Content.ReadAsStreamAsync();
            await using var fs = File.Create(fileInfo.FullName);
            ms.Seek(0, SeekOrigin.Begin);
            ms.CopyTo(fs);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restart an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances are restarted</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task RestartInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/{instanceId}/restart");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Start an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances sre started.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task StartInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId)
        {
            return StartInstanceFunctionAsync(tenant, @namespace, functionName, instanceId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances sre started.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task StartInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/{instanceId}/start");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Displays the stats of a Pulsar Function instance</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, the stats of all instances is returned</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<FunctionInstanceStatsData> GetFunctionInstanceStatsAsync(string tenant, string @namespace, string functionName, string instanceId)
        {
            return GetFunctionInstanceStatsAsync(tenant, @namespace, functionName, instanceId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Displays the stats of a Pulsar Function instance</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, the stats of all instances is returned</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<FunctionInstanceStatsData> GetFunctionInstanceStatsAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/{instanceId}/stats");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FunctionInstanceStatsData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function doesn\'t exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FunctionInstanceStatsData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Displays the status of a Pulsar Function instance</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, the stats of all instances is returned</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task<FunctionInstanceStatusData> GetFunctionInstanceStatusAsync(string tenant, string @namespace, string functionName, string instanceId)
        {
            return GetFunctionInstanceStatusAsync(tenant, @namespace, functionName, instanceId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Displays the status of a Pulsar Function instance</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, the stats of all instances is returned</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task<FunctionInstanceStatusData> GetFunctionInstanceStatusAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/{instanceId}/status");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FunctionInstanceStatusData>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The requester doesn\'t have admin permissions", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function doesn\'t exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FunctionInstanceStatusData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Stop an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances are stopped.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public Task StopInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId)
        {
            return StopInstanceFunctionAsync(tenant, @namespace, functionName, instanceId, CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop an instance of a Pulsar Function</summary>
        /// <param name="tenant">The tenant of a Pulsar Function</param>
        /// <param name="@namespace">The namespace of a Pulsar Function</param>
        /// <param name="functionName">The name of a Pulsar Function</param>
        /// <param name="instanceId">The instanceId of a Pulsar Function (if instance-id is not provided, all instances are stopped.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async Task StopInstanceFunctionAsync(string tenant, string @namespace, string functionName, string instanceId, CancellationToken cancellationToken)
        {
            if (tenant == null)
                throw new System.ArgumentNullException("tenant");
    
            if (@namespace == null)
                throw new System.ArgumentNullException("@namespace");
    
            if (functionName == null)
                throw new System.ArgumentNullException("functionName");
    
            if (instanceId == null)
                throw new System.ArgumentNullException("instanceId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("functions/{tenant}/{namespace}/{functionName}/{instanceId}/stop");
            urlBuilder_.Replace("{tenant}", System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{namespace}", System.Uri.EscapeDataString(ConvertToString(@namespace, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{functionName}", System.Uri.EscapeDataString(ConvertToString(functionName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{instanceId}", System.Uri.EscapeDataString(ConvertToString(instanceId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), url_);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The Pulsar Function does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Internal server error", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; } = true;
        
        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ConsumerConfig 
    {
        [JsonProperty(PropertyName ="schemaType")]
        public string SchemaType { get; set; }
    
        [JsonProperty(PropertyName ="serdeClassName")]
        public string SerdeClassName { get; set; }
    
        [JsonProperty(PropertyName ="receiverQueueSize")]
        public int? ReceiverQueueSize { get; set; }
    
        [JsonProperty(PropertyName ="regexPattern")]
        public bool? RegexPattern { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EncryptionContext 
    {
        [JsonProperty(PropertyName ="keys")]
        public IDictionary<string, EncryptionKey> Keys { get; set; }
    
        [JsonProperty(PropertyName ="param")]
        public ICollection<byte[]> Param { get; set; }
    
        [JsonProperty(PropertyName ="algorithm")]
        public string Algorithm { get; set; }
    
        [JsonProperty(PropertyName ="compressionType")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EncryptionContextCompressionType? CompressionType { get; set; }
    
        [JsonProperty(PropertyName ="uncompressedMessageSize")]
        public int? UncompressedMessageSize { get; set; }
    
        [JsonProperty(PropertyName ="batchSize")]
        public int? BatchSize { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EncryptionKey 
    {
        [JsonProperty(PropertyName ="keyValue")]
        public ICollection<byte[]> KeyValue { get; set; }
    
        [JsonProperty(PropertyName ="metadata")]
        public IDictionary<string, string> Metadata { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ExceptionInformation 
    {
        [JsonProperty(PropertyName ="exceptionString")]
        public string ExceptionString { get; set; }
    
        [JsonProperty(PropertyName ="timestampMs")]
        public long? TimestampMs { get; set; }
    
    
    }
    public class FunctionConfig 
    {
        [JsonProperty(PropertyName = "runtimeFlags")] 
        public string RuntimeFlags { get; set; }

        [JsonProperty(PropertyName = "tenant")]
        public string Tenant { get; set; }

        [JsonProperty(PropertyName = "namespace")]
        public string Namespace { get; set; }

        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        [JsonProperty(PropertyName = "className")]
        public string ClassName { get; set; }

        [JsonProperty(PropertyName = "inputs")]
        public ICollection<string> Inputs { get; set; }

        [JsonProperty(PropertyName = "customSerdeInputs")]
        public IDictionary<string, string> CustomSerdeInputs { get; set; }

        [JsonProperty(PropertyName = "topicsPattern")]
        public string TopicsPattern { get; set; }

        [JsonProperty(PropertyName = "customSchemaInputs")]
        public IDictionary<string, string> CustomSchemaInputs { get; set; }
    
        [JsonProperty(PropertyName ="inputSpecs")]
        public IDictionary<string, ConsumerConfig> InputSpecs { get; set; }
    
        [JsonProperty(PropertyName ="output")]
        public string Output { get; set; }
    
        [JsonProperty(PropertyName ="outputSchemaType")]
        public string OutputSchemaType { get; set; }
    
        [JsonProperty(PropertyName ="outputSerdeClassName")]
        public string OutputSerdeClassName { get; set; }
    
        [JsonProperty(PropertyName ="logTopic")]
        public string LogTopic { get; set; }
    
        [JsonProperty(PropertyName ="processingGuarantees")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionConfigProcessingGuarantees? ProcessingGuarantees { get; set; }
    
        [JsonProperty(PropertyName ="retainOrdering")]
        public bool? RetainOrdering { get; set; }
    
        [JsonProperty(PropertyName ="userConfig")]
        public IDictionary<string, object> UserConfig { get; set; }
    
        [JsonProperty(PropertyName ="secrets")]
        public IDictionary<string, object> Secrets { get; set; }
    
        [JsonProperty(PropertyName ="runtime")]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionConfigRuntime? Runtime { get; set; }
    
        [JsonProperty(PropertyName ="autoAck")]
        public bool? AutoAck { get; set; }
    
        [JsonProperty(PropertyName ="maxMessageRetries")]
        public int? MaxMessageRetries { get; set; }
    
        [JsonProperty(PropertyName ="deadLetterTopic")]
        public string DeadLetterTopic { get; set; }
    
        [JsonProperty(PropertyName ="subName")]
        public string SubName { get; set; }
    
        [JsonProperty(PropertyName ="parallelism")]
        public int? Parallelism { get; set; }
    
        [JsonProperty(PropertyName ="resources")]
        public Resources Resources { get; set; }
    
        [JsonProperty(PropertyName ="fqfn")]
        public string Fqfn { get; set; }
    
        [JsonProperty(PropertyName ="windowConfig")]
        public WindowConfig WindowConfig { get; set; }
    
        [JsonProperty(PropertyName ="timeoutMs")]
        public long? TimeoutMs { get; set; }
    
        [JsonProperty(PropertyName ="jar")]
        public string Jar { get; set; }
    
        [JsonProperty(PropertyName ="py")]
        public string Py { get; set; }
    
        [JsonProperty(PropertyName ="go")]
        public string Go { get; set; }
    
        [JsonProperty(PropertyName ="cleanupSubscription")]
        public bool? CleanupSubscription { get; set; }
    
        [JsonProperty(PropertyName ="customRuntimeOptions")]
        public string CustomRuntimeOptions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionInstanceStats 
    {
        [JsonProperty(PropertyName ="instanceId")]
        public int? InstanceId { get; set; }
    
        [JsonProperty(PropertyName ="metrics")]
        public FunctionInstanceStatsData Metrics { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionInstanceStatsData 
    {
        [JsonProperty(PropertyName ="receivedTotal")]
        public long? ReceivedTotal { get; set; }
    
        [JsonProperty(PropertyName ="processedSuccessfullyTotal")]
        public long? ProcessedSuccessfullyTotal { get; set; }
    
        [JsonProperty(PropertyName ="systemExceptionsTotal")]
        public long? SystemExceptionsTotal { get; set; }
    
        [JsonProperty(PropertyName ="userExceptionsTotal")]
        public long? UserExceptionsTotal { get; set; }
    
        [JsonProperty(PropertyName ="avgProcessLatency")]
        public double? AvgProcessLatency { get; set; }
    
        [JsonProperty(PropertyName ="1min")]
        public FunctionInstanceStatsDataBase _1min { get; set; }
    
        [JsonProperty(PropertyName ="lastInvocation")]
        public long? LastInvocation { get; set; }
    
        [JsonProperty(PropertyName ="userMetrics")]
        public IDictionary<string, double> UserMetrics { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionInstanceStatsDataBase 
    {
        [JsonProperty(PropertyName ="receivedTotal")]
        public long? ReceivedTotal { get; set; }
    
        [JsonProperty(PropertyName ="processedSuccessfullyTotal")]
        public long? ProcessedSuccessfullyTotal { get; set; }
    
        [JsonProperty(PropertyName ="systemExceptionsTotal")]
        public long? SystemExceptionsTotal { get; set; }
    
        [JsonProperty(PropertyName ="userExceptionsTotal")]
        public long? UserExceptionsTotal { get; set; }
    
        [JsonProperty(PropertyName ="avgProcessLatency")]
        public double? AvgProcessLatency { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionInstanceStatus 
    {
        [JsonProperty(PropertyName ="instanceId")]
        public int? InstanceId { get; set; }
    
        [JsonProperty(PropertyName ="status")]
        public FunctionInstanceStatusData Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionInstanceStatusData 
    {
        [JsonProperty(PropertyName ="running")]
        public bool? Running { get; set; }
    
        [JsonProperty(PropertyName ="error")]
        public string Error { get; set; }
    
        [JsonProperty(PropertyName ="numRestarts")]
        public long? NumRestarts { get; set; }
    
        [JsonProperty(PropertyName ="numReceived")]
        public long? NumReceived { get; set; }
    
        [JsonProperty(PropertyName ="numSuccessfullyProcessed")]
        public long? NumSuccessfullyProcessed { get; set; }
    
        [JsonProperty(PropertyName ="numUserExceptions")]
        public long? NumUserExceptions { get; set; }
    
        [JsonProperty(PropertyName ="latestUserExceptions")]
        public ICollection<ExceptionInformation> LatestUserExceptions { get; set; }
    
        [JsonProperty(PropertyName ="numSystemExceptions")]
        public long? NumSystemExceptions { get; set; }
    
        [JsonProperty(PropertyName ="latestSystemExceptions")]
        public ICollection<ExceptionInformation> LatestSystemExceptions { get; set; }
    
        [JsonProperty(PropertyName ="averageLatency")]
        public double? AverageLatency { get; set; }
    
        [JsonProperty(PropertyName ="lastInvocationTime")]
        public long? LastInvocationTime { get; set; }
    
        [JsonProperty(PropertyName ="workerId")]
        public string WorkerId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionState 
    {
        [JsonProperty(PropertyName ="key")]
        public string Key { get; set; }
    
        [JsonProperty(PropertyName ="stringValue")]
        public string StringValue { get; set; }
    
        [JsonProperty(PropertyName ="byteValue")]
        public ICollection<byte[]> ByteValue { get; set; }
    
        [JsonProperty(PropertyName ="numberValue")]
        public long? NumberValue { get; set; }
    
        [JsonProperty(PropertyName ="version")]
        public long? Version { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionStats 
    {
        [JsonProperty(PropertyName ="receivedTotal")]
        public long? ReceivedTotal { get; set; }
    
        [JsonProperty(PropertyName ="processedSuccessfullyTotal")]
        public long? ProcessedSuccessfullyTotal { get; set; }
    
        [JsonProperty(PropertyName ="systemExceptionsTotal")]
        public long? SystemExceptionsTotal { get; set; }
    
        [JsonProperty(PropertyName ="userExceptionsTotal")]
        public long? UserExceptionsTotal { get; set; }
    
        [JsonProperty(PropertyName ="avgProcessLatency")]
        public double? AvgProcessLatency { get; set; }
    
        [JsonProperty(PropertyName ="1min")]
        public FunctionInstanceStatsDataBase _1min { get; set; }
    
        [JsonProperty(PropertyName ="lastInvocation")]
        public long? LastInvocation { get; set; }
    
        [JsonProperty(PropertyName ="instances")]
        public ICollection<FunctionInstanceStats> Instances { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class FunctionStatus 
    {
        [JsonProperty(PropertyName ="numInstances")]
        public int? NumInstances { get; set; }
    
        [JsonProperty(PropertyName ="numRunning")]
        public int? NumRunning { get; set; }
    
        [JsonProperty(PropertyName ="instances")]
        public ICollection<FunctionInstanceStatus> Instances { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class InputStream 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Message 
    {
        [JsonProperty(PropertyName ="data")]
        public ICollection<byte[]> Data { get; set; }
    
        [JsonProperty(PropertyName ="replicatedFrom")]
        public string ReplicatedFrom { get; set; }
    
        [JsonProperty(PropertyName ="encryptionCtx")]
        public EncryptionContext EncryptionCtx { get; set; }
    
        [JsonProperty(PropertyName ="schemaVersion")]
        public ICollection<byte[]> SchemaVersion { get; set; }
    
        [JsonProperty(PropertyName ="sequenceId")]
        public long? SequenceId { get; set; }
    
        [JsonProperty(PropertyName ="orderingKey")]
        public ICollection<byte[]> OrderingKey { get; set; }
    
        [JsonProperty(PropertyName ="keyBytes")]
        public ICollection<byte[]> KeyBytes { get; set; }
    
        [JsonProperty(PropertyName ="messageId")]
        public MessageId MessageId { get; set; }
    
        [JsonProperty(PropertyName ="redeliveryCount")]
        public int? RedeliveryCount { get; set; }
    
        [JsonProperty(PropertyName ="topicName")]
        public string TopicName { get; set; }
    
        [JsonProperty(PropertyName ="producerName")]
        public string ProducerName { get; set; }
    
        [JsonProperty(PropertyName ="publishTime")]
        public long? PublishTime { get; set; }
    
        [JsonProperty(PropertyName ="eventTime")]
        public long? EventTime { get; set; }
    
        [JsonProperty(PropertyName ="replicated")]
        public bool? Replicated { get; set; }
    
        [JsonProperty(PropertyName ="value")]
        public object Value { get; set; }
    
        [JsonProperty(PropertyName ="key")]
        public string Key { get; set; }
    
        [JsonProperty(PropertyName ="properties")]
        public IDictionary<string, string> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class MessageId 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Resources 
    {
        [JsonProperty(PropertyName ="cpu")]
        public double? Cpu { get; set; }
    
        [JsonProperty(PropertyName ="ram")]
        public long? Ram { get; set; }
    
        [JsonProperty(PropertyName ="disk")]
        public long? Disk { get; set; }
    
    
    }
    
    /// <summary>Options while updating the sink</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class UpdateOptions 
    {
        /// <summary>Whether or not to update the auth data</summary>
        [JsonProperty(PropertyName ="update-auth-data")]
        public bool? UpdateAuthData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class WindowConfig 
    {
        [JsonProperty(PropertyName ="windowLengthCount")]
        public int? WindowLengthCount { get; set; }
    
        [JsonProperty(PropertyName ="windowLengthDurationMs")]
        public long? WindowLengthDurationMs { get; set; }
    
        [JsonProperty(PropertyName ="slidingIntervalCount")]
        public int? SlidingIntervalCount { get; set; }
    
        [JsonProperty(PropertyName ="slidingIntervalDurationMs")]
        public long? SlidingIntervalDurationMs { get; set; }
    
        [JsonProperty(PropertyName ="lateDataTopic")]
        public string LateDataTopic { get; set; }
    
        [JsonProperty(PropertyName ="maxLagMs")]
        public long? MaxLagMs { get; set; }
    
        [JsonProperty(PropertyName ="watermarkEmitIntervalMs")]
        public long? WatermarkEmitIntervalMs { get; set; }
    
        [JsonProperty(PropertyName ="timestampExtractorClassName")]
        public string TimestampExtractorClassName { get; set; }
    
        [JsonProperty(PropertyName ="actualWindowFunctionClassName")]
        public string ActualWindowFunctionClassName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum EncryptionContextCompressionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LZ4")]
        LZ4 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZLIB")]
        ZLIB = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZSTD")]
        ZSTD = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SNAPPY")]
        SNAPPY = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FunctionConfigProcessingGuarantees
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ATLEAST_ONCE")]
        ATLEAST_ONCE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ATMOST_ONCE")]
        ATMOST_ONCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EFFECTIVELY_ONCE")]
        EFFECTIVELY_ONCE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum FunctionConfigRuntime
    {
        [System.Runtime.Serialization.EnumMember(Value = @"JAVA")]
        JAVA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PYTHON")]
        PYTHON = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GO")]
        GO = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108