using System;
using System.Collections.Generic;

/// <summary>
/// Licensed to the Apache Software Foundation (ASF) under one
/// or more contributor license agreements.  See the NOTICE file
/// distributed with this work for additional information
/// regarding copyright ownership.  The ASF licenses this file
/// to you under the Apache License, Version 2.0 (the
/// "License"); you may not use this file except in compliance
/// with the License.  You may obtain a copy of the License at
/// 
///   http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing,
/// software distributed under the License is distributed on an
/// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
/// KIND, either express or implied.  See the License for the
/// specific language governing permissions and limitations
/// under the License.
/// </summary>
namespace SharpPulsar.Impl.Schema
{
	using JsonInclude = com.fasterxml.jackson.annotation.JsonInclude;
	using JsonProcessingException = com.fasterxml.jackson.core.JsonProcessingException;
	using DeserializationFeature = com.fasterxml.jackson.databind.DeserializationFeature;
	using ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
	using JsonSchema = com.fasterxml.jackson.module.jsonSchema.JsonSchema;
	using JsonSchemaGenerator = com.fasterxml.jackson.module.jsonSchema.JsonSchemaGenerator;
	using Slf4j = lombok.@extern.slf4j.Slf4j;
	using SharpPulsar.Api.Schema;
	using SharpPulsar.Api.Schema;
	using SharpPulsar.Impl.Schema.Reader;
	using SharpPulsar.Impl.Schema.Writer;
	using BytesSchemaVersion = Org.Apache.Pulsar.Common.Protocol.Schema.BytesSchemaVersion;
	using SchemaInfo = Org.Apache.Pulsar.Common.Schema.SchemaInfo;
	using SchemaType = Org.Apache.Pulsar.Common.Schema.SchemaType;

	/// <summary>
	/// A schema implementation to deal with json data.
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Slf4j public class JSONSchema<T> extends StructSchema<T>
	public class JSONSchema<T> : StructSchema<T>
	{
		// Cannot use org.apache.pulsar.common.util.ObjectMapperFactory.getThreadLocal() because it does not
		// return shaded version of object mapper
		private static readonly ThreadLocal<ObjectMapper> JSON_MAPPER = ThreadLocal.withInitial(() =>
		{
		ObjectMapper Mapper = new ObjectMapper();
		Mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
		Mapper.SerializationInclusion = JsonInclude.Include.NON_NULL;
		return Mapper;
		});

		private readonly Type pojo = typeof(T);

		private JSONSchema(SchemaInfo SchemaInfo, Type Pojo) : base(SchemaInfo)
		{
			this.pojo = Pojo;
			Writer = new JsonWriter<>(JSON_MAPPER.get());
			Reader = new JsonReader<>(JSON_MAPPER.get(), Pojo);
		}

		public override SchemaReader<T> LoadReader(BytesSchemaVersion SchemaVersion)
		{
			throw new Exception("JSONSchema don't support schema versioning");
		}

		/// <summary>
		/// Implemented for backwards compatibility reasons
		/// since the original schema generated by JSONSchema was based off the json schema standard
		/// since then we have standardized on Avro
		/// 
		/// @return
		/// </summary>
		public virtual SchemaInfo BackwardsCompatibleJsonSchemaInfo
		{
			get
			{
				SchemaInfo BackwardsCompatibleSchemaInfo;
				try
				{
					ObjectMapper ObjectMapper = new ObjectMapper();
					JsonSchemaGenerator SchemaGen = new JsonSchemaGenerator(ObjectMapper);
					JsonSchema JsonBackwardsCompatibleSchema = SchemaGen.generateSchema(pojo);
					BackwardsCompatibleSchemaInfo = new SchemaInfo();
					BackwardsCompatibleSchemaInfo.Name = "";
					BackwardsCompatibleSchemaInfo.Properties = SchemaInfoConflict.Properties;
					BackwardsCompatibleSchemaInfo.Type = SchemaType.JSON;
					BackwardsCompatibleSchemaInfo.Schema = ObjectMapper.writeValueAsBytes(JsonBackwardsCompatibleSchema);
				}
				catch (JsonProcessingException Ex)
				{
					throw new Exception(Ex);
				}
				return BackwardsCompatibleSchemaInfo;
			}
		}

		public static JSONSchema<T> Of<T>(SchemaDefinition<T> SchemaDefinition)
		{
			return new JSONSchema<T>(ParseSchemaInfo(SchemaDefinition, SchemaType.JSON), SchemaDefinition.Pojo);
		}

		public static JSONSchema<T> Of<T>(Type Pojo)
		{
			return JSONSchema.Of(SchemaDefinition.builder<T>().withPojo(Pojo).build());
		}

		public static JSONSchema<T> Of<T>(Type Pojo, IDictionary<string, string> Properties)
		{
			return JSONSchema.Of(SchemaDefinition.builder<T>().withPojo(Pojo).withProperties(Properties).build());
		}

	}

}