using System;
using System.Collections.Generic;
using Newtonsoft.Json.Schema;
using SharpPulsar.Common.Schema;
using SharpPulsar.Impl.Conf;
using SharpPulsar.Protocol.Schema;
using SharpPulsar.Shared;
using SharpPulsar.Util.Atomic.Threading;

/// <summary>
/// Licensed to the Apache Software Foundation (ASF) under one
/// or more contributor license agreements.  See the NOTICE file
/// distributed with this work for additional information
/// regarding copyright ownership.  The ASF licenses this file
/// to you under the Apache License, Version 2.0 (the
/// "License"); you may not use this file except in compliance
/// with the License.  You may obtain a copy of the License at
/// 
///   http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing,
/// software distributed under the License is distributed on an
/// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
/// KIND, either express or implied.  See the License for the
/// specific language governing permissions and limitations
/// under the License.
/// </summary>
namespace SharpPulsar.Impl.Schema
{
	using DotNetty.Buffers;
	using Api;
	using SharpPulsar.Api.Schema;
	using Reader;
	using Writer;

	/// <summary>
	/// A schema implementation to deal with json data.
	/// </summary>
	public class JsonSchema<T> : StructSchema<T>
	{
		// Cannot use org.apache.pulsar.common.util.ObjectMapperFactory.getThreadLocal() because it does not
		// return shaded version of object mapper
		private readonly ObjectMapper _mapper = new ObjectMapper();

		private JsonSchema(SchemaInfo schemaInfo) : base(schemaInfo)
		{
			Writer = new JsonWriter<T>(_mapper);
			Reader = new JsonReader<T>(_mapper);
		}

		public override ISchemaReader<T> LoadReader(BytesSchemaVersion schemaVersion)
		{
			throw new System.Exception("JSONSchema don't support schema versioning");
		}

		/// <summary>
		/// Implemented for backwards compatibility reasons
		/// since the original schema generated by JSONSchema was based off the json schema standard
		/// since then we have standardized on Avro
		/// 
		/// @return
		/// </summary>
		[Obsolete]
		public virtual SchemaInfo BackwardsCompatibleJsonSchemaInfo
		{
			get
			{
				SchemaInfo backwardsCompatibleSchemaInfo;
				try
				{
					var objectMapper = new ObjectMapper();
					var schemaGen = new JsonSchemaGenerator();
					var jsonBackwardsCompatibleSchema = schemaGen.Generate(typeof(T));
					backwardsCompatibleSchemaInfo = new SchemaInfo
					{
						Name = "",
						Properties = SchemaInfo.Properties,
						Type = SchemaType.Json,
						Schema = (sbyte[])(Array)objectMapper.WriteValueAsBytes(jsonBackwardsCompatibleSchema)
					};
				}
				catch (System.Exception ex)
				{
					throw ex;
				}
				return backwardsCompatibleSchemaInfo;
			}
		}

		public override ISchemaInfo SchemaInfo => throw new NotImplementedException();

		public static JsonSchema<T> Of(ISchemaDefinition<T> schemaDefinition)
		{
			return new JsonSchema<T>(ParseSchemaInfo(schemaDefinition, SchemaType.Json));
		}

		public static JsonSchema<T> Of(T pojo)
		{
			return Of(ISchemaDefinition<T>.Builder().WithPojo(pojo).Build());
		}

		public static JsonSchema<T> Of(T pojo, IDictionary<string, string> properties)
		{
			return Of(ISchemaDefinition<T>.Builder().WithPojo(pojo).WithProperties(properties).Build());
		}

		public override IGenericSchema<IGenericRecord> Generic(SchemaInfo schemaInfo)
		{
			throw new NotImplementedException();
		}

		public override ISchema<object> GetSchema(SchemaInfo schemaInfo)
		{
			throw new NotImplementedException();
		}

		public override ISchema<sbyte[]> AUTO_PRODUCE_BYTES<T1>(ISchema<T1> schema)
		{
			throw new NotImplementedException();
		}

		public override ISchema<sbyte[]> AutoProduceBytes()
		{
			throw new NotImplementedException();
		}

		public override ISchema<IGenericRecord> AutoConsume()
		{
			throw new NotImplementedException();
		}

		public override ISchema<IGenericRecord> Auto()
		{
			throw new NotImplementedException();
		}

		public override ISchema<T> Json(ISchemaDefinition<T> schemaDefinition)
		{
			throw new NotImplementedException();
		}

		public override ISchema<T> Json(T pojo)
		{
			throw new NotImplementedException();
		}

		public override void ConfigureSchemaInfo(string topic, string componentName, SchemaInfo schemaInfo)
		{
			throw new NotImplementedException();
		}

		public override bool RequireFetchingSchemaInfo()
		{
			throw new NotImplementedException();
		}

		public override bool SupportSchemaVersioning()
		{
			throw new NotImplementedException();
		}

		public override void Validate(sbyte[] message)
		{
			throw new NotImplementedException();
		}
		
		public new T Decode(IByteBuffer byteBuf)
		{
			throw new NotImplementedException();
		}

	}

}