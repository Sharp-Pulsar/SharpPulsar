// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PulsarAdmin.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SubscriptionStats
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionStats class.
        /// </summary>
        public SubscriptionStats()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubscriptionStats class.
        /// </summary>
        /// <param name="type">Possible values include: 'Exclusive', 'Shared',
        /// 'Failover', 'Key_Shared'</param>
        public SubscriptionStats(double? msgRateOut = default(double?), double? msgThroughputOut = default(double?), double? msgRateRedeliver = default(double?), long? msgBacklog = default(long?), bool? blockedSubscriptionOnUnackedMsgs = default(bool?), long? msgDelayed = default(long?), long? unackedMessages = default(long?), string type = default(string), string activeConsumerName = default(string), double? msgRateExpired = default(double?), long? lastExpireTimestamp = default(long?), IList<ConsumerStats> consumers = default(IList<ConsumerStats>), bool? isReplicated = default(bool?))
        {
            MsgRateOut = msgRateOut;
            MsgThroughputOut = msgThroughputOut;
            MsgRateRedeliver = msgRateRedeliver;
            MsgBacklog = msgBacklog;
            BlockedSubscriptionOnUnackedMsgs = blockedSubscriptionOnUnackedMsgs;
            MsgDelayed = msgDelayed;
            UnackedMessages = unackedMessages;
            Type = type;
            ActiveConsumerName = activeConsumerName;
            MsgRateExpired = msgRateExpired;
            LastExpireTimestamp = lastExpireTimestamp;
            Consumers = consumers;
            IsReplicated = isReplicated;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "msgRateOut")]
        public double? MsgRateOut { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "msgThroughputOut")]
        public double? MsgThroughputOut { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "msgRateRedeliver")]
        public double? MsgRateRedeliver { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "msgBacklog")]
        public long? MsgBacklog { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "blockedSubscriptionOnUnackedMsgs")]
        public bool? BlockedSubscriptionOnUnackedMsgs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "msgDelayed")]
        public long? MsgDelayed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "unackedMessages")]
        public long? UnackedMessages { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Exclusive', 'Shared',
        /// 'Failover', 'Key_Shared'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activeConsumerName")]
        public string ActiveConsumerName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "msgRateExpired")]
        public double? MsgRateExpired { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastExpireTimestamp")]
        public long? LastExpireTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "consumers")]
        public IList<ConsumerStats> Consumers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isReplicated")]
        public bool? IsReplicated { get; set; }

    }
}
